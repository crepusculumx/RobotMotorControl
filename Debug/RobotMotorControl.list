
RobotMotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007624  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08007738  08007738  00017738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b5c  08007b5c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007b5c  08007b5c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b5c  08007b5c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b60  08007b60  00017b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ec  200001e0  08007d40  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  08007d40  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011563  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f13  00000000  00000000  00031768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00034680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00035558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198ec  00000000  00000000  000362c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011974  00000000  00000000  0004fbb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c575  00000000  00000000  00061528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eda9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bcc  00000000  00000000  000edaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800771c 	.word	0x0800771c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800771c 	.word	0x0800771c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000adc:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <MX_GPIO_Init+0x90>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <MX_GPIO_Init+0x90>)
 8000ae2:	f043 0320 	orr.w	r3, r3, #32
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <MX_GPIO_Init+0x90>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0320 	and.w	r3, r3, #32
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_GPIO_Init+0x90>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <MX_GPIO_Init+0x90>)
 8000afa:	f043 0308 	orr.w	r3, r3, #8
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_GPIO_Init+0x90>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0308 	and.w	r3, r3, #8
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_GPIO_Init+0x90>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <MX_GPIO_Init+0x90>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_GPIO_Init+0x90>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000b2a:	480c      	ldr	r0, [pc, #48]	; (8000b5c <MX_GPIO_Init+0x94>)
 8000b2c:	f001 f97c 	bl	8001e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b30:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	2301      	movs	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4619      	mov	r1, r3
 8000b48:	4804      	ldr	r0, [pc, #16]	; (8000b5c <MX_GPIO_Init+0x94>)
 8000b4a:	f000 ffe9 	bl	8001b20 <HAL_GPIO_Init>

}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010c00 	.word	0x40010c00

08000b60 <init_all_driver>:
uint8_t tx_buffer[MAX_PACKET_LENGTH];
Deque rxDequeue;

bool control_flag = 0;

void init_all_driver() {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af04      	add	r7, sp, #16
  PwmDriver_init(&pwmDriver, 64, &htim1, TIM_CHANNEL_1, 64, 65535);
 8000b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6a:	f04f 0300 	mov.w	r3, #0
 8000b6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2300      	movs	r3, #0
 8000b78:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <init_all_driver+0x68>)
 8000b7a:	2140      	movs	r1, #64	; 0x40
 8000b7c:	4813      	ldr	r0, [pc, #76]	; (8000bcc <init_all_driver+0x6c>)
 8000b7e:	f003 ff1b 	bl	80049b8 <PwmDriver_init>
  GpioDriver_init(&enGpioDriver, GPIOB, GPIO_PIN_14);
 8000b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b86:	4912      	ldr	r1, [pc, #72]	; (8000bd0 <init_all_driver+0x70>)
 8000b88:	4812      	ldr	r0, [pc, #72]	; (8000bd4 <init_all_driver+0x74>)
 8000b8a:	f003 fd61 	bl	8004650 <GpioDriver_init>
  GpioDriver_init(&dirGpioDriver, GPIOB, GPIO_PIN_15);
 8000b8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b92:	490f      	ldr	r1, [pc, #60]	; (8000bd0 <init_all_driver+0x70>)
 8000b94:	4810      	ldr	r0, [pc, #64]	; (8000bd8 <init_all_driver+0x78>)
 8000b96:	f003 fd5b 	bl	8004650 <GpioDriver_init>

  MotorDriver_init(&motorDriver, &pwmDriver, &enGpioDriver, &dirGpioDriver);
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <init_all_driver+0x78>)
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <init_all_driver+0x74>)
 8000b9e:	490b      	ldr	r1, [pc, #44]	; (8000bcc <init_all_driver+0x6c>)
 8000ba0:	480e      	ldr	r0, [pc, #56]	; (8000bdc <init_all_driver+0x7c>)
 8000ba2:	f003 fe9f 	bl	80048e4 <MotorDriver_init>
  //100Hz
  MotorController_init(&motorController, &motorDriver, 100, 0.1);
 8000ba6:	a306      	add	r3, pc, #24	; (adr r3, 8000bc0 <init_all_driver+0x60>)
 8000ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bac:	e9cd 2300 	strd	r2, r3, [sp]
 8000bb0:	2264      	movs	r2, #100	; 0x64
 8000bb2:	490a      	ldr	r1, [pc, #40]	; (8000bdc <init_all_driver+0x7c>)
 8000bb4:	480a      	ldr	r0, [pc, #40]	; (8000be0 <init_all_driver+0x80>)
 8000bb6:	f003 fd8d 	bl	80046d4 <MotorController_init>

}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	9999999a 	.word	0x9999999a
 8000bc4:	3fb99999 	.word	0x3fb99999
 8000bc8:	200007a0 	.word	0x200007a0
 8000bcc:	20000230 	.word	0x20000230
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	20000790 	.word	0x20000790
 8000bd8:	20000704 	.word	0x20000704
 8000bdc:	20000210 	.word	0x20000210
 8000be0:	20000718 	.word	0x20000718

08000be4 <try_parse_protocol_from_queue>:

int try_parse_protocol_from_queue(ProtocolPacket *data_packet) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0b4      	sub	sp, #208	; 0xd0
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint8_t cur_packet[MAX_PACKET_LENGTH];//将包写入buffer

  //先找个包头
  uint8_t temp_lst_head = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  bool find_head_flag = false;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
  for (size_t i = 0; i < MAX_PACKET_LENGTH; i++) {
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000bfe:	e01a      	b.n	8000c36 <try_parse_protocol_from_queue+0x52>
    uint8_t cur = Dequeue_pop_front(&rxDequeue);
 8000c00:	4855      	ldr	r0, [pc, #340]	; (8000d58 <try_parse_protocol_from_queue+0x174>)
 8000c02:	f003 fcd5 	bl	80045b0 <Dequeue_pop_front>
 8000c06:	4603      	mov	r3, r0
 8000c08:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
    if (temp_lst_head == HD_NUM && cur == ID_NUM) {
 8000c0c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000c10:	2bfa      	cmp	r3, #250	; 0xfa
 8000c12:	d107      	bne.n	8000c24 <try_parse_protocol_from_queue+0x40>
 8000c14:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d103      	bne.n	8000c24 <try_parse_protocol_from_queue+0x40>
      find_head_flag = true;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
      break;
 8000c22:	e00c      	b.n	8000c3e <try_parse_protocol_from_queue+0x5a>
    }
    temp_lst_head = cur;
 8000c24:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000c28:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  for (size_t i = 0; i < MAX_PACKET_LENGTH; i++) {
 8000c2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000c30:	3301      	adds	r3, #1
 8000c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000c36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000c3a:	2ba9      	cmp	r3, #169	; 0xa9
 8000c3c:	d9e0      	bls.n	8000c00 <try_parse_protocol_from_queue+0x1c>
  }
  //没找到包头
  if (find_head_flag == false) return -1;
 8000c3e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000c42:	f083 0301 	eor.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <try_parse_protocol_from_queue+0x6e>
 8000c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c50:	e07e      	b.n	8000d50 <try_parse_protocol_from_queue+0x16c>

  cur_packet[0] = HD_NUM;
 8000c52:	23fa      	movs	r3, #250	; 0xfa
 8000c54:	733b      	strb	r3, [r7, #12]
  cur_packet[1] = ID_NUM;
 8000c56:	2301      	movs	r3, #1
 8000c58:	737b      	strb	r3, [r7, #13]

  // 长度
  size_t cur_packet_length = cur_packet[2] = Dequeue_pop_front(&rxDequeue);
 8000c5a:	483f      	ldr	r0, [pc, #252]	; (8000d58 <try_parse_protocol_from_queue+0x174>)
 8000c5c:	f003 fca8 	bl	80045b0 <Dequeue_pop_front>
 8000c60:	4603      	mov	r3, r0
 8000c62:	73bb      	strb	r3, [r7, #14]
 8000c64:	7bbb      	ldrb	r3, [r7, #14]
 8000c66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  //长度错误
  printf("len: %d\n", cur_packet_length);
 8000c6a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8000c6e:	483b      	ldr	r0, [pc, #236]	; (8000d5c <try_parse_protocol_from_queue+0x178>)
 8000c70:	f004 fc52 	bl	8005518 <iprintf>
  if (cur_packet_length > MAX_PACKET_LENGTH) return -2;
 8000c74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c78:	2baa      	cmp	r3, #170	; 0xaa
 8000c7a:	d902      	bls.n	8000c82 <try_parse_protocol_from_queue+0x9e>
 8000c7c:	f06f 0301 	mvn.w	r3, #1
 8000c80:	e066      	b.n	8000d50 <try_parse_protocol_from_queue+0x16c>

  // 剩余的deque长度不够现在的包长，把取出来的再塞回去，之后够了再说
  if (cur_packet_length - 3 > rxDequeue.length) {
 8000c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c86:	1eda      	subs	r2, r3, #3
 8000c88:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <try_parse_protocol_from_queue+0x174>)
 8000c8a:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d911      	bls.n	8000cb6 <try_parse_protocol_from_queue+0xd2>
    Dequeue_push_front(&rxDequeue, cur_packet[2]);
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	4619      	mov	r1, r3
 8000c96:	4830      	ldr	r0, [pc, #192]	; (8000d58 <try_parse_protocol_from_queue+0x174>)
 8000c98:	f003 fcb2 	bl	8004600 <Dequeue_push_front>
    Dequeue_push_front(&rxDequeue, cur_packet[1]);
 8000c9c:	7b7b      	ldrb	r3, [r7, #13]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	482d      	ldr	r0, [pc, #180]	; (8000d58 <try_parse_protocol_from_queue+0x174>)
 8000ca2:	f003 fcad 	bl	8004600 <Dequeue_push_front>
    Dequeue_push_front(&rxDequeue, cur_packet[0]);
 8000ca6:	7b3b      	ldrb	r3, [r7, #12]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	482b      	ldr	r0, [pc, #172]	; (8000d58 <try_parse_protocol_from_queue+0x174>)
 8000cac:	f003 fca8 	bl	8004600 <Dequeue_push_front>
    return -3;
 8000cb0:	f06f 0302 	mvn.w	r3, #2
 8000cb4:	e04c      	b.n	8000d50 <try_parse_protocol_from_queue+0x16c>
  }

  //完整读入整个包
  for (size_t i = 3; i < cur_packet_length; i++) {
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000cbc:	e010      	b.n	8000ce0 <try_parse_protocol_from_queue+0xfc>
    cur_packet[i] = Dequeue_pop_front(&rxDequeue);
 8000cbe:	4826      	ldr	r0, [pc, #152]	; (8000d58 <try_parse_protocol_from_queue+0x174>)
 8000cc0:	f003 fc76 	bl	80045b0 <Dequeue_pop_front>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f107 020c 	add.w	r2, r7, #12
 8000ccc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000cd0:	4413      	add	r3, r2
 8000cd2:	460a      	mov	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
  for (size_t i = 3; i < cur_packet_length; i++) {
 8000cd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000cda:	3301      	adds	r3, #1
 8000cdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000ce0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000ce4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d3e8      	bcc.n	8000cbe <try_parse_protocol_from_queue+0xda>
  }

  data_packet->length = cur_packet_length;
 8000cec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	709a      	strb	r2, [r3, #2]
  int8_t parse_res = parse_packet(cur_packet, cur_packet_length, data_packet);
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 fa19 	bl	8004138 <parse_packet>
 8000d06:	4603      	mov	r3, r0
 8000d08:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

  //解析错误
  if (parse_res != 0) {
 8000d0c:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d01c      	beq.n	8000d4e <try_parse_protocol_from_queue+0x16a>
    // 把除了包头的内容推回去，认为当前包头错误
    for (size_t i = cur_packet_length - 1; i >= 2; i--) {
 8000d14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000d1e:	e00e      	b.n	8000d3e <try_parse_protocol_from_queue+0x15a>
      Dequeue_push_front(&rxDequeue, cur_packet[i]);
 8000d20:	f107 020c 	add.w	r2, r7, #12
 8000d24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000d28:	4413      	add	r3, r2
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480a      	ldr	r0, [pc, #40]	; (8000d58 <try_parse_protocol_from_queue+0x174>)
 8000d30:	f003 fc66 	bl	8004600 <Dequeue_push_front>
    for (size_t i = cur_packet_length - 1; i >= 2; i--) {
 8000d34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000d3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d8ec      	bhi.n	8000d20 <try_parse_protocol_from_queue+0x13c>
    }
    return parse_res - 3;
 8000d46:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 8000d4a:	3b03      	subs	r3, #3
 8000d4c:	e000      	b.n	8000d50 <try_parse_protocol_from_queue+0x16c>
  }

  return 0;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	37d0      	adds	r7, #208	; 0xd0
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000260 	.word	0x20000260
 8000d5c:	08007738 	.word	0x08007738

08000d60 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000d60:	b5b0      	push	{r4, r5, r7, lr}
 8000d62:	b0b8      	sub	sp, #224	; 0xe0
 8000d64:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d66:	f000 fcbb 	bl	80016e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d6a:	f000 f87b 	bl	8000e64 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6e:	f7ff feab 	bl	8000ac8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d72:	f000 fbaf 	bl	80014d4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000d76:	f000 fa2f 	bl	80011d8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000d7a:	f000 fb81 	bl	8001480 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000d7e:	f000 fabb 	bl	80012f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //开启usart1中断
  HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000d82:	2201      	movs	r2, #1
 8000d84:	492e      	ldr	r1, [pc, #184]	; (8000e40 <main+0xe0>)
 8000d86:	482f      	ldr	r0, [pc, #188]	; (8000e44 <main+0xe4>)
 8000d88:	f002 fd06 	bl	8003798 <HAL_UART_Receive_IT>

  //开启定时器2中断
  HAL_TIM_Base_Start_IT(&htim2);
 8000d8c:	482e      	ldr	r0, [pc, #184]	; (8000e48 <main+0xe8>)
 8000d8e:	f001 fccd 	bl	800272c <HAL_TIM_Base_Start_IT>

  init_all_driver();
 8000d92:	f7ff fee5 	bl	8000b60 <init_all_driver>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    // 当buffer内长度足够，只取MAX_PACKET_LENGTH以内长度，试图解包
    if (rxDequeue.length > MAX_PACKET_LENGTH) {
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <main+0xec>)
 8000d98:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8000d9c:	2baa      	cmp	r3, #170	; 0xaa
 8000d9e:	d941      	bls.n	8000e24 <main+0xc4>
      ProtocolPacket protocol_packet;
      int parse_res = try_parse_protocol_from_queue(&protocol_packet);
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff1d 	bl	8000be4 <try_parse_protocol_from_queue>
 8000daa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
      if (parse_res != 0) {
 8000dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d005      	beq.n	8000dc2 <main+0x62>
        printf("%d\n", parse_res);
 8000db6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000dba:	4825      	ldr	r0, [pc, #148]	; (8000e50 <main+0xf0>)
 8000dbc:	f004 fbac 	bl	8005518 <iprintf>
 8000dc0:	e030      	b.n	8000e24 <main+0xc4>
      } else {
        MotorState motor_state;
        motor_state.mode = protocol_packet.inner_msg.axle_cmd[1].mode;
 8000dc2:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8000dc6:	603b      	str	r3, [r7, #0]
        motor_state.velocity = (double) protocol_packet.inner_msg.axle_cmd[1].velocity / 60;// 从转每分钟转为转每秒
 8000dc8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fb19 	bl	8000404 <__aeabi_i2d>
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <main+0xf4>)
 8000dd8:	f7ff fca8 	bl	800072c <__aeabi_ddiv>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	e9c7 2304 	strd	r2, r3, [r7, #16]
        motor_state.position = protocol_packet.inner_msg.axle_cmd[1].position;
 8000de4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fb0b 	bl	8000404 <__aeabi_i2d>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	e9c7 2306 	strd	r2, r3, [r7, #24]
        motor_state.current = protocol_packet.inner_msg.axle_cmd[1].current;
 8000df6:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fb02 	bl	8000404 <__aeabi_i2d>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	e9c7 2302 	strd	r2, r3, [r7, #8]

        MotorController_set_target(&motorController, motor_state);
 8000e08:	466d      	mov	r5, sp
 8000e0a:	f107 0408 	add.w	r4, r7, #8
 8000e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e16:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	cb0c      	ldmia	r3, {r2, r3}
 8000e1e:	480e      	ldr	r0, [pc, #56]	; (8000e58 <main+0xf8>)
 8000e20:	f003 fc6e 	bl	8004700 <MotorController_set_target>
      }

    }

    // 按周期控制 100Hz
    if (control_flag) {
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <main+0xfc>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0b4      	beq.n	8000d96 <main+0x36>
      control_flag = false;
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <main+0xfc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
      MotorController_control(&motorController);
 8000e32:	4809      	ldr	r0, [pc, #36]	; (8000e58 <main+0xf8>)
 8000e34:	f003 fcfb 	bl	800482e <MotorController_control>
      printf("control\n");
 8000e38:	4809      	ldr	r0, [pc, #36]	; (8000e60 <main+0x100>)
 8000e3a:	f004 fbf3 	bl	8005624 <puts>
    if (rxDequeue.length > MAX_PACKET_LENGTH) {
 8000e3e:	e7aa      	b.n	8000d96 <main+0x36>
 8000e40:	20000654 	.word	0x20000654
 8000e44:	20000874 	.word	0x20000874
 8000e48:	200007e8 	.word	0x200007e8
 8000e4c:	20000260 	.word	0x20000260
 8000e50:	08007744 	.word	0x08007744
 8000e54:	404e0000 	.word	0x404e0000
 8000e58:	20000718 	.word	0x20000718
 8000e5c:	200001fc 	.word	0x200001fc
 8000e60:	08007748 	.word	0x08007748

08000e64 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b090      	sub	sp, #64	; 0x40
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0318 	add.w	r3, r7, #24
 8000e6e:	2228      	movs	r2, #40	; 0x28
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 fee8 	bl	8004c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e8e:	2310      	movs	r3, #16
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e92:	2302      	movs	r3, #2
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e96:	2300      	movs	r3, #0
 8000e98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e9a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 ffd7 	bl	8001e58 <HAL_RCC_OscConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x50>
    Error_Handler();
 8000eb0:	f000 f84e 	bl	8000f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	607b      	str	r3, [r7, #4]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2102      	movs	r1, #2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fa42 	bl	8002358 <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x7a>
    Error_Handler();
 8000eda:	f000 f839 	bl	8000f50 <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3740      	adds	r7, #64	; 0x40
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
uint8_t lst = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a08      	ldr	r2, [pc, #32]	; (8000f18 <HAL_UART_RxCpltCallback+0x30>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10a      	bne.n	8000f10 <HAL_UART_RxCpltCallback+0x28>
    Dequeue_push_back(&rxDequeue, rx_buffer[0]);
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <HAL_UART_RxCpltCallback+0x34>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	4619      	mov	r1, r3
 8000f00:	4807      	ldr	r0, [pc, #28]	; (8000f20 <HAL_UART_RxCpltCallback+0x38>)
 8000f02:	f003 fb2c 	bl	800455e <Dequeue_push_back>
    HAL_UART_Receive_IT(&huart1, rx_buffer, 1);
 8000f06:	2201      	movs	r2, #1
 8000f08:	4904      	ldr	r1, [pc, #16]	; (8000f1c <HAL_UART_RxCpltCallback+0x34>)
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <HAL_UART_RxCpltCallback+0x3c>)
 8000f0c:	f002 fc44 	bl	8003798 <HAL_UART_Receive_IT>
  }
//  if (huart->Instance == USART3) {
//    Dequeue_push_back(&dequeue, rx_buffer[0]);
//    HAL_UART_Receive_IT(&huart3, rx_buffer, 1);
//  }
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40013800 	.word	0x40013800
 8000f1c:	20000654 	.word	0x20000654
 8000f20:	20000260 	.word	0x20000260
 8000f24:	20000874 	.word	0x20000874

08000f28 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if (htim == (&htim2)) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d102      	bne.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x16>
    control_flag = true;
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	200007e8 	.word	0x200007e8
 8000f4c:	200001fc 	.word	0x200001fc

08000f50 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <HAL_MspInit+0x5c>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_MspInit+0x60>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_MspInit+0x60>)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001006:	f000 fbb1 	bl	800176c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM2_IRQHandler+0x10>)
 8001016:	f001 fccd 	bl	80029b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200007e8 	.word	0x200007e8

08001024 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <USART1_IRQHandler+0x10>)
 800102a:	f002 fbe5 	bl	80037f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000874 	.word	0x20000874

08001038 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <USART3_IRQHandler+0x10>)
 800103e:	f002 fbdb 	bl	80037f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000830 	.word	0x20000830

0800104c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	return 1;
 8001050:	2301      	movs	r3, #1
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <_kill>:

int _kill(int pid, int sig)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001064:	f003 fdc6 	bl	8004bf4 <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	2216      	movs	r2, #22
 800106c:	601a      	str	r2, [r3, #0]
	return -1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_exit>:

void _exit (int status)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001082:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffe7 	bl	800105a <_kill>
	while (1) {}		/* Make sure we hang here */
 800108c:	e7fe      	b.n	800108c <_exit+0x12>

0800108e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	60f8      	str	r0, [r7, #12]
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e00a      	b.n	80010b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010a0:	f3af 8000 	nop.w
 80010a4:	4601      	mov	r1, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	60ba      	str	r2, [r7, #8]
 80010ac:	b2ca      	uxtb	r2, r1
 80010ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3301      	adds	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dbf0      	blt.n	80010a0 <_read+0x12>
	}

return len;
 80010be:	687b      	ldr	r3, [r7, #4]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	e009      	b.n	80010ee <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	60ba      	str	r2, [r7, #8]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fac4 	bl	8001670 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	3301      	adds	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	dbf1      	blt.n	80010da <_write+0x12>
	}
	return len;
 80010f6:	687b      	ldr	r3, [r7, #4]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_close>:

int _close(int file)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	return -1;
 8001108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001126:	605a      	str	r2, [r3, #4]
	return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <_isatty>:

int _isatty(int file)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	return 1;
 800113c:	2301      	movs	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
	return 0;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f003 fd30 	bl	8004bf4 <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20005000 	.word	0x20005000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	20000200 	.word	0x20000200
 80011c8:	200008d0 	.word	0x200008d0

080011cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b092      	sub	sp, #72	; 0x48
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]
 80011fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2220      	movs	r2, #32
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f003 fd20 	bl	8004c48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001208:	4b39      	ldr	r3, [pc, #228]	; (80012f0 <MX_TIM1_Init+0x118>)
 800120a:	4a3a      	ldr	r2, [pc, #232]	; (80012f4 <MX_TIM1_Init+0x11c>)
 800120c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 800120e:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <MX_TIM1_Init+0x118>)
 8001210:	2240      	movs	r2, #64	; 0x40
 8001212:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <MX_TIM1_Init+0x118>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 800121a:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <MX_TIM1_Init+0x118>)
 800121c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001220:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <MX_TIM1_Init+0x118>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001228:	4b31      	ldr	r3, [pc, #196]	; (80012f0 <MX_TIM1_Init+0x118>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <MX_TIM1_Init+0x118>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001234:	482e      	ldr	r0, [pc, #184]	; (80012f0 <MX_TIM1_Init+0x118>)
 8001236:	f001 facb 	bl	80027d0 <HAL_TIM_PWM_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001240:	f7ff fe86 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800124c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001250:	4619      	mov	r1, r3
 8001252:	4827      	ldr	r0, [pc, #156]	; (80012f0 <MX_TIM1_Init+0x118>)
 8001254:	f002 f900 	bl	8003458 <HAL_TIMEx_MasterConfigSynchronization>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800125e:	f7ff fe77 	bl	8000f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001262:	2360      	movs	r3, #96	; 0x60
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800126e:	2300      	movs	r3, #0
 8001270:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	2200      	movs	r2, #0
 8001284:	4619      	mov	r1, r3
 8001286:	481a      	ldr	r0, [pc, #104]	; (80012f0 <MX_TIM1_Init+0x118>)
 8001288:	f001 fc9c 	bl	8002bc4 <HAL_TIM_PWM_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001292:	f7ff fe5d 	bl	8000f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	2204      	movs	r2, #4
 800129c:	4619      	mov	r1, r3
 800129e:	4814      	ldr	r0, [pc, #80]	; (80012f0 <MX_TIM1_Init+0x118>)
 80012a0:	f001 fc90 	bl	8002bc4 <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80012aa:	f7ff fe51 	bl	8000f50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <MX_TIM1_Init+0x118>)
 80012d2:	f002 f91f 	bl	8003514 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80012dc:	f7ff fe38 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <MX_TIM1_Init+0x118>)
 80012e2:	f000 f899 	bl	8001418 <HAL_TIM_MspPostInit>

}
 80012e6:	bf00      	nop
 80012e8:	3748      	adds	r7, #72	; 0x48
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200007a0 	.word	0x200007a0
 80012f4:	40012c00 	.word	0x40012c00

080012f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	463b      	mov	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <MX_TIM2_Init+0x98>)
 8001316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400;
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <MX_TIM2_Init+0x98>)
 800131e:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8001322:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_TIM2_Init+0x98>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_TIM2_Init+0x98>)
 800132c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001330:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_TIM2_Init+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_TIM2_Init+0x98>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800133e:	4814      	ldr	r0, [pc, #80]	; (8001390 <MX_TIM2_Init+0x98>)
 8001340:	f001 f9a4 	bl	800268c <HAL_TIM_Base_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800134a:	f7ff fe01 	bl	8000f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001352:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4619      	mov	r1, r3
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_TIM2_Init+0x98>)
 800135c:	f001 fcf0 	bl	8002d40 <HAL_TIM_ConfigClockSource>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001366:	f7ff fdf3 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	4619      	mov	r1, r3
 8001376:	4806      	ldr	r0, [pc, #24]	; (8001390 <MX_TIM2_Init+0x98>)
 8001378:	f002 f86e 	bl	8003458 <HAL_TIMEx_MasterConfigSynchronization>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001382:	f7ff fde5 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200007e8 	.word	0x200007e8

08001394 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_TIM_PWM_MspInit+0x34>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d10b      	bne.n	80013be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_TIM_PWM_MspInit+0x38>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_TIM_PWM_MspInit+0x38>)
 80013ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013b0:	6193      	str	r3, [r2, #24]
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_TIM_PWM_MspInit+0x38>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	40012c00 	.word	0x40012c00
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e0:	d113      	bne.n	800140a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <HAL_TIM_Base_MspInit+0x44>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <HAL_TIM_Base_MspInit+0x44>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	61d3      	str	r3, [r2, #28]
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_TIM_Base_MspInit+0x44>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	201c      	movs	r0, #28
 8001400:	f000 faa7 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001404:	201c      	movs	r0, #28
 8001406:	f000 fac0 	bl	800198a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a10      	ldr	r2, [pc, #64]	; (8001474 <HAL_TIM_MspPostInit+0x5c>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d118      	bne.n	800146a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_TIM_MspPostInit+0x60>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_TIM_MspPostInit+0x60>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_TIM_MspPostInit+0x60>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001450:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001454:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2302      	movs	r3, #2
 800145c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_TIM_MspPostInit+0x64>)
 8001466:	f000 fb5b 	bl	8001b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800146a:	bf00      	nop
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40012c00 	.word	0x40012c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40010800 	.word	0x40010800

08001480 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <MX_USART1_UART_Init+0x50>)
 8001488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 800148c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_USART1_UART_Init+0x4c>)
 80014b8:	f002 f88f 	bl	80035da <HAL_UART_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014c2:	f7ff fd45 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000874 	.word	0x20000874
 80014d0:	40013800 	.word	0x40013800

080014d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014d8:	4b11      	ldr	r3, [pc, #68]	; (8001520 <MX_USART3_UART_Init+0x4c>)
 80014da:	4a12      	ldr	r2, [pc, #72]	; (8001524 <MX_USART3_UART_Init+0x50>)
 80014dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <MX_USART3_UART_Init+0x4c>)
 80014e0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80014e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <MX_USART3_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_USART3_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_USART3_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_USART3_UART_Init+0x4c>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_USART3_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_USART3_UART_Init+0x4c>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_USART3_UART_Init+0x4c>)
 800150c:	f002 f865 	bl	80035da <HAL_UART_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001516:	f7ff fd1b 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000830 	.word	0x20000830
 8001524:	40004800 	.word	0x40004800

08001528 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08c      	sub	sp, #48	; 0x30
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a46      	ldr	r2, [pc, #280]	; (800165c <HAL_UART_MspInit+0x134>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d146      	bne.n	80015d6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001548:	4b45      	ldr	r3, [pc, #276]	; (8001660 <HAL_UART_MspInit+0x138>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a44      	ldr	r2, [pc, #272]	; (8001660 <HAL_UART_MspInit+0x138>)
 800154e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b42      	ldr	r3, [pc, #264]	; (8001660 <HAL_UART_MspInit+0x138>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001560:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <HAL_UART_MspInit+0x138>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a3e      	ldr	r2, [pc, #248]	; (8001660 <HAL_UART_MspInit+0x138>)
 8001566:	f043 0308 	orr.w	r3, r3, #8
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b3c      	ldr	r3, [pc, #240]	; (8001660 <HAL_UART_MspInit+0x138>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001578:	2340      	movs	r3, #64	; 0x40
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 031c 	add.w	r3, r7, #28
 8001588:	4619      	mov	r1, r3
 800158a:	4836      	ldr	r0, [pc, #216]	; (8001664 <HAL_UART_MspInit+0x13c>)
 800158c:	f000 fac8 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4830      	ldr	r0, [pc, #192]	; (8001664 <HAL_UART_MspInit+0x13c>)
 80015a4:	f000 fabc 	bl	8001b20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_UART_MspInit+0x140>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015be:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <HAL_UART_MspInit+0x140>)
 80015c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c2:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	2025      	movs	r0, #37	; 0x25
 80015ca:	f000 f9c2 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015ce:	2025      	movs	r0, #37	; 0x25
 80015d0:	f000 f9db 	bl	800198a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015d4:	e03e      	b.n	8001654 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a24      	ldr	r2, [pc, #144]	; (800166c <HAL_UART_MspInit+0x144>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d139      	bne.n	8001654 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_UART_MspInit+0x138>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <HAL_UART_MspInit+0x138>)
 80015e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ea:	61d3      	str	r3, [r2, #28]
 80015ec:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_UART_MspInit+0x138>)
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_UART_MspInit+0x138>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	4a18      	ldr	r2, [pc, #96]	; (8001660 <HAL_UART_MspInit+0x138>)
 80015fe:	f043 0308 	orr.w	r3, r3, #8
 8001602:	6193      	str	r3, [r2, #24]
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_UART_MspInit+0x138>)
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	480f      	ldr	r0, [pc, #60]	; (8001664 <HAL_UART_MspInit+0x13c>)
 8001626:	f000 fa7b 	bl	8001b20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800162a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800162e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <HAL_UART_MspInit+0x13c>)
 8001640:	f000 fa6e 	bl	8001b20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2100      	movs	r1, #0
 8001648:	2027      	movs	r0, #39	; 0x27
 800164a:	f000 f982 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800164e:	2027      	movs	r0, #39	; 0x27
 8001650:	f000 f99b 	bl	800198a <HAL_NVIC_EnableIRQ>
}
 8001654:	bf00      	nop
 8001656:	3730      	adds	r7, #48	; 0x30
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40013800 	.word	0x40013800
 8001660:	40021000 	.word	0x40021000
 8001664:	40010c00 	.word	0x40010c00
 8001668:	40010000 	.word	0x40010000
 800166c:	40004800 	.word	0x40004800

08001670 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *) &ch, 1, HAL_MAX_DELAY);
 8001678:	1d39      	adds	r1, r7, #4
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800167e:	2201      	movs	r2, #1
 8001680:	4803      	ldr	r0, [pc, #12]	; (8001690 <__io_putchar+0x20>)
 8001682:	f001 fff7 	bl	8003674 <HAL_UART_Transmit>
  return ch;
 8001686:	687b      	ldr	r3, [r7, #4]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000830 	.word	0x20000830

08001694 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	; (80016cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	; (80016d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ba:	f7ff fd87 	bl	80011cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f003 fa9f 	bl	8004c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016c2:	f7ff fb4d 	bl	8000d60 <main>
  bx lr
 80016c6:	4770      	bx	lr
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80016d0:	08007b64 	.word	0x08007b64
  ldr r2, =_sbss
 80016d4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80016d8:	200008cc 	.word	0x200008cc

080016dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC1_2_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_Init+0x28>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a07      	ldr	r2, [pc, #28]	; (8001708 <HAL_Init+0x28>)
 80016ea:	f043 0310 	orr.w	r3, r3, #16
 80016ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f0:	2003      	movs	r0, #3
 80016f2:	f000 f923 	bl	800193c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016f6:	200f      	movs	r0, #15
 80016f8:	f000 f808 	bl	800170c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016fc:	f7ff fc2e 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40022000 	.word	0x40022000

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_InitTick+0x54>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_InitTick+0x58>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f93b 	bl	80019a6 <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00e      	b.n	8001758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d80a      	bhi.n	8001756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001748:	f000 f903 	bl	8001952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_InitTick+0x5c>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000000 	.word	0x20000000
 8001764:	20000008 	.word	0x20000008
 8001768:	20000004 	.word	0x20000004

0800176c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <HAL_IncTick+0x1c>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_IncTick+0x20>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a03      	ldr	r2, [pc, #12]	; (800178c <HAL_IncTick+0x20>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	20000008 	.word	0x20000008
 800178c:	200008b8 	.word	0x200008b8

08001790 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return uwTick;
 8001794:	4b02      	ldr	r3, [pc, #8]	; (80017a0 <HAL_GetTick+0x10>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	200008b8 	.word	0x200008b8

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4906      	ldr	r1, [pc, #24]	; (800183c <__NVIC_EnableIRQ+0x34>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800191c:	f7ff ff90 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff2d 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001964:	f7ff ff42 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff90 	bl	8001894 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5f 	bl	8001840 <__NVIC_SetPriority>
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff35 	bl	8001808 <__NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019be:	b480      	push	{r7}
 80019c0:	b085      	sub	sp, #20
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d008      	beq.n	80019e6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2204      	movs	r2, #4
 80019d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e020      	b.n	8001a28 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 020e 	bic.w	r2, r2, #14
 80019f4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0201 	bic.w	r2, r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0e:	2101      	movs	r1, #1
 8001a10:	fa01 f202 	lsl.w	r2, r1, r2
 8001a14:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d005      	beq.n	8001a56 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	73fb      	strb	r3, [r7, #15]
 8001a54:	e051      	b.n	8001afa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 020e 	bic.w	r2, r2, #14
 8001a64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_DMA_Abort_IT+0xd0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d029      	beq.n	8001ad4 <HAL_DMA_Abort_IT+0xa0>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a20      	ldr	r2, [pc, #128]	; (8001b08 <HAL_DMA_Abort_IT+0xd4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d022      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0x9c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <HAL_DMA_Abort_IT+0xd8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d01a      	beq.n	8001aca <HAL_DMA_Abort_IT+0x96>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <HAL_DMA_Abort_IT+0xdc>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d012      	beq.n	8001ac4 <HAL_DMA_Abort_IT+0x90>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <HAL_DMA_Abort_IT+0xe0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d00a      	beq.n	8001abe <HAL_DMA_Abort_IT+0x8a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1a      	ldr	r2, [pc, #104]	; (8001b18 <HAL_DMA_Abort_IT+0xe4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d102      	bne.n	8001ab8 <HAL_DMA_Abort_IT+0x84>
 8001ab2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ab6:	e00e      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xa2>
 8001ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001abc:	e00b      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xa2>
 8001abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac2:	e008      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xa2>
 8001ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac8:	e005      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xa2>
 8001aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ace:	e002      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xa2>
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	e000      	b.n	8001ad6 <HAL_DMA_Abort_IT+0xa2>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <HAL_DMA_Abort_IT+0xe8>)
 8001ad8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
    } 
  }
  return status;
 8001afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40020008 	.word	0x40020008
 8001b08:	4002001c 	.word	0x4002001c
 8001b0c:	40020030 	.word	0x40020030
 8001b10:	40020044 	.word	0x40020044
 8001b14:	40020058 	.word	0x40020058
 8001b18:	4002006c 	.word	0x4002006c
 8001b1c:	40020000 	.word	0x40020000

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b08b      	sub	sp, #44	; 0x2c
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	e169      	b.n	8001e08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b34:	2201      	movs	r2, #1
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f040 8158 	bne.w	8001e02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a9a      	ldr	r2, [pc, #616]	; (8001dc0 <HAL_GPIO_Init+0x2a0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d05e      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b5c:	4a98      	ldr	r2, [pc, #608]	; (8001dc0 <HAL_GPIO_Init+0x2a0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d875      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b62:	4a98      	ldr	r2, [pc, #608]	; (8001dc4 <HAL_GPIO_Init+0x2a4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d058      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b68:	4a96      	ldr	r2, [pc, #600]	; (8001dc4 <HAL_GPIO_Init+0x2a4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d86f      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b6e:	4a96      	ldr	r2, [pc, #600]	; (8001dc8 <HAL_GPIO_Init+0x2a8>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d052      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b74:	4a94      	ldr	r2, [pc, #592]	; (8001dc8 <HAL_GPIO_Init+0x2a8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d869      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b7a:	4a94      	ldr	r2, [pc, #592]	; (8001dcc <HAL_GPIO_Init+0x2ac>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d04c      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b80:	4a92      	ldr	r2, [pc, #584]	; (8001dcc <HAL_GPIO_Init+0x2ac>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d863      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b86:	4a92      	ldr	r2, [pc, #584]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d046      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b8c:	4a90      	ldr	r2, [pc, #576]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d85d      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b92:	2b12      	cmp	r3, #18
 8001b94:	d82a      	bhi.n	8001bec <HAL_GPIO_Init+0xcc>
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d859      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <HAL_GPIO_Init+0x80>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001c1b 	.word	0x08001c1b
 8001ba4:	08001bf5 	.word	0x08001bf5
 8001ba8:	08001c07 	.word	0x08001c07
 8001bac:	08001c49 	.word	0x08001c49
 8001bb0:	08001c4f 	.word	0x08001c4f
 8001bb4:	08001c4f 	.word	0x08001c4f
 8001bb8:	08001c4f 	.word	0x08001c4f
 8001bbc:	08001c4f 	.word	0x08001c4f
 8001bc0:	08001c4f 	.word	0x08001c4f
 8001bc4:	08001c4f 	.word	0x08001c4f
 8001bc8:	08001c4f 	.word	0x08001c4f
 8001bcc:	08001c4f 	.word	0x08001c4f
 8001bd0:	08001c4f 	.word	0x08001c4f
 8001bd4:	08001c4f 	.word	0x08001c4f
 8001bd8:	08001c4f 	.word	0x08001c4f
 8001bdc:	08001c4f 	.word	0x08001c4f
 8001be0:	08001c4f 	.word	0x08001c4f
 8001be4:	08001bfd 	.word	0x08001bfd
 8001be8:	08001c11 	.word	0x08001c11
 8001bec:	4a79      	ldr	r2, [pc, #484]	; (8001dd4 <HAL_GPIO_Init+0x2b4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bf2:	e02c      	b.n	8001c4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	623b      	str	r3, [r7, #32]
          break;
 8001bfa:	e029      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	3304      	adds	r3, #4
 8001c02:	623b      	str	r3, [r7, #32]
          break;
 8001c04:	e024      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	623b      	str	r3, [r7, #32]
          break;
 8001c0e:	e01f      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	330c      	adds	r3, #12
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e01a      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c22:	2304      	movs	r3, #4
 8001c24:	623b      	str	r3, [r7, #32]
          break;
 8001c26:	e013      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d105      	bne.n	8001c3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c30:	2308      	movs	r3, #8
 8001c32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	611a      	str	r2, [r3, #16]
          break;
 8001c3a:	e009      	b.n	8001c50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	615a      	str	r2, [r3, #20]
          break;
 8001c46:	e003      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
          break;
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          break;
 8001c4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2bff      	cmp	r3, #255	; 0xff
 8001c54:	d801      	bhi.n	8001c5a <HAL_GPIO_Init+0x13a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	e001      	b.n	8001c5e <HAL_GPIO_Init+0x13e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2bff      	cmp	r3, #255	; 0xff
 8001c64:	d802      	bhi.n	8001c6c <HAL_GPIO_Init+0x14c>
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	e002      	b.n	8001c72 <HAL_GPIO_Init+0x152>
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	3b08      	subs	r3, #8
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	210f      	movs	r1, #15
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	401a      	ands	r2, r3
 8001c84:	6a39      	ldr	r1, [r7, #32]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80b1 	beq.w	8001e02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca0:	4b4d      	ldr	r3, [pc, #308]	; (8001dd8 <HAL_GPIO_Init+0x2b8>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a4c      	ldr	r2, [pc, #304]	; (8001dd8 <HAL_GPIO_Init+0x2b8>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b4a      	ldr	r3, [pc, #296]	; (8001dd8 <HAL_GPIO_Init+0x2b8>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cb8:	4a48      	ldr	r2, [pc, #288]	; (8001ddc <HAL_GPIO_Init+0x2bc>)
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a40      	ldr	r2, [pc, #256]	; (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d013      	beq.n	8001d0c <HAL_GPIO_Init+0x1ec>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3f      	ldr	r2, [pc, #252]	; (8001de4 <HAL_GPIO_Init+0x2c4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d00d      	beq.n	8001d08 <HAL_GPIO_Init+0x1e8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a3e      	ldr	r2, [pc, #248]	; (8001de8 <HAL_GPIO_Init+0x2c8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d007      	beq.n	8001d04 <HAL_GPIO_Init+0x1e4>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a3d      	ldr	r2, [pc, #244]	; (8001dec <HAL_GPIO_Init+0x2cc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d101      	bne.n	8001d00 <HAL_GPIO_Init+0x1e0>
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e006      	b.n	8001d0e <HAL_GPIO_Init+0x1ee>
 8001d00:	2304      	movs	r3, #4
 8001d02:	e004      	b.n	8001d0e <HAL_GPIO_Init+0x1ee>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e002      	b.n	8001d0e <HAL_GPIO_Init+0x1ee>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_GPIO_Init+0x1ee>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d10:	f002 0203 	and.w	r2, r2, #3
 8001d14:	0092      	lsls	r2, r2, #2
 8001d16:	4093      	lsls	r3, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d1e:	492f      	ldr	r1, [pc, #188]	; (8001ddc <HAL_GPIO_Init+0x2bc>)
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	3302      	adds	r3, #2
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d38:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	492c      	ldr	r1, [pc, #176]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d46:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	4928      	ldr	r1, [pc, #160]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d60:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4922      	ldr	r1, [pc, #136]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	491e      	ldr	r1, [pc, #120]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d006      	beq.n	8001d96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	4918      	ldr	r1, [pc, #96]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4914      	ldr	r1, [pc, #80]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d021      	beq.n	8001df4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	490e      	ldr	r1, [pc, #56]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60cb      	str	r3, [r1, #12]
 8001dbc:	e021      	b.n	8001e02 <HAL_GPIO_Init+0x2e2>
 8001dbe:	bf00      	nop
 8001dc0:	10320000 	.word	0x10320000
 8001dc4:	10310000 	.word	0x10310000
 8001dc8:	10220000 	.word	0x10220000
 8001dcc:	10210000 	.word	0x10210000
 8001dd0:	10120000 	.word	0x10120000
 8001dd4:	10110000 	.word	0x10110000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	40010800 	.word	0x40010800
 8001de4:	40010c00 	.word	0x40010c00
 8001de8:	40011000 	.word	0x40011000
 8001dec:	40011400 	.word	0x40011400
 8001df0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_GPIO_Init+0x304>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	4909      	ldr	r1, [pc, #36]	; (8001e24 <HAL_GPIO_Init+0x304>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	3301      	adds	r3, #1
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f47f ae8e 	bne.w	8001b34 <HAL_GPIO_Init+0x14>
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	372c      	adds	r7, #44	; 0x2c
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	40010400 	.word	0x40010400

08001e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
 8001e34:	4613      	mov	r3, r2
 8001e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e38:	787b      	ldrb	r3, [r7, #1]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e44:	e003      	b.n	8001e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	041a      	lsls	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e26c      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8087 	beq.w	8001f86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e78:	4b92      	ldr	r3, [pc, #584]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d00c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e84:	4b8f      	ldr	r3, [pc, #572]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d112      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
 8001e90:	4b8c      	ldr	r3, [pc, #560]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	4b89      	ldr	r3, [pc, #548]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d06c      	beq.n	8001f84 <HAL_RCC_OscConfig+0x12c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d168      	bne.n	8001f84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e246      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x76>
 8001ec0:	4b80      	ldr	r3, [pc, #512]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a7f      	ldr	r2, [pc, #508]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e02e      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x98>
 8001ed6:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a7a      	ldr	r2, [pc, #488]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b78      	ldr	r3, [pc, #480]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a77      	ldr	r2, [pc, #476]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01d      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0xbc>
 8001efa:	4b72      	ldr	r3, [pc, #456]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a71      	ldr	r2, [pc, #452]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b6f      	ldr	r3, [pc, #444]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001f14:	4b6b      	ldr	r3, [pc, #428]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6a      	ldr	r2, [pc, #424]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a67      	ldr	r2, [pc, #412]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff fc2c 	bl	8001790 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7ff fc28 	bl	8001790 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1fa      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0xe4>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fc18 	bl	8001790 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fc14 	bl	8001790 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1e6      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	4b53      	ldr	r3, [pc, #332]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x10c>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d063      	beq.n	800205a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f92:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9e:	4b49      	ldr	r3, [pc, #292]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	4b43      	ldr	r3, [pc, #268]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1ba      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4939      	ldr	r1, [pc, #228]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	e03a      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7ff fbcd 	bl	8001790 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7ff fbc9 	bl	8001790 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e19b      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4927      	ldr	r1, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e015      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b26      	ldr	r3, [pc, #152]	; (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fbac 	bl	8001790 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203c:	f7ff fba8 	bl	8001790 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e17a      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d03a      	beq.n	80020dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d019      	beq.n	80020a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7ff fb8c 	bl	8001790 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207c:	f7ff fb88 	bl	8001790 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e15a      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800209a:	2001      	movs	r0, #1
 800209c:	f000 fad8 	bl	8002650 <RCC_Delay>
 80020a0:	e01c      	b.n	80020dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7ff fb72 	bl	8001790 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ae:	e00f      	b.n	80020d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b0:	f7ff fb6e 	bl	8001790 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d908      	bls.n	80020d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e140      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	42420000 	.word	0x42420000
 80020cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	4b9e      	ldr	r3, [pc, #632]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1e9      	bne.n	80020b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a6 	beq.w	8002236 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b97      	ldr	r3, [pc, #604]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b94      	ldr	r3, [pc, #592]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a93      	ldr	r2, [pc, #588]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b91      	ldr	r3, [pc, #580]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b8e      	ldr	r3, [pc, #568]	; (8002350 <HAL_RCC_OscConfig+0x4f8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b8b      	ldr	r3, [pc, #556]	; (8002350 <HAL_RCC_OscConfig+0x4f8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a8a      	ldr	r2, [pc, #552]	; (8002350 <HAL_RCC_OscConfig+0x4f8>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7ff fb2f 	bl	8001790 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7ff fb2b 	bl	8001790 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b64      	cmp	r3, #100	; 0x64
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0fd      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b81      	ldr	r3, [pc, #516]	; (8002350 <HAL_RCC_OscConfig+0x4f8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x312>
 800215c:	4b7b      	ldr	r3, [pc, #492]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a7a      	ldr	r2, [pc, #488]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e02d      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x334>
 8002172:	4b76      	ldr	r3, [pc, #472]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a75      	ldr	r2, [pc, #468]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b73      	ldr	r3, [pc, #460]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a72      	ldr	r2, [pc, #456]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	e01c      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x356>
 8002194:	4b6d      	ldr	r3, [pc, #436]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a6c      	ldr	r2, [pc, #432]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	4b6a      	ldr	r3, [pc, #424]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a69      	ldr	r2, [pc, #420]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 80021ae:	4b67      	ldr	r3, [pc, #412]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a66      	ldr	r2, [pc, #408]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4b64      	ldr	r3, [pc, #400]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a63      	ldr	r2, [pc, #396]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7ff fadf 	bl	8001790 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff fadb 	bl	8001790 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0ab      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	4b57      	ldr	r3, [pc, #348]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ee      	beq.n	80021d6 <HAL_RCC_OscConfig+0x37e>
 80021f8:	e014      	b.n	8002224 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7ff fac9 	bl	8001790 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7ff fac5 	bl	8001790 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e095      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	4b4c      	ldr	r3, [pc, #304]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ee      	bne.n	8002202 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4b48      	ldr	r3, [pc, #288]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a47      	ldr	r2, [pc, #284]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002234:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8081 	beq.w	8002342 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002240:	4b42      	ldr	r3, [pc, #264]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d061      	beq.n	8002310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d146      	bne.n	80022e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <HAL_RCC_OscConfig+0x4fc>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff fa99 	bl	8001790 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7ff fa95 	bl	8001790 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e067      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d108      	bne.n	800229c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800228a:	4b30      	ldr	r3, [pc, #192]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	492d      	ldr	r1, [pc, #180]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a19      	ldr	r1, [r3, #32]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	430b      	orrs	r3, r1
 80022ae:	4927      	ldr	r1, [pc, #156]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b27      	ldr	r3, [pc, #156]	; (8002354 <HAL_RCC_OscConfig+0x4fc>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff fa69 	bl	8001790 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7ff fa65 	bl	8001790 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e037      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x46a>
 80022e0:	e02f      	b.n	8002342 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <HAL_RCC_OscConfig+0x4fc>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fa52 	bl	8001790 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7ff fa4e 	bl	8001790 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e020      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x498>
 800230e:	e018      	b.n	8002342 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e013      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_RCC_OscConfig+0x4f4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	429a      	cmp	r2, r3
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	40007000 	.word	0x40007000
 8002354:	42420060 	.word	0x42420060

08002358 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0d0      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b6a      	ldr	r3, [pc, #424]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d910      	bls.n	800239c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b67      	ldr	r3, [pc, #412]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	4965      	ldr	r1, [pc, #404]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0b8      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	494d      	ldr	r1, [pc, #308]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d040      	beq.n	8002478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d115      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07f      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e073      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e06b      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002436:	4b39      	ldr	r3, [pc, #228]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4936      	ldr	r1, [pc, #216]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002448:	f7ff f9a2 	bl	8001790 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7ff f99e 	bl	8001790 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e053      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 020c 	and.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	429a      	cmp	r2, r3
 8002476:	d1eb      	bne.n	8002450 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d210      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 0207 	bic.w	r2, r3, #7
 800248e:	4922      	ldr	r1, [pc, #136]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e032      	b.n	800250e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4916      	ldr	r1, [pc, #88]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490e      	ldr	r1, [pc, #56]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024e6:	f000 f821 	bl	800252c <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490a      	ldr	r1, [pc, #40]	; (8002520 <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1cc>)
 8002500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1d0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff f900 	bl	800170c <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40022000 	.word	0x40022000
 800251c:	40021000 	.word	0x40021000
 8002520:	08007760 	.word	0x08007760
 8002524:	20000000 	.word	0x20000000
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800252c:	b490      	push	{r4, r7}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002532:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002534:	1d3c      	adds	r4, r7, #4
 8002536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800253c:	f240 2301 	movw	r3, #513	; 0x201
 8002540:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	2300      	movs	r3, #0
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b04      	cmp	r3, #4
 8002564:	d002      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0x40>
 8002566:	2b08      	cmp	r3, #8
 8002568:	d003      	beq.n	8002572 <HAL_RCC_GetSysClockFreq+0x46>
 800256a:	e02d      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800256e:	623b      	str	r3, [r7, #32]
      break;
 8002570:	e02d      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	0c9b      	lsrs	r3, r3, #18
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800257e:	4413      	add	r3, r2
 8002580:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002584:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d013      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	0c5b      	lsrs	r3, r3, #17
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800259e:	4413      	add	r3, r2
 80025a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025aa:	fb02 f203 	mul.w	r2, r2, r3
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	e004      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	4a0b      	ldr	r2, [pc, #44]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025bc:	fb02 f303 	mul.w	r3, r2, r3
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	623b      	str	r3, [r7, #32]
      break;
 80025c6:	e002      	b.n	80025ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ca:	623b      	str	r3, [r7, #32]
      break;
 80025cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025ce:	6a3b      	ldr	r3, [r7, #32]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3728      	adds	r7, #40	; 0x28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc90      	pop	{r4, r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	08007750 	.word	0x08007750
 80025e0:	40021000 	.word	0x40021000
 80025e4:	007a1200 	.word	0x007a1200
 80025e8:	003d0900 	.word	0x003d0900

080025ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f0:	4b02      	ldr	r3, [pc, #8]	; (80025fc <HAL_RCC_GetHCLKFreq+0x10>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr
 80025fc:	20000000 	.word	0x20000000

08002600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002604:	f7ff fff2 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	0a1b      	lsrs	r3, r3, #8
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	; (8002624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	08007770 	.word	0x08007770

08002628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800262c:	f7ff ffde 	bl	80025ec <HAL_RCC_GetHCLKFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b05      	ldr	r3, [pc, #20]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	0adb      	lsrs	r3, r3, #11
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	4903      	ldr	r1, [pc, #12]	; (800264c <HAL_RCC_GetPCLK2Freq+0x24>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002644:	4618      	mov	r0, r3
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	08007770 	.word	0x08007770

08002650 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <RCC_Delay+0x34>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <RCC_Delay+0x38>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0a5b      	lsrs	r3, r3, #9
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800266c:	bf00      	nop
  }
  while (Delay --);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1e5a      	subs	r2, r3, #1
 8002672:	60fa      	str	r2, [r7, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f9      	bne.n	800266c <RCC_Delay+0x1c>
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	bc80      	pop	{r7}
 8002682:	4770      	bx	lr
 8002684:	20000000 	.word	0x20000000
 8002688:	10624dd3 	.word	0x10624dd3

0800268c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e041      	b.n	8002722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe fe8c 	bl	80013d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2202      	movs	r2, #2
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3304      	adds	r3, #4
 80026c8:	4619      	mov	r1, r3
 80026ca:	4610      	mov	r0, r2
 80026cc:	f000 fc20 	bl	8002f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b01      	cmp	r3, #1
 800273e:	d001      	beq.n	8002744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e03a      	b.n	80027ba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0201 	orr.w	r2, r2, #1
 800275a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_TIM_Base_Start_IT+0x98>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d00e      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0x58>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276e:	d009      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0x58>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d004      	beq.n	8002784 <HAL_TIM_Base_Start_IT+0x58>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a13      	ldr	r2, [pc, #76]	; (80027cc <HAL_TIM_Base_Start_IT+0xa0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d111      	bne.n	80027a8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b06      	cmp	r3, #6
 8002794:	d010      	beq.n	80027b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0201 	orr.w	r2, r2, #1
 80027a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a6:	e007      	b.n	80027b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40000400 	.word	0x40000400
 80027cc:	40000800 	.word	0x40000800

080027d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e041      	b.n	8002866 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fdcc 	bl	8001394 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3304      	adds	r3, #4
 800280c:	4619      	mov	r1, r3
 800280e:	4610      	mov	r0, r2
 8002810:	f000 fb7e 	bl	8002f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d109      	bne.n	8002894 <HAL_TIM_PWM_Start+0x24>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b01      	cmp	r3, #1
 800288a:	bf14      	ite	ne
 800288c:	2301      	movne	r3, #1
 800288e:	2300      	moveq	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	e022      	b.n	80028da <HAL_TIM_PWM_Start+0x6a>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2b04      	cmp	r3, #4
 8002898:	d109      	bne.n	80028ae <HAL_TIM_PWM_Start+0x3e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	bf14      	ite	ne
 80028a6:	2301      	movne	r3, #1
 80028a8:	2300      	moveq	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	e015      	b.n	80028da <HAL_TIM_PWM_Start+0x6a>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d109      	bne.n	80028c8 <HAL_TIM_PWM_Start+0x58>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e008      	b.n	80028da <HAL_TIM_PWM_Start+0x6a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	bf14      	ite	ne
 80028d4:	2301      	movne	r3, #1
 80028d6:	2300      	moveq	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e05e      	b.n	80029a0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d104      	bne.n	80028f2 <HAL_TIM_PWM_Start+0x82>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f0:	e013      	b.n	800291a <HAL_TIM_PWM_Start+0xaa>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d104      	bne.n	8002902 <HAL_TIM_PWM_Start+0x92>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002900:	e00b      	b.n	800291a <HAL_TIM_PWM_Start+0xaa>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b08      	cmp	r3, #8
 8002906:	d104      	bne.n	8002912 <HAL_TIM_PWM_Start+0xa2>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002910:	e003      	b.n	800291a <HAL_TIM_PWM_Start+0xaa>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2202      	movs	r2, #2
 8002916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2201      	movs	r2, #1
 8002920:	6839      	ldr	r1, [r7, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fd74 	bl	8003410 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <HAL_TIM_PWM_Start+0x138>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d107      	bne.n	8002942 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002940:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <HAL_TIM_PWM_Start+0x138>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d00e      	beq.n	800296a <HAL_TIM_PWM_Start+0xfa>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002954:	d009      	beq.n	800296a <HAL_TIM_PWM_Start+0xfa>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a14      	ldr	r2, [pc, #80]	; (80029ac <HAL_TIM_PWM_Start+0x13c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d004      	beq.n	800296a <HAL_TIM_PWM_Start+0xfa>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_TIM_PWM_Start+0x140>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d111      	bne.n	800298e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2b06      	cmp	r3, #6
 800297a:	d010      	beq.n	800299e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800298c:	e007      	b.n	800299e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40012c00 	.word	0x40012c00
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800

080029b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d122      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d11b      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0202 	mvn.w	r2, #2
 80029e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa6f 	bl	8002eda <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fa62 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fa71 	bl	8002eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d122      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0204 	mvn.w	r2, #4
 8002a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fa45 	bl	8002eda <HAL_TIM_IC_CaptureCallback>
 8002a50:	e005      	b.n	8002a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa38 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fa47 	bl	8002eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0208 	mvn.w	r2, #8
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fa1b 	bl	8002eda <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fa0e 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 fa1d 	bl	8002eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f9f1 	bl	8002eda <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f9e4 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f9f3 	bl	8002eec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0201 	mvn.w	r2, #1
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe f9f8 	bl	8000f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b80      	cmp	r3, #128	; 0x80
 8002b44:	d10e      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d107      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fd32 	bl	80035c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	2b40      	cmp	r3, #64	; 0x40
 8002b7e:	d107      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f9b7 	bl	8002efe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d10e      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d107      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0220 	mvn.w	r2, #32
 8002bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fcfd 	bl	80035b6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e0ac      	b.n	8002d38 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	f200 809f 	bhi.w	8002d2c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c29 	.word	0x08002c29
 8002bf8:	08002d2d 	.word	0x08002d2d
 8002bfc:	08002d2d 	.word	0x08002d2d
 8002c00:	08002d2d 	.word	0x08002d2d
 8002c04:	08002c69 	.word	0x08002c69
 8002c08:	08002d2d 	.word	0x08002d2d
 8002c0c:	08002d2d 	.word	0x08002d2d
 8002c10:	08002d2d 	.word	0x08002d2d
 8002c14:	08002cab 	.word	0x08002cab
 8002c18:	08002d2d 	.word	0x08002d2d
 8002c1c:	08002d2d 	.word	0x08002d2d
 8002c20:	08002d2d 	.word	0x08002d2d
 8002c24:	08002ceb 	.word	0x08002ceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f9d0 	bl	8002fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0208 	orr.w	r2, r2, #8
 8002c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0204 	bic.w	r2, r2, #4
 8002c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6999      	ldr	r1, [r3, #24]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	619a      	str	r2, [r3, #24]
      break;
 8002c66:	e062      	b.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fa16 	bl	80030a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6999      	ldr	r1, [r3, #24]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	021a      	lsls	r2, r3, #8
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	619a      	str	r2, [r3, #24]
      break;
 8002ca8:	e041      	b.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fa5f 	bl	8003174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0208 	orr.w	r2, r2, #8
 8002cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0204 	bic.w	r2, r2, #4
 8002cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69d9      	ldr	r1, [r3, #28]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	61da      	str	r2, [r3, #28]
      break;
 8002ce8:	e021      	b.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 faa9 	bl	8003248 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69d9      	ldr	r1, [r3, #28]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	021a      	lsls	r2, r3, #8
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	61da      	str	r2, [r3, #28]
      break;
 8002d2a:	e000      	b.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002d2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_TIM_ConfigClockSource+0x18>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e0b3      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x180>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d90:	d03e      	beq.n	8002e10 <HAL_TIM_ConfigClockSource+0xd0>
 8002d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d96:	f200 8087 	bhi.w	8002ea8 <HAL_TIM_ConfigClockSource+0x168>
 8002d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d9e:	f000 8085 	beq.w	8002eac <HAL_TIM_ConfigClockSource+0x16c>
 8002da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da6:	d87f      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x168>
 8002da8:	2b70      	cmp	r3, #112	; 0x70
 8002daa:	d01a      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0xa2>
 8002dac:	2b70      	cmp	r3, #112	; 0x70
 8002dae:	d87b      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x168>
 8002db0:	2b60      	cmp	r3, #96	; 0x60
 8002db2:	d050      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x116>
 8002db4:	2b60      	cmp	r3, #96	; 0x60
 8002db6:	d877      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x168>
 8002db8:	2b50      	cmp	r3, #80	; 0x50
 8002dba:	d03c      	beq.n	8002e36 <HAL_TIM_ConfigClockSource+0xf6>
 8002dbc:	2b50      	cmp	r3, #80	; 0x50
 8002dbe:	d873      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x168>
 8002dc0:	2b40      	cmp	r3, #64	; 0x40
 8002dc2:	d058      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0x136>
 8002dc4:	2b40      	cmp	r3, #64	; 0x40
 8002dc6:	d86f      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x168>
 8002dc8:	2b30      	cmp	r3, #48	; 0x30
 8002dca:	d064      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x156>
 8002dcc:	2b30      	cmp	r3, #48	; 0x30
 8002dce:	d86b      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x168>
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d060      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x156>
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d867      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x168>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d05c      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x156>
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d05a      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002de0:	e062      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6899      	ldr	r1, [r3, #8]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f000 faee 	bl	80033d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	609a      	str	r2, [r3, #8]
      break;
 8002e0e:	e04e      	b.n	8002eae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	6899      	ldr	r1, [r3, #8]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f000 fad7 	bl	80033d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e32:	609a      	str	r2, [r3, #8]
      break;
 8002e34:	e03b      	b.n	8002eae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f000 fa4e 	bl	80032e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2150      	movs	r1, #80	; 0x50
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 faa5 	bl	800339e <TIM_ITRx_SetConfig>
      break;
 8002e54:	e02b      	b.n	8002eae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6859      	ldr	r1, [r3, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	461a      	mov	r2, r3
 8002e64:	f000 fa6c 	bl	8003340 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2160      	movs	r1, #96	; 0x60
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fa95 	bl	800339e <TIM_ITRx_SetConfig>
      break;
 8002e74:	e01b      	b.n	8002eae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	461a      	mov	r2, r3
 8002e84:	f000 fa2e 	bl	80032e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2140      	movs	r1, #64	; 0x40
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fa85 	bl	800339e <TIM_ITRx_SetConfig>
      break;
 8002e94:	e00b      	b.n	8002eae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f000 fa7c 	bl	800339e <TIM_ITRx_SetConfig>
        break;
 8002ea6:	e002      	b.n	8002eae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ea8:	bf00      	nop
 8002eaa:	e000      	b.n	8002eae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002eac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr

08002efe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <TIM_Base_SetConfig+0xb8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d00b      	beq.n	8002f40 <TIM_Base_SetConfig+0x30>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2e:	d007      	beq.n	8002f40 <TIM_Base_SetConfig+0x30>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a26      	ldr	r2, [pc, #152]	; (8002fcc <TIM_Base_SetConfig+0xbc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d003      	beq.n	8002f40 <TIM_Base_SetConfig+0x30>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a25      	ldr	r2, [pc, #148]	; (8002fd0 <TIM_Base_SetConfig+0xc0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d108      	bne.n	8002f52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a1c      	ldr	r2, [pc, #112]	; (8002fc8 <TIM_Base_SetConfig+0xb8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00b      	beq.n	8002f72 <TIM_Base_SetConfig+0x62>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f60:	d007      	beq.n	8002f72 <TIM_Base_SetConfig+0x62>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a19      	ldr	r2, [pc, #100]	; (8002fcc <TIM_Base_SetConfig+0xbc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d003      	beq.n	8002f72 <TIM_Base_SetConfig+0x62>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a18      	ldr	r2, [pc, #96]	; (8002fd0 <TIM_Base_SetConfig+0xc0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d108      	bne.n	8002f84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a07      	ldr	r2, [pc, #28]	; (8002fc8 <TIM_Base_SetConfig+0xb8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d103      	bne.n	8002fb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	615a      	str	r2, [r3, #20]
}
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	40012c00 	.word	0x40012c00
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	40000800 	.word	0x40000800

08002fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	f023 0201 	bic.w	r2, r3, #1
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f023 0302 	bic.w	r3, r3, #2
 800301c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a1c      	ldr	r2, [pc, #112]	; (800309c <TIM_OC1_SetConfig+0xc8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d10c      	bne.n	800304a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f023 0308 	bic.w	r3, r3, #8
 8003036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	4313      	orrs	r3, r2
 8003040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f023 0304 	bic.w	r3, r3, #4
 8003048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a13      	ldr	r2, [pc, #76]	; (800309c <TIM_OC1_SetConfig+0xc8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d111      	bne.n	8003076 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	621a      	str	r2, [r3, #32]
}
 8003090:	bf00      	nop
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40012c00 	.word	0x40012c00

080030a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f023 0210 	bic.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	f023 0320 	bic.w	r3, r3, #32
 80030ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <TIM_OC2_SetConfig+0xd0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10d      	bne.n	800311c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800311a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a14      	ldr	r2, [pc, #80]	; (8003170 <TIM_OC2_SetConfig+0xd0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d113      	bne.n	800314c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800312a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	621a      	str	r2, [r3, #32]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	40012c00 	.word	0x40012c00

08003174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a1d      	ldr	r2, [pc, #116]	; (8003244 <TIM_OC3_SetConfig+0xd0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d10d      	bne.n	80031ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <TIM_OC3_SetConfig+0xd0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d113      	bne.n	800321e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	011b      	lsls	r3, r3, #4
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	621a      	str	r2, [r3, #32]
}
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40012c00 	.word	0x40012c00

08003248 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800327e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	031b      	lsls	r3, r3, #12
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a0f      	ldr	r2, [pc, #60]	; (80032e0 <TIM_OC4_SetConfig+0x98>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d109      	bne.n	80032bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	019b      	lsls	r3, r3, #6
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	621a      	str	r2, [r3, #32]
}
 80032d6:	bf00      	nop
 80032d8:	371c      	adds	r7, #28
 80032da:	46bd      	mov	sp, r7
 80032dc:	bc80      	pop	{r7}
 80032de:	4770      	bx	lr
 80032e0:	40012c00 	.word	0x40012c00

080032e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	f023 0201 	bic.w	r2, r3, #1
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800330e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f023 030a 	bic.w	r3, r3, #10
 8003320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	621a      	str	r2, [r3, #32]
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f023 0210 	bic.w	r2, r3, #16
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800336a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	031b      	lsls	r3, r3, #12
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800337c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	621a      	str	r2, [r3, #32]
}
 8003394:	bf00      	nop
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr

0800339e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800339e:	b480      	push	{r7}
 80033a0:	b085      	sub	sp, #20
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f043 0307 	orr.w	r3, r3, #7
 80033c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	609a      	str	r2, [r3, #8]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b087      	sub	sp, #28
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	021a      	lsls	r2, r3, #8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	609a      	str	r2, [r3, #8]
}
 8003406:	bf00      	nop
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	2201      	movs	r2, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a1a      	ldr	r2, [r3, #32]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	43db      	mvns	r3, r3
 8003432:	401a      	ands	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	fa01 f303 	lsl.w	r3, r1, r3
 8003448:	431a      	orrs	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800346c:	2302      	movs	r3, #2
 800346e:	e046      	b.n	80034fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003496:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a16      	ldr	r2, [pc, #88]	; (8003508 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00e      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034bc:	d009      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a12      	ldr	r2, [pc, #72]	; (800350c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d004      	beq.n	80034d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a10      	ldr	r2, [pc, #64]	; (8003510 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d10c      	bne.n	80034ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40000400 	.word	0x40000400
 8003510:	40000800 	.word	0x40000800

08003514 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800352c:	2302      	movs	r3, #2
 800352e:	e03d      	b.n	80035ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr

080035da <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e03f      	b.n	800366c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d106      	bne.n	8003606 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7fd ff91 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2224      	movs	r2, #36	; 0x24
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800361c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fc84 	bl	8003f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003632:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003642:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003652:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b20      	cmp	r3, #32
 8003692:	d17c      	bne.n	800378e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_UART_Transmit+0x2c>
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e075      	b.n	8003790 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_UART_Transmit+0x3e>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e06e      	b.n	8003790 <HAL_UART_Transmit+0x11c>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2221      	movs	r2, #33	; 0x21
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c8:	f7fe f862 	bl	8001790 <HAL_GetTick>
 80036cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	88fa      	ldrh	r2, [r7, #6]
 80036d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e2:	d108      	bne.n	80036f6 <HAL_UART_Transmit+0x82>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d104      	bne.n	80036f6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	e003      	b.n	80036fe <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003706:	e02a      	b.n	800375e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2200      	movs	r2, #0
 8003710:	2180      	movs	r1, #128	; 0x80
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fa37 	bl	8003b86 <UART_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e036      	b.n	8003790 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003736:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	3302      	adds	r3, #2
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	e007      	b.n	8003750 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	781a      	ldrb	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	3301      	adds	r3, #1
 800374e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1cf      	bne.n	8003708 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2200      	movs	r2, #0
 8003770:	2140      	movs	r1, #64	; 0x40
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fa07 	bl	8003b86 <UART_WaitOnFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e006      	b.n	8003790 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800378a:	2300      	movs	r3, #0
 800378c:	e000      	b.n	8003790 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800378e:	2302      	movs	r3, #2
  }
}
 8003790:	4618      	mov	r0, r3
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b20      	cmp	r3, #32
 80037b0:	d11d      	bne.n	80037ee <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_UART_Receive_IT+0x26>
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e016      	b.n	80037f0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_UART_Receive_IT+0x38>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e00f      	b.n	80037f0 <HAL_UART_Receive_IT+0x58>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	461a      	mov	r2, r3
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 fa18 	bl	8003c1a <UART_Start_Receive_IT>
 80037ea:	4603      	mov	r3, r0
 80037ec:	e000      	b.n	80037f0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
  }
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003818:	2300      	movs	r3, #0
 800381a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10d      	bne.n	800384a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_UART_IRQHandler+0x52>
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fac9 	bl	8003dda <UART_Receive_IT>
      return;
 8003848:	e17b      	b.n	8003b42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80b1 	beq.w	80039b4 <HAL_UART_IRQHandler+0x1bc>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_UART_IRQHandler+0x70>
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 80a6 	beq.w	80039b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <HAL_UART_IRQHandler+0x90>
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 0201 	orr.w	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <HAL_UART_IRQHandler+0xb0>
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	f043 0202 	orr.w	r2, r3, #2
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_UART_IRQHandler+0xd0>
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f043 0204 	orr.w	r2, r3, #4
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00f      	beq.n	80038f2 <HAL_UART_IRQHandler+0xfa>
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <HAL_UART_IRQHandler+0xee>
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	f043 0208 	orr.w	r2, r3, #8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 811e 	beq.w	8003b38 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_UART_IRQHandler+0x11e>
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 fa62 	bl	8003dda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf14      	ite	ne
 8003924:	2301      	movne	r3, #1
 8003926:	2300      	moveq	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <HAL_UART_IRQHandler+0x146>
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d031      	beq.n	80039a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f9a4 	bl	8003c8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d023      	beq.n	800399a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003960:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003966:	2b00      	cmp	r3, #0
 8003968:	d013      	beq.n	8003992 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	4a76      	ldr	r2, [pc, #472]	; (8003b48 <HAL_UART_IRQHandler+0x350>)
 8003970:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003976:	4618      	mov	r0, r3
 8003978:	f7fe f85c 	bl	8001a34 <HAL_DMA_Abort_IT>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d016      	beq.n	80039b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800398c:	4610      	mov	r0, r2
 800398e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003990:	e00e      	b.n	80039b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f8e3 	bl	8003b5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003998:	e00a      	b.n	80039b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f8df 	bl	8003b5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	e006      	b.n	80039b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f8db 	bl	8003b5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80039ae:	e0c3      	b.n	8003b38 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b0:	bf00      	nop
    return;
 80039b2:	e0c1      	b.n	8003b38 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	f040 80a1 	bne.w	8003b00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 809b 	beq.w	8003b00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8095 	beq.w	8003b00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d04e      	beq.n	8003a98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003a04:	8a3b      	ldrh	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8098 	beq.w	8003b3c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a10:	8a3a      	ldrh	r2, [r7, #16]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	f080 8092 	bcs.w	8003b3c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8a3a      	ldrh	r2, [r7, #16]
 8003a1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d02b      	beq.n	8003a80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0210 	bic.w	r2, r2, #16
 8003a74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd ff9f 	bl	80019be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f86d 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a96:	e051      	b.n	8003b3c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d047      	beq.n	8003b40 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003ab0:	8a7b      	ldrh	r3, [r7, #18]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d044      	beq.n	8003b40 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ac4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0201 	bic.w	r2, r2, #1
 8003ad4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0210 	bic.w	r2, r2, #16
 8003af2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003af4:	8a7b      	ldrh	r3, [r7, #18]
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f839 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003afe:	e01f      	b.n	8003b40 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d008      	beq.n	8003b1c <HAL_UART_IRQHandler+0x324>
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f8f9 	bl	8003d0c <UART_Transmit_IT>
    return;
 8003b1a:	e012      	b.n	8003b42 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <HAL_UART_IRQHandler+0x34a>
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f93a 	bl	8003daa <UART_EndTransmit_IT>
    return;
 8003b36:	e004      	b.n	8003b42 <HAL_UART_IRQHandler+0x34a>
    return;
 8003b38:	bf00      	nop
 8003b3a:	e002      	b.n	8003b42 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b3c:	bf00      	nop
 8003b3e:	e000      	b.n	8003b42 <HAL_UART_IRQHandler+0x34a>
      return;
 8003b40:	bf00      	nop
  }
}
 8003b42:	3728      	adds	r7, #40	; 0x28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	08003ce5 	.word	0x08003ce5

08003b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr

08003b5e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bc80      	pop	{r7}
 8003b6e:	4770      	bx	lr

08003b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bc80      	pop	{r7}
 8003b84:	4770      	bx	lr

08003b86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b96:	e02c      	b.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b9e:	d028      	beq.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba6:	f7fd fdf3 	bl	8001790 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d21d      	bcs.n	8003bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bc4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e00f      	b.n	8003c12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d0c3      	beq.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	4613      	mov	r3, r2
 8003c26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	88fa      	ldrh	r2, [r7, #6]
 8003c38:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2222      	movs	r2, #34	; 0x22
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0220 	orr.w	r2, r2, #32
 8003c7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ca2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d107      	bne.n	8003ccc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0210 	bic.w	r2, r2, #16
 8003cca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7ff ff2d 	bl	8003b5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d04:	bf00      	nop
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b21      	cmp	r3, #33	; 0x21
 8003d1e:	d13e      	bne.n	8003d9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d28:	d114      	bne.n	8003d54 <UART_Transmit_IT+0x48>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d110      	bne.n	8003d54 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	1c9a      	adds	r2, r3, #2
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	621a      	str	r2, [r3, #32]
 8003d52:	e008      	b.n	8003d66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	1c59      	adds	r1, r3, #1
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6211      	str	r1, [r2, #32]
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4619      	mov	r1, r3
 8003d74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10f      	bne.n	8003d9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68da      	ldr	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e000      	b.n	8003da0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d9e:	2302      	movs	r3, #2
  }
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff febe 	bl	8003b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b22      	cmp	r3, #34	; 0x22
 8003dec:	f040 8099 	bne.w	8003f22 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df8:	d117      	bne.n	8003e2a <UART_Receive_IT+0x50>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d113      	bne.n	8003e2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	1c9a      	adds	r2, r3, #2
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
 8003e28:	e026      	b.n	8003e78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e3c:	d007      	beq.n	8003e4e <UART_Receive_IT+0x74>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <UART_Receive_IT+0x82>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	e008      	b.n	8003e6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	4619      	mov	r1, r3
 8003e86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d148      	bne.n	8003f1e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0220 	bic.w	r2, r2, #32
 8003e9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d123      	bne.n	8003f14 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 0210 	bic.w	r2, r2, #16
 8003ee0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b10      	cmp	r3, #16
 8003eee:	d10a      	bne.n	8003f06 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff fe2f 	bl	8003b70 <HAL_UARTEx_RxEventCallback>
 8003f12:	e002      	b.n	8003f1a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7fc ffe7 	bl	8000ee8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e002      	b.n	8003f24 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	e000      	b.n	8003f24 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003f22:	2302      	movs	r3, #2
  }
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f66:	f023 030c 	bic.w	r3, r3, #12
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	430b      	orrs	r3, r1
 8003f72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699a      	ldr	r2, [r3, #24]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	; (8004040 <UART_SetConfig+0x114>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d103      	bne.n	8003f9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f94:	f7fe fb48 	bl	8002628 <HAL_RCC_GetPCLK2Freq>
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	e002      	b.n	8003fa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7fe fb30 	bl	8002600 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	009a      	lsls	r2, r3, #2
 8003fac:	441a      	add	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb8:	4a22      	ldr	r2, [pc, #136]	; (8004044 <UART_SetConfig+0x118>)
 8003fba:	fba2 2303 	umull	r2, r3, r2, r3
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	0119      	lsls	r1, r3, #4
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	009a      	lsls	r2, r3, #2
 8003fcc:	441a      	add	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <UART_SetConfig+0x118>)
 8003fda:	fba3 0302 	umull	r0, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	2064      	movs	r0, #100	; 0x64
 8003fe2:	fb00 f303 	mul.w	r3, r0, r3
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	3332      	adds	r3, #50	; 0x32
 8003fec:	4a15      	ldr	r2, [pc, #84]	; (8004044 <UART_SetConfig+0x118>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff8:	4419      	add	r1, r3
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	009a      	lsls	r2, r3, #2
 8004004:	441a      	add	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <UART_SetConfig+0x118>)
 8004012:	fba3 0302 	umull	r0, r3, r3, r2
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	2064      	movs	r0, #100	; 0x64
 800401a:	fb00 f303 	mul.w	r3, r0, r3
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	3332      	adds	r3, #50	; 0x32
 8004024:	4a07      	ldr	r2, [pc, #28]	; (8004044 <UART_SetConfig+0x118>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	f003 020f 	and.w	r2, r3, #15
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	440a      	add	r2, r1
 8004036:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004038:	bf00      	nop
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40013800 	.word	0x40013800
 8004044:	51eb851f 	.word	0x51eb851f

08004048 <parse_msg>:
// Created by crepusculumx on 2021/12/20.
//

#include "ComProtocol.h"

int8_t parse_msg(uint8_t data[], size_t length, ProtocolInner *inner_msg) {
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  if (length != MSG_LENGTH) {
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2b9e      	cmp	r3, #158	; 0x9e
 8004058:	d002      	beq.n	8004060 <parse_msg+0x18>
    return -1;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800405e:	e067      	b.n	8004130 <parse_msg+0xe8>
  }

  inner_msg->head[0] = data[0];
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	701a      	strb	r2, [r3, #0]
  inner_msg->head[1] = data[1];
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	785a      	ldrb	r2, [r3, #1]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	705a      	strb	r2, [r3, #1]

  if (inner_msg->head[0] != PRE || inner_msg->head[1] != BID) {
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2bfb      	cmp	r3, #251	; 0xfb
 8004076:	d103      	bne.n	8004080 <parse_msg+0x38>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	785b      	ldrb	r3, [r3, #1]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <parse_msg+0x3e>
    return -2;
 8004080:	f06f 0301 	mvn.w	r3, #1
 8004084:	e054      	b.n	8004130 <parse_msg+0xe8>
  }

  size_t it = 2;
 8004086:	2302      	movs	r3, #2
 8004088:	613b      	str	r3, [r7, #16]
  inner_msg->cur = data_int8_to_int16(data, &it);
 800408a:	f107 0310 	add.w	r3, r7, #16
 800408e:	4619      	mov	r1, r3
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 fd8b 	bl	8004bac <data_int8_to_int16>
 8004096:	4603      	mov	r3, r0
 8004098:	b29a      	uxth	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	805a      	strh	r2, [r3, #2]

  it += 10;//轴指令前位置
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	330a      	adds	r3, #10
 80040a2:	613b      	str	r3, [r7, #16]

  for (size_t i = 0; i < AXLE_NUM; i++) {
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	e03e      	b.n	8004128 <parse_msg+0xe0>
    inner_msg->axle_cmd[i].mode = data_int8_to_int16(data, &it);
 80040aa:	f107 0310 	add.w	r3, r7, #16
 80040ae:	4619      	mov	r1, r3
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fd7b 	bl	8004bac <data_int8_to_int16>
 80040b6:	4603      	mov	r3, r0
 80040b8:	4619      	mov	r1, r3
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	3301      	adds	r3, #1
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	460a      	mov	r2, r1
 80040c6:	80da      	strh	r2, [r3, #6]
    inner_msg->axle_cmd[i].current = data_int8_to_int16(data, &it);
 80040c8:	f107 0310 	add.w	r3, r7, #16
 80040cc:	4619      	mov	r1, r3
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fd6c 	bl	8004bac <data_int8_to_int16>
 80040d4:	4603      	mov	r3, r0
 80040d6:	4619      	mov	r1, r3
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	3301      	adds	r3, #1
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4413      	add	r3, r2
 80040e2:	460a      	mov	r2, r1
 80040e4:	811a      	strh	r2, [r3, #8]
    inner_msg->axle_cmd[i].velocity = data_int8_to_int16(data, &it);
 80040e6:	f107 0310 	add.w	r3, r7, #16
 80040ea:	4619      	mov	r1, r3
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fd5d 	bl	8004bac <data_int8_to_int16>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4619      	mov	r1, r3
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	3301      	adds	r3, #1
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4413      	add	r3, r2
 8004100:	460a      	mov	r2, r1
 8004102:	815a      	strh	r2, [r3, #10]
    inner_msg->axle_cmd[i].position = data_int8_to_int16(data, &it);
 8004104:	f107 0310 	add.w	r3, r7, #16
 8004108:	4619      	mov	r1, r3
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fd4e 	bl	8004bac <data_int8_to_int16>
 8004110:	4603      	mov	r3, r0
 8004112:	4619      	mov	r1, r3
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	3301      	adds	r3, #1
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4413      	add	r3, r2
 800411e:	460a      	mov	r2, r1
 8004120:	819a      	strh	r2, [r3, #12]
  for (size_t i = 0; i < AXLE_NUM; i++) {
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	3301      	adds	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b11      	cmp	r3, #17
 800412c:	d9bd      	bls.n	80040aa <parse_msg+0x62>
  }
  return 0;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <parse_packet>:

int8_t parse_packet(const uint8_t data[], const size_t length, ProtocolPacket *data_packet) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b0b4      	sub	sp, #208	; 0xd0
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  data_packet->head[0] = data[0];
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	781a      	ldrb	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	701a      	strb	r2, [r3, #0]
  data_packet->head[1] = data[1];
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	785a      	ldrb	r2, [r3, #1]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	705a      	strb	r2, [r3, #1]

  // 包头错误
  if (data_packet->head[0] != HD_NUM || data_packet->head[1] != ID_NUM) {
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2bfa      	cmp	r3, #250	; 0xfa
 800415a:	d103      	bne.n	8004164 <parse_packet+0x2c>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d002      	beq.n	800416a <parse_packet+0x32>
    return -1;
 8004164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004168:	e09d      	b.n	80042a6 <parse_packet+0x16e>
  }

  data_packet->length = data[2];
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	789a      	ldrb	r2, [r3, #2]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	709a      	strb	r2, [r3, #2]

  // 包长错误
  if (data_packet->length >= MAX_PACKET_LENGTH || data_packet->length > length) {
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	789b      	ldrb	r3, [r3, #2]
 8004176:	2ba9      	cmp	r3, #169	; 0xa9
 8004178:	d805      	bhi.n	8004186 <parse_packet+0x4e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	789b      	ldrb	r3, [r3, #2]
 800417e:	461a      	mov	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4293      	cmp	r3, r2
 8004184:	d202      	bcs.n	800418c <parse_packet+0x54>
    return -2;
 8004186:	f06f 0301 	mvn.w	r3, #1
 800418a:	e08c      	b.n	80042a6 <parse_packet+0x16e>
  }

  //CRC校验
  uint16_t crc_res = data_packet->crc = CRC16_check(data, length - 2);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	3b02      	subs	r3, #2
 8004190:	4619      	mov	r1, r3
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f9b4 	bl	8004500 <CRC16_check>
 8004198:	4603      	mov	r3, r0
 800419a:	461a      	mov	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
 80041a8:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
  if ((data[length - 2]) != ((crc_res & 0xff00) >> 8) || (data[length - 1] != (crc_res & 0x00ff))) {
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	3b02      	subs	r3, #2
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80041bc:	0a1b      	lsrs	r3, r3, #8
 80041be:	b29b      	uxth	r3, r3
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d10a      	bne.n	80041da <parse_packet+0xa2>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	3b01      	subs	r3, #1
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d002      	beq.n	80041e0 <parse_packet+0xa8>
    return -3;
 80041da:	f06f 0302 	mvn.w	r3, #2
 80041de:	e062      	b.n	80042a6 <parse_packet+0x16e>
  }

  // 移除透传,并且只保留msg
  uint8_t msg_data[MAX_PACKET_LENGTH + 10];
  size_t msg_data_it = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  //开头跳过HD_NUM ID_NUM length，后面不包括crc
  for (size_t i = 3; i < length - 2; i++) {
 80041e6:	2303      	movs	r3, #3
 80041e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041ec:	e041      	b.n	8004272 <parse_packet+0x13a>
    msg_data[msg_data_it] = data[i];
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041f4:	4413      	add	r3, r2
 80041f6:	7819      	ldrb	r1, [r3, #0]
 80041f8:	f107 0210 	add.w	r2, r7, #16
 80041fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004200:	4413      	add	r3, r2
 8004202:	460a      	mov	r2, r1
 8004204:	701a      	strb	r2, [r3, #0]
    msg_data_it++;
 8004206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800420a:	3301      	adds	r3, #1
 800420c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    if (data[i - 2] == HD_NUM && data[i - 1] == 0 && data[i] == ID_NUM) {
 8004210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004214:	3b02      	subs	r3, #2
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2bfa      	cmp	r3, #250	; 0xfa
 800421e:	d123      	bne.n	8004268 <parse_packet+0x130>
 8004220:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004224:	3b01      	subs	r3, #1
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d11b      	bne.n	8004268 <parse_packet+0x130>
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004236:	4413      	add	r3, r2
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d114      	bne.n	8004268 <parse_packet+0x130>
      msg_data[msg_data_it - 2] = msg_data[msg_data_it - 1];
 800423e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004242:	1e5a      	subs	r2, r3, #1
 8004244:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004248:	3b02      	subs	r3, #2
 800424a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800424e:	440a      	add	r2, r1
 8004250:	f812 2cc0 	ldrb.w	r2, [r2, #-192]
 8004254:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8004258:	440b      	add	r3, r1
 800425a:	f803 2cc0 	strb.w	r2, [r3, #-192]
      msg_data_it--;
 800425e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004262:	3b01      	subs	r3, #1
 8004264:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (size_t i = 3; i < length - 2; i++) {
 8004268:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800426c:	3301      	adds	r3, #1
 800426e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	3b02      	subs	r3, #2
 8004276:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800427a:	429a      	cmp	r2, r3
 800427c:	d3b7      	bcc.n	80041ee <parse_packet+0xb6>
    }
  }

  // 解析内容
  uint8_t parse_msg_res = parse_msg(msg_data, msg_data_it, &(data_packet->inner_msg));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	1d1a      	adds	r2, r3, #4
 8004282:	f107 0310 	add.w	r3, r7, #16
 8004286:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff fedc 	bl	8004048 <parse_msg>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
  if (parse_msg_res != 0) {
 8004296:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <parse_packet+0x16c>
    return -4;
 800429e:	f06f 0303 	mvn.w	r3, #3
 80042a2:	e000      	b.n	80042a6 <parse_packet+0x16e>
  }

  return 0;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	37d0      	adds	r7, #208	; 0xd0
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <CRC_crunch>:
// Created by crepusculumx on 2021/12/21.
//

#include "CrcCheck.h"

uint16_t CRC_crunch(char x, uint16_t g_accum) {
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	4603      	mov	r3, r0
 80042b6:	460a      	mov	r2, r1
 80042b8:	71fb      	strb	r3, [r7, #7]
 80042ba:	4613      	mov	r3, r2
 80042bc:	80bb      	strh	r3, [r7, #4]
  uint16_t Gr1 = 0x0810;
 80042be:	f44f 6301 	mov.w	r3, #2064	; 0x810
 80042c2:	81fb      	strh	r3, [r7, #14]
  // Compute CRC using BitbyBit method
  int i;

  i = (x >> 7) & 1;
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	09db      	lsrs	r3, r3, #7
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	60bb      	str	r3, [r7, #8]
  if (g_accum & 0x8000) {
 80042d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	da0e      	bge.n	80042f6 <CRC_crunch+0x48>
    g_accum = ((g_accum ^ Gr1) << 1) + (i ^ 1);
 80042d8:	88ba      	ldrh	r2, [r7, #4]
 80042da:	89fb      	ldrh	r3, [r7, #14]
 80042dc:	4053      	eors	r3, r2
 80042de:	b29b      	uxth	r3, r3
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	b21b      	sxth	r3, r3
 80042e8:	f083 0301 	eor.w	r3, r3, #1
 80042ec:	b21b      	sxth	r3, r3
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	4413      	add	r3, r2
 80042f2:	80bb      	strh	r3, [r7, #4]
 80042f4:	e006      	b.n	8004304 <CRC_crunch+0x56>
  } else {
    g_accum = (g_accum << 1) + i;
 80042f6:	88bb      	ldrh	r3, [r7, #4]
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	4413      	add	r3, r2
 8004302:	80bb      	strh	r3, [r7, #4]
  }
  g_accum &= 0x0ffff;
  x <<= 1;
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	71fb      	strb	r3, [r7, #7]
  //1
  i = (x >> 7) & 1;
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	09db      	lsrs	r3, r3, #7
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	60bb      	str	r3, [r7, #8]
  if (g_accum & 0x8000) {
 8004316:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	da0e      	bge.n	800433c <CRC_crunch+0x8e>
    g_accum = ((g_accum ^ Gr1) << 1) + (i ^ 1);
 800431e:	88ba      	ldrh	r2, [r7, #4]
 8004320:	89fb      	ldrh	r3, [r7, #14]
 8004322:	4053      	eors	r3, r2
 8004324:	b29b      	uxth	r3, r3
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	b21b      	sxth	r3, r3
 800432e:	f083 0301 	eor.w	r3, r3, #1
 8004332:	b21b      	sxth	r3, r3
 8004334:	b29b      	uxth	r3, r3
 8004336:	4413      	add	r3, r2
 8004338:	80bb      	strh	r3, [r7, #4]
 800433a:	e006      	b.n	800434a <CRC_crunch+0x9c>
  } else {
    g_accum = (g_accum << 1) + i;
 800433c:	88bb      	ldrh	r3, [r7, #4]
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	b29b      	uxth	r3, r3
 8004346:	4413      	add	r3, r2
 8004348:	80bb      	strh	r3, [r7, #4]
  }
  g_accum &= 0x0ffff;
  x <<= 1;
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	71fb      	strb	r3, [r7, #7]
  //2
  i = (x >> 7) & 1;
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	09db      	lsrs	r3, r3, #7
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	60bb      	str	r3, [r7, #8]
  if (g_accum & 0x8000) {
 800435c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	da0e      	bge.n	8004382 <CRC_crunch+0xd4>
    g_accum = ((g_accum ^ Gr1) << 1) + (i ^ 1);
 8004364:	88ba      	ldrh	r2, [r7, #4]
 8004366:	89fb      	ldrh	r3, [r7, #14]
 8004368:	4053      	eors	r3, r2
 800436a:	b29b      	uxth	r3, r3
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	b21b      	sxth	r3, r3
 8004374:	f083 0301 	eor.w	r3, r3, #1
 8004378:	b21b      	sxth	r3, r3
 800437a:	b29b      	uxth	r3, r3
 800437c:	4413      	add	r3, r2
 800437e:	80bb      	strh	r3, [r7, #4]
 8004380:	e006      	b.n	8004390 <CRC_crunch+0xe2>
  } else {
    g_accum = (g_accum << 1) + i;
 8004382:	88bb      	ldrh	r3, [r7, #4]
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	b29b      	uxth	r3, r3
 800438c:	4413      	add	r3, r2
 800438e:	80bb      	strh	r3, [r7, #4]
  }
  g_accum &= 0x0ffff;
  x <<= 1;
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	71fb      	strb	r3, [r7, #7]
  //3
  i = (x >> 7) & 1;
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	09db      	lsrs	r3, r3, #7
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	60bb      	str	r3, [r7, #8]
  if (g_accum & 0x8000) {
 80043a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	da0e      	bge.n	80043c8 <CRC_crunch+0x11a>
    g_accum = ((g_accum ^ Gr1) << 1) + (i ^ 1);
 80043aa:	88ba      	ldrh	r2, [r7, #4]
 80043ac:	89fb      	ldrh	r3, [r7, #14]
 80043ae:	4053      	eors	r3, r2
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	b21b      	sxth	r3, r3
 80043ba:	f083 0301 	eor.w	r3, r3, #1
 80043be:	b21b      	sxth	r3, r3
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	80bb      	strh	r3, [r7, #4]
 80043c6:	e006      	b.n	80043d6 <CRC_crunch+0x128>
  } else {
    g_accum = (g_accum << 1) + i;
 80043c8:	88bb      	ldrh	r3, [r7, #4]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	4413      	add	r3, r2
 80043d4:	80bb      	strh	r3, [r7, #4]
  }
  g_accum &= 0x0ffff;
  x <<= 1;
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	71fb      	strb	r3, [r7, #7]
  //4
  i = (x >> 7) & 1;
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	09db      	lsrs	r3, r3, #7
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	60bb      	str	r3, [r7, #8]
  if (g_accum & 0x8000) {
 80043e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	da0e      	bge.n	800440e <CRC_crunch+0x160>
    g_accum = ((g_accum ^ Gr1) << 1) + (i ^ 1);
 80043f0:	88ba      	ldrh	r2, [r7, #4]
 80043f2:	89fb      	ldrh	r3, [r7, #14]
 80043f4:	4053      	eors	r3, r2
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	b21b      	sxth	r3, r3
 8004400:	f083 0301 	eor.w	r3, r3, #1
 8004404:	b21b      	sxth	r3, r3
 8004406:	b29b      	uxth	r3, r3
 8004408:	4413      	add	r3, r2
 800440a:	80bb      	strh	r3, [r7, #4]
 800440c:	e006      	b.n	800441c <CRC_crunch+0x16e>
  } else {
    g_accum = (g_accum << 1) + i;
 800440e:	88bb      	ldrh	r3, [r7, #4]
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	b29b      	uxth	r3, r3
 8004418:	4413      	add	r3, r2
 800441a:	80bb      	strh	r3, [r7, #4]
  }
  g_accum &= 0x0ffff;
  x <<= 1;
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	71fb      	strb	r3, [r7, #7]
  //5
  i = (x >> 7) & 1;
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	09db      	lsrs	r3, r3, #7
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	60bb      	str	r3, [r7, #8]
  if (g_accum & 0x8000) {
 800442e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	da0e      	bge.n	8004454 <CRC_crunch+0x1a6>
    g_accum = ((g_accum ^ Gr1) << 1) + (i ^ 1);
 8004436:	88ba      	ldrh	r2, [r7, #4]
 8004438:	89fb      	ldrh	r3, [r7, #14]
 800443a:	4053      	eors	r3, r2
 800443c:	b29b      	uxth	r3, r3
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	b21b      	sxth	r3, r3
 8004446:	f083 0301 	eor.w	r3, r3, #1
 800444a:	b21b      	sxth	r3, r3
 800444c:	b29b      	uxth	r3, r3
 800444e:	4413      	add	r3, r2
 8004450:	80bb      	strh	r3, [r7, #4]
 8004452:	e006      	b.n	8004462 <CRC_crunch+0x1b4>
  } else {
    g_accum = (g_accum << 1) + i;
 8004454:	88bb      	ldrh	r3, [r7, #4]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	b29b      	uxth	r3, r3
 800445e:	4413      	add	r3, r2
 8004460:	80bb      	strh	r3, [r7, #4]
  }
  g_accum &= 0x0ffff;
  x <<= 1;
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	71fb      	strb	r3, [r7, #7]
  //6
  i = (x >> 7) & 1;
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	09db      	lsrs	r3, r3, #7
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	60bb      	str	r3, [r7, #8]
  if (g_accum & 0x8000) {
 8004474:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	da0e      	bge.n	800449a <CRC_crunch+0x1ec>
    g_accum = ((g_accum ^ Gr1) << 1) + (i ^ 1);
 800447c:	88ba      	ldrh	r2, [r7, #4]
 800447e:	89fb      	ldrh	r3, [r7, #14]
 8004480:	4053      	eors	r3, r2
 8004482:	b29b      	uxth	r3, r3
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	b21b      	sxth	r3, r3
 800448c:	f083 0301 	eor.w	r3, r3, #1
 8004490:	b21b      	sxth	r3, r3
 8004492:	b29b      	uxth	r3, r3
 8004494:	4413      	add	r3, r2
 8004496:	80bb      	strh	r3, [r7, #4]
 8004498:	e006      	b.n	80044a8 <CRC_crunch+0x1fa>
  } else {
    g_accum = (g_accum << 1) + i;
 800449a:	88bb      	ldrh	r3, [r7, #4]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	4413      	add	r3, r2
 80044a6:	80bb      	strh	r3, [r7, #4]
  }
  g_accum &= 0x0ffff;
  x <<= 1;
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	71fb      	strb	r3, [r7, #7]
  //7
  i = (x >> 7) & 1;
 80044ae:	79fb      	ldrb	r3, [r7, #7]
 80044b0:	09db      	lsrs	r3, r3, #7
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	60bb      	str	r3, [r7, #8]
  if (g_accum & 0x8000) {
 80044ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da0e      	bge.n	80044e0 <CRC_crunch+0x232>
    g_accum = ((g_accum ^ Gr1) << 1) + (i ^ 1);
 80044c2:	88ba      	ldrh	r2, [r7, #4]
 80044c4:	89fb      	ldrh	r3, [r7, #14]
 80044c6:	4053      	eors	r3, r2
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	b21b      	sxth	r3, r3
 80044d2:	f083 0301 	eor.w	r3, r3, #1
 80044d6:	b21b      	sxth	r3, r3
 80044d8:	b29b      	uxth	r3, r3
 80044da:	4413      	add	r3, r2
 80044dc:	80bb      	strh	r3, [r7, #4]
 80044de:	e006      	b.n	80044ee <CRC_crunch+0x240>
  } else {
    g_accum = (g_accum << 1) + i;
 80044e0:	88bb      	ldrh	r3, [r7, #4]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	4413      	add	r3, r2
 80044ec:	80bb      	strh	r3, [r7, #4]
  }
  g_accum &= 0x0ffff;
  x <<= 1;
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	71fb      	strb	r3, [r7, #7]
  return g_accum;
 80044f4:	88bb      	ldrh	r3, [r7, #4]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <CRC16_check>:

uint16_t CRC16_check(const uint8_t data[], size_t length) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  uint16_t g_accum = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	81fb      	strh	r3, [r7, #14]

  for (size_t it = 0; it < length; it++) {
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	e00d      	b.n	8004530 <CRC16_check+0x30>
    g_accum = CRC_crunch(data[it], g_accum);
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4413      	add	r3, r2
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	89fa      	ldrh	r2, [r7, #14]
 800451e:	4611      	mov	r1, r2
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fec4 	bl	80042ae <CRC_crunch>
 8004526:	4603      	mov	r3, r0
 8004528:	81fb      	strh	r3, [r7, #14]
  for (size_t it = 0; it < length; it++) {
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	3301      	adds	r3, #1
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d3ed      	bcc.n	8004514 <CRC16_check+0x14>
  }
  g_accum = CRC_crunch(0, g_accum);
 8004538:	89fb      	ldrh	r3, [r7, #14]
 800453a:	4619      	mov	r1, r3
 800453c:	2000      	movs	r0, #0
 800453e:	f7ff feb6 	bl	80042ae <CRC_crunch>
 8004542:	4603      	mov	r3, r0
 8004544:	81fb      	strh	r3, [r7, #14]
  g_accum = CRC_crunch(0, g_accum);
 8004546:	89fb      	ldrh	r3, [r7, #14]
 8004548:	4619      	mov	r1, r3
 800454a:	2000      	movs	r0, #0
 800454c:	f7ff feaf 	bl	80042ae <CRC_crunch>
 8004550:	4603      	mov	r3, r0
 8004552:	81fb      	strh	r3, [r7, #14]

  return g_accum;
 8004554:	89fb      	ldrh	r3, [r7, #14]
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <Dequeue_push_back>:
  uint8_t res = dequeue->queue[back];
  dequeue->end = back;
  return res;
}

void Dequeue_push_back(Deque *dequeue, uint8_t num) {
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	70fb      	strb	r3, [r7, #3]
  dequeue->length++;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0

  dequeue->queue[dequeue->end] = num;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	78f9      	ldrb	r1, [r7, #3]
 8004582:	54d1      	strb	r1, [r2, r3]
  dequeue->end++;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
  if (dequeue->end == MAX_DEQUEUE_SIZE) dequeue->end = 0;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8004598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800459c:	d103      	bne.n	80045a6 <Dequeue_push_back+0x48>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <Dequeue_pop_front>:

uint8_t Dequeue_pop_front(Deque *dequeue) {
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  dequeue->length--;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 80045be:	1e5a      	subs	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0

  uint8_t res = dequeue->queue[dequeue->begin];
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	5cd3      	ldrb	r3, [r2, r3]
 80045d0:	73fb      	strb	r3, [r7, #15]
  dequeue->begin++;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
  if (dequeue->begin == MAX_DEQUEUE_SIZE) dequeue->begin = 0;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 80045e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045ea:	d103      	bne.n	80045f4 <Dequeue_pop_front+0x44>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c3 23e8 	str.w	r2, [r3, #1000]	; 0x3e8
  return res;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <Dequeue_push_front>:

void Dequeue_push_front(Deque *dequeue, uint8_t num) {
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
  dequeue->length++;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8c3 23f0 	str.w	r2, [r3, #1008]	; 0x3f0

  dequeue->begin = dequeue->begin == 0 ? MAX_DEQUEUE_SIZE - 1 : dequeue->begin - 1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d004      	beq.n	800462e <Dequeue_push_front+0x2e>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 800462a:	3b01      	subs	r3, #1
 800462c:	e001      	b.n	8004632 <Dequeue_push_front+0x32>
 800462e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	f8c2 33e8 	str.w	r3, [r2, #1000]	; 0x3e8
  dequeue->queue[dequeue->begin] = num;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	78f9      	ldrb	r1, [r7, #3]
 8004642:	54d1      	strb	r1, [r2, r3]
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
	...

08004650 <GpioDriver_init>:
// Created by crepusculumx on 2021/12/19.
//

#include "GpioDriver.h"

void GpioDriver_init(GpioDriver *gpio_driver, GPIO_TypeDef *GPIOx, uint16_t GPIO_pin) {
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	4613      	mov	r3, r2
 800465c:	80fb      	strh	r3, [r7, #6]
  gpio_driver->GPIOx = GPIOx;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	601a      	str	r2, [r3, #0]
  gpio_driver->GPIO_pin = GPIO_pin;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	88fa      	ldrh	r2, [r7, #6]
 8004668:	809a      	strh	r2, [r3, #4]

  //func
  gpio_driver->set_pin_set = GpioDriver_set_pin_set;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a04      	ldr	r2, [pc, #16]	; (8004680 <GpioDriver_init+0x30>)
 800466e:	609a      	str	r2, [r3, #8]
  gpio_driver->set_pin_reset = GpioDriver_set_pin_reset;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a04      	ldr	r2, [pc, #16]	; (8004684 <GpioDriver_init+0x34>)
 8004674:	60da      	str	r2, [r3, #12]
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr
 8004680:	08004689 	.word	0x08004689
 8004684:	080046af 	.word	0x080046af

08004688 <GpioDriver_set_pin_set>:

void GpioDriver_set_pin_set(GpioDriver *gpio_driver) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  gpio_driver->pin_state = GPIO_PIN_SET;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	719a      	strb	r2, [r3, #6]
  HAL_GPIO_WritePin(gpio_driver->GPIOx, gpio_driver->GPIO_pin, GPIO_PIN_SET);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	889b      	ldrh	r3, [r3, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	4619      	mov	r1, r3
 80046a2:	f7fd fbc1 	bl	8001e28 <HAL_GPIO_WritePin>
}
 80046a6:	bf00      	nop
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <GpioDriver_set_pin_reset>:

void GpioDriver_set_pin_reset(GpioDriver *gpio_driver) {
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  gpio_driver->pin_state = GPIO_PIN_RESET;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	719a      	strb	r2, [r3, #6]
  HAL_GPIO_WritePin(gpio_driver->GPIOx, gpio_driver->GPIO_pin, GPIO_PIN_RESET);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	889b      	ldrh	r3, [r3, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	4619      	mov	r1, r3
 80046c8:	f7fd fbae 	bl	8001e28 <HAL_GPIO_WritePin>
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <MotorController_init>:
#include "MotorController.h"

void MotorController_init(MotorController *motor_controller,
                          MotorDriver *motor_driver,
                          int control_rate,
                          double max_acc) {
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  motor_controller->motor_driver = motor_driver;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	601a      	str	r2, [r3, #0]
  motor_controller->control_rate = control_rate;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	671a      	str	r2, [r3, #112]	; 0x70
  motor_controller->max_acc = max_acc;
 80046ec:	68f9      	ldr	r1, [r7, #12]
 80046ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046f2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80046f6:	bf00      	nop
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <MotorController_set_target>:

void MotorController_set_target(MotorController *motor_controller, MotorState motor_state) {
 8004700:	b082      	sub	sp, #8
 8004702:	b4b0      	push	{r4, r5, r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	f107 0118 	add.w	r1, r7, #24
 800470e:	e881 000c 	stmia.w	r1, {r2, r3}
  motor_controller->tar_motor_state = motor_state;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8004718:	f107 0518 	add.w	r5, r7, #24
 800471c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800471e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004720:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	bcb0      	pop	{r4, r5, r7}
 8004730:	b002      	add	sp, #8
 8004732:	4770      	bx	lr

08004734 <MotorController_control_vel>:

/*
 * 根据tar_motor_state 和 lst_motor_state，将当前应该控制的状态写入cur_motor_state
 * 限制加速度
 */
void MotorController_control_vel(MotorController *motor_controller) {
 8004734:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004738:	b088      	sub	sp, #32
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  double vel = motor_controller->tar_motor_state.velocity;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8004744:	e9c7 2306 	strd	r2, r3, [r7, #24]
  // 加速
  if (vel > motor_controller->lst_motor_state.velocity) {
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800474e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004752:	f7fc f951 	bl	80009f8 <__aeabi_dcmpgt>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d02c      	beq.n	80047b6 <MotorController_control_vel+0x82>
    // 限制加速度
    double max_tar_vel =
        motor_controller->lst_motor_state.velocity + motor_controller->max_acc / motor_controller->control_rate;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476c:	4618      	mov	r0, r3
 800476e:	f7fb fe49 	bl	8000404 <__aeabi_i2d>
 8004772:	4602      	mov	r2, r0
 8004774:	460b      	mov	r3, r1
 8004776:	4640      	mov	r0, r8
 8004778:	4649      	mov	r1, r9
 800477a:	f7fb ffd7 	bl	800072c <__aeabi_ddiv>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
    double max_tar_vel =
 8004782:	4620      	mov	r0, r4
 8004784:	4629      	mov	r1, r5
 8004786:	f7fb fcf1 	bl	800016c <__adddf3>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    motor_controller->cur_motor_state.velocity = vel > max_tar_vel ? max_tar_vel : vel;
 8004792:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004796:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800479a:	f7fc f92d 	bl	80009f8 <__aeabi_dcmpgt>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d002      	beq.n	80047aa <MotorController_control_vel+0x76>
 80047a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a8:	e001      	b.n	80047ae <MotorController_control_vel+0x7a>
 80047aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  } else if (vel < motor_controller->lst_motor_state.velocity) {
    double min_tar_vel =
        motor_controller->lst_motor_state.velocity - motor_controller->max_acc / motor_controller->control_rate;
    motor_controller->cur_motor_state.velocity = vel < min_tar_vel ? min_tar_vel : vel;
  }
}
 80047b4:	e036      	b.n	8004824 <MotorController_control_vel+0xf0>
  } else if (vel < motor_controller->lst_motor_state.velocity) {
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80047bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80047c0:	f7fc f8fc 	bl	80009bc <__aeabi_dcmplt>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d100      	bne.n	80047cc <MotorController_control_vel+0x98>
}
 80047ca:	e02b      	b.n	8004824 <MotorController_control_vel+0xf0>
        motor_controller->lst_motor_state.velocity - motor_controller->max_acc / motor_controller->control_rate;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fb fe11 	bl	8000404 <__aeabi_i2d>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4640      	mov	r0, r8
 80047e8:	4649      	mov	r1, r9
 80047ea:	f7fb ff9f 	bl	800072c <__aeabi_ddiv>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
    double min_tar_vel =
 80047f2:	4620      	mov	r0, r4
 80047f4:	4629      	mov	r1, r5
 80047f6:	f7fb fcb7 	bl	8000168 <__aeabi_dsub>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    motor_controller->cur_motor_state.velocity = vel < min_tar_vel ? min_tar_vel : vel;
 8004802:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004806:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800480a:	f7fc f8d7 	bl	80009bc <__aeabi_dcmplt>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <MotorController_control_vel+0xe6>
 8004814:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004818:	e001      	b.n	800481e <MotorController_control_vel+0xea>
 800481a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8004824:	bf00      	nop
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800482e <MotorController_control>:

void MotorController_control(MotorController *motor_controller) {
 800482e:	b5b0      	push	{r4, r5, r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af02      	add	r7, sp, #8
 8004834:	6078      	str	r0, [r7, #4]
  // 速度环
  if (motor_controller->tar_motor_state.mode == 2) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483a:	2b02      	cmp	r3, #2
 800483c:	d142      	bne.n	80048c4 <MotorController_control+0x96>
    MotorController_control_vel(motor_controller);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff78 	bl	8004734 <MotorController_control_vel>
    // 根据cur_motor_state控制pwm
    if (motor_controller->cur_motor_state.velocity > 0) {
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	f7fc f8d1 	bl	80009f8 <__aeabi_dcmpgt>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <MotorController_control+0x44>
      MotorDriver_set_status(motor_controller->motor_driver, motor_controller->cur_motor_state.velocity, CW);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6819      	ldr	r1, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004866:	2000      	movs	r0, #0
 8004868:	9000      	str	r0, [sp, #0]
 800486a:	4608      	mov	r0, r1
 800486c:	f000 f854 	bl	8004918 <MotorDriver_set_status>
 8004870:	e028      	b.n	80048c4 <MotorController_control+0x96>
    } else if (motor_controller->cur_motor_state.velocity < 0) {
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	f7fc f89c 	bl	80009bc <__aeabi_dcmplt>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00f      	beq.n	80048aa <MotorController_control+0x7c>
      MotorDriver_set_status(motor_controller->motor_driver, -motor_controller->cur_motor_state.velocity, CCW);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6819      	ldr	r1, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004894:	4614      	mov	r4, r2
 8004896:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800489a:	2301      	movs	r3, #1
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	4622      	mov	r2, r4
 80048a0:	462b      	mov	r3, r5
 80048a2:	4608      	mov	r0, r1
 80048a4:	f000 f838 	bl	8004918 <MotorDriver_set_status>
 80048a8:	e00c      	b.n	80048c4 <MotorController_control+0x96>
    } else {
      //速度为0别切换方向
      MotorDriver_set_status(motor_controller->motor_driver, 0, motor_controller->motor_driver->dir);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6819      	ldr	r1, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	7e1b      	ldrb	r3, [r3, #24]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	f04f 0200 	mov.w	r2, #0
 80048ba:	f04f 0300 	mov.w	r3, #0
 80048be:	4608      	mov	r0, r1
 80048c0:	f000 f82a 	bl	8004918 <MotorDriver_set_status>
    }
  }

  motor_controller->lst_motor_state = motor_controller->cur_motor_state;
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f102 0408 	add.w	r4, r2, #8
 80048cc:	f103 0528 	add.w	r5, r3, #40	; 0x28
 80048d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80048d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bdb0      	pop	{r4, r5, r7, pc}

080048e4 <MotorDriver_init>:
#include "MotorDriver.h"

void MotorDriver_init(MotorDriver *motor_driver,
                      PwmDriver *PUL_pwm_driver,
                      GpioDriver *en_gpio_driver,
                      GpioDriver *dir_gpio_driver) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  motor_driver->PUL_pwm_driver = PUL_pwm_driver;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	601a      	str	r2, [r3, #0]
  motor_driver->en_gpio_driver = en_gpio_driver;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	605a      	str	r2, [r3, #4]
  motor_driver->dir_gpio_driver = dir_gpio_driver;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	609a      	str	r2, [r3, #8]

  // 使能 该驱动器reset是开启
  GpioDriver_set_pin_reset(motor_driver->en_gpio_driver);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fed0 	bl	80046ae <GpioDriver_set_pin_reset>
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
	...

08004918 <MotorDriver_set_status>:

void MotorDriver_set_status(MotorDriver *motor_driver, double speed, DIR dir) {
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	e9c7 2300 	strd	r2, r3, [r7]
  motor_driver->speed = speed;
 8004924:	68f9      	ldr	r1, [r7, #12]
 8004926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800492a:	e9c1 2304 	strd	r2, r3, [r1, #16]
  motor_driver->dir = dir;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004934:	761a      	strb	r2, [r3, #24]

  switch (dir) {
 8004936:	f897 3020 	ldrb.w	r3, [r7, #32]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <MotorDriver_set_status+0x2c>
 800493e:	2b01      	cmp	r3, #1
 8004940:	d008      	beq.n	8004954 <MotorDriver_set_status+0x3c>
    case CW:motor_driver->dir_gpio_driver->set_pin_set(motor_driver->dir_gpio_driver);
      break;
    case CCW:motor_driver->dir_gpio_driver->set_pin_reset(motor_driver->dir_gpio_driver);
      break;
    default:break;
 8004942:	e00f      	b.n	8004964 <MotorDriver_set_status+0x4c>
    case CW:motor_driver->dir_gpio_driver->set_pin_set(motor_driver->dir_gpio_driver);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	6892      	ldr	r2, [r2, #8]
 800494e:	4610      	mov	r0, r2
 8004950:	4798      	blx	r3
      break;
 8004952:	e007      	b.n	8004964 <MotorDriver_set_status+0x4c>
    case CCW:motor_driver->dir_gpio_driver->set_pin_reset(motor_driver->dir_gpio_driver);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	6892      	ldr	r2, [r2, #8]
 800495e:	4610      	mov	r0, r2
 8004960:	4798      	blx	r3
      break;
 8004962:	bf00      	nop
  }

  PwmDriver_set_pwm(motor_driver->PUL_pwm_driver, (int) (speed * 800 * 10), 0.5);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681c      	ldr	r4, [r3, #0]
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <MotorDriver_set_status+0x94>)
 800496e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004972:	f7fb fdb1 	bl	80004d8 <__aeabi_dmul>
 8004976:	4602      	mov	r2, r0
 8004978:	460b      	mov	r3, r1
 800497a:	4610      	mov	r0, r2
 800497c:	4619      	mov	r1, r3
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <MotorDriver_set_status+0x98>)
 8004984:	f7fb fda8 	bl	80004d8 <__aeabi_dmul>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	f7fc f852 	bl	8000a38 <__aeabi_d2iz>
 8004994:	4601      	mov	r1, r0
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <MotorDriver_set_status+0x9c>)
 800499c:	4620      	mov	r0, r4
 800499e:	f000 f83b 	bl	8004a18 <PwmDriver_set_pwm>
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd90      	pop	{r4, r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40890000 	.word	0x40890000
 80049b0:	40240000 	.word	0x40240000
 80049b4:	3fe00000 	.word	0x3fe00000

080049b8 <PwmDriver_init>:
void PwmDriver_init(PwmDriver *pwmDriver,
                    uint16_t clock_rate,
                    TIM_HandleTypeDef *htim,
                    uint32_t channel,
                    uint16_t prescaler,
                    uint64_t max_counter_priod) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	603b      	str	r3, [r7, #0]
 80049c4:	460b      	mov	r3, r1
 80049c6:	817b      	strh	r3, [r7, #10]
  // var
  pwmDriver->clock_rate = clock_rate;
 80049c8:	897a      	ldrh	r2, [r7, #10]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	62da      	str	r2, [r3, #44]	; 0x2c
  pwmDriver->htim = htim;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	611a      	str	r2, [r3, #16]
  pwmDriver->channel = channel;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	615a      	str	r2, [r3, #20]
  pwmDriver->prescaler = prescaler;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8b3a      	ldrh	r2, [r7, #24]
 80049de:	831a      	strh	r2, [r3, #24]
  pwmDriver->max_counter_priod = max_counter_priod;
 80049e0:	68f9      	ldr	r1, [r7, #12]
 80049e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049e6:	e9c1 2308 	strd	r2, r3, [r1, #32]

  // start
  PwmDriver_start(pwmDriver);
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 f804 	bl	80049f8 <PwmDriver_start>
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <PwmDriver_start>:

void PwmDriver_start(PwmDriver *pwm_driver) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Start(pwm_driver->htim, pwm_driver->channel);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f7fd ff30 	bl	8002870 <HAL_TIM_PWM_Start>
}
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <PwmDriver_set_pwm>:

void PwmDriver_stop(PwmDriver *pwm_driver) {
  HAL_TIM_PWM_Stop(pwm_driver->htim, pwm_driver->channel);
}

void PwmDriver_set_pwm(PwmDriver *pwm_driver, int rate, double duty_ratio) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	e9c7 2300 	strd	r2, r3, [r7]
  pwm_driver->rate = rate;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	601a      	str	r2, [r3, #0]
  pwm_driver->duty_ratio = duty_ratio;
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a32:	e9c1 2302 	strd	r2, r3, [r1, #8]

  // 特判
  if (rate == 0) {
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d123      	bne.n	8004a84 <PwmDriver_set_pwm+0x6c>
      __HAL_TIM_SetCompare(pwm_driver->htim, pwm_driver->channel, 0);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d105      	bne.n	8004a50 <PwmDriver_set_pwm+0x38>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	635a      	str	r2, [r3, #52]	; 0x34
    return;
 8004a4e:	e0a7      	b.n	8004ba0 <PwmDriver_set_pwm+0x188>
      __HAL_TIM_SetCompare(pwm_driver->htim, pwm_driver->channel, 0);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d105      	bne.n	8004a64 <PwmDriver_set_pwm+0x4c>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	6393      	str	r3, [r2, #56]	; 0x38
    return;
 8004a62:	e09d      	b.n	8004ba0 <PwmDriver_set_pwm+0x188>
      __HAL_TIM_SetCompare(pwm_driver->htim, pwm_driver->channel, 0);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d105      	bne.n	8004a78 <PwmDriver_set_pwm+0x60>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	63d3      	str	r3, [r2, #60]	; 0x3c
    return;
 8004a76:	e093      	b.n	8004ba0 <PwmDriver_set_pwm+0x188>
      __HAL_TIM_SetCompare(pwm_driver->htim, pwm_driver->channel, 0);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 8004a82:	e08d      	b.n	8004ba0 <PwmDriver_set_pwm+0x188>
  }

  // 计数器，判断是否能生成该频率的pwm
  uint64_t counter_priod = pwm_driver->clock_rate * 1000000 / pwm_driver->prescaler / rate;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	4a47      	ldr	r2, [pc, #284]	; (8004ba8 <PwmDriver_set_pwm+0x190>)
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	8b12      	ldrh	r2, [r2, #24]
 8004a92:	fb93 f2f2 	sdiv	r2, r3, r2
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8004aa2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (counter_priod > pwm_driver->max_counter_priod) {
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004aac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ab0:	4299      	cmp	r1, r3
 8004ab2:	bf08      	it	eq
 8004ab4:	4290      	cmpeq	r0, r2
 8004ab6:	d372      	bcc.n	8004b9e <PwmDriver_set_pwm+0x186>
    return;
  }

  pwm_driver->counter_priod = counter_priod;
 8004ab8:	8a3a      	ldrh	r2, [r7, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	851a      	strh	r2, [r3, #40]	; 0x28
  __HAL_TIM_SET_AUTORELOAD(pwm_driver->htim, counter_priod);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SetCompare(pwm_driver->htim,
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d115      	bne.n	8004b04 <PwmDriver_set_pwm+0xec>
 8004ad8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004adc:	f7fb fcc6 	bl	800046c <__aeabi_ul2d>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004ae6:	f7fb fcf7 	bl	80004d8 <__aeabi_dmul>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4610      	mov	r0, r2
 8004af0:	4619      	mov	r1, r3
 8004af2:	f7fb ffc9 	bl	8000a88 <__aeabi_d2uiz>
 8004af6:	4603      	mov	r3, r0
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34
 8004b02:	e04d      	b.n	8004ba0 <PwmDriver_set_pwm+0x188>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	d116      	bne.n	8004b3a <PwmDriver_set_pwm+0x122>
 8004b0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b10:	f7fb fcac 	bl	800046c <__aeabi_ul2d>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b1a:	f7fb fcdd 	bl	80004d8 <__aeabi_dmul>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4610      	mov	r0, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	f7fb ffaf 	bl	8000a88 <__aeabi_d2uiz>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	b299      	uxth	r1, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	460b      	mov	r3, r1
 8004b36:	6393      	str	r3, [r2, #56]	; 0x38
 8004b38:	e032      	b.n	8004ba0 <PwmDriver_set_pwm+0x188>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d116      	bne.n	8004b70 <PwmDriver_set_pwm+0x158>
 8004b42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b46:	f7fb fc91 	bl	800046c <__aeabi_ul2d>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b50:	f7fb fcc2 	bl	80004d8 <__aeabi_dmul>
 8004b54:	4602      	mov	r2, r0
 8004b56:	460b      	mov	r3, r1
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	f7fb ff94 	bl	8000a88 <__aeabi_d2uiz>
 8004b60:	4603      	mov	r3, r0
 8004b62:	b299      	uxth	r1, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004b6e:	e017      	b.n	8004ba0 <PwmDriver_set_pwm+0x188>
 8004b70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b74:	f7fb fc7a 	bl	800046c <__aeabi_ul2d>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004b7e:	f7fb fcab 	bl	80004d8 <__aeabi_dmul>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	f7fb ff7d 	bl	8000a88 <__aeabi_d2uiz>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	b299      	uxth	r1, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8004b9c:	e000      	b.n	8004ba0 <PwmDriver_set_pwm+0x188>
    return;
 8004b9e:	bf00      	nop
                         pwm_driver->channel,
                         (uint16_t) ((double) counter_priod * pwm_driver->duty_ratio));
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	000f4240 	.word	0x000f4240

08004bac <data_int8_to_int16>:
// Created by crepusculumx on 2021/12/21.
//

#include "TypeChanger.h"

int16_t data_int8_to_int16(const uint8_t data[], size_t *it) {
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint16_t res = (int16_t) data[*it + 1];
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	81fb      	strh	r3, [r7, #14]
  res = (res << 8) + (int16_t) data[*it];
 8004bc4:	89fb      	ldrh	r3, [r7, #14]
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	440b      	add	r3, r1
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	81fb      	strh	r3, [r7, #14]
  *it += 2;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	1c9a      	adds	r2, r3, #2
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	601a      	str	r2, [r3, #0]
  return (int16_t) res;
 8004be4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr
	...

08004bf4 <__errno>:
 8004bf4:	4b01      	ldr	r3, [pc, #4]	; (8004bfc <__errno+0x8>)
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	2000000c 	.word	0x2000000c

08004c00 <__libc_init_array>:
 8004c00:	b570      	push	{r4, r5, r6, lr}
 8004c02:	2600      	movs	r6, #0
 8004c04:	4d0c      	ldr	r5, [pc, #48]	; (8004c38 <__libc_init_array+0x38>)
 8004c06:	4c0d      	ldr	r4, [pc, #52]	; (8004c3c <__libc_init_array+0x3c>)
 8004c08:	1b64      	subs	r4, r4, r5
 8004c0a:	10a4      	asrs	r4, r4, #2
 8004c0c:	42a6      	cmp	r6, r4
 8004c0e:	d109      	bne.n	8004c24 <__libc_init_array+0x24>
 8004c10:	f002 fd84 	bl	800771c <_init>
 8004c14:	2600      	movs	r6, #0
 8004c16:	4d0a      	ldr	r5, [pc, #40]	; (8004c40 <__libc_init_array+0x40>)
 8004c18:	4c0a      	ldr	r4, [pc, #40]	; (8004c44 <__libc_init_array+0x44>)
 8004c1a:	1b64      	subs	r4, r4, r5
 8004c1c:	10a4      	asrs	r4, r4, #2
 8004c1e:	42a6      	cmp	r6, r4
 8004c20:	d105      	bne.n	8004c2e <__libc_init_array+0x2e>
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c28:	4798      	blx	r3
 8004c2a:	3601      	adds	r6, #1
 8004c2c:	e7ee      	b.n	8004c0c <__libc_init_array+0xc>
 8004c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c32:	4798      	blx	r3
 8004c34:	3601      	adds	r6, #1
 8004c36:	e7f2      	b.n	8004c1e <__libc_init_array+0x1e>
 8004c38:	08007b5c 	.word	0x08007b5c
 8004c3c:	08007b5c 	.word	0x08007b5c
 8004c40:	08007b5c 	.word	0x08007b5c
 8004c44:	08007b60 	.word	0x08007b60

08004c48 <memset>:
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4402      	add	r2, r0
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d100      	bne.n	8004c52 <memset+0xa>
 8004c50:	4770      	bx	lr
 8004c52:	f803 1b01 	strb.w	r1, [r3], #1
 8004c56:	e7f9      	b.n	8004c4c <memset+0x4>

08004c58 <__cvt>:
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c5e:	461f      	mov	r7, r3
 8004c60:	bfbb      	ittet	lt
 8004c62:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004c66:	461f      	movlt	r7, r3
 8004c68:	2300      	movge	r3, #0
 8004c6a:	232d      	movlt	r3, #45	; 0x2d
 8004c6c:	b088      	sub	sp, #32
 8004c6e:	4614      	mov	r4, r2
 8004c70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c72:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004c74:	7013      	strb	r3, [r2, #0]
 8004c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c78:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004c7c:	f023 0820 	bic.w	r8, r3, #32
 8004c80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c84:	d005      	beq.n	8004c92 <__cvt+0x3a>
 8004c86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c8a:	d100      	bne.n	8004c8e <__cvt+0x36>
 8004c8c:	3501      	adds	r5, #1
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e000      	b.n	8004c94 <__cvt+0x3c>
 8004c92:	2303      	movs	r3, #3
 8004c94:	aa07      	add	r2, sp, #28
 8004c96:	9204      	str	r2, [sp, #16]
 8004c98:	aa06      	add	r2, sp, #24
 8004c9a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004c9e:	e9cd 3500 	strd	r3, r5, [sp]
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	463b      	mov	r3, r7
 8004ca6:	f000 fe13 	bl	80058d0 <_dtoa_r>
 8004caa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004cae:	4606      	mov	r6, r0
 8004cb0:	d102      	bne.n	8004cb8 <__cvt+0x60>
 8004cb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004cb4:	07db      	lsls	r3, r3, #31
 8004cb6:	d522      	bpl.n	8004cfe <__cvt+0xa6>
 8004cb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cbc:	eb06 0905 	add.w	r9, r6, r5
 8004cc0:	d110      	bne.n	8004ce4 <__cvt+0x8c>
 8004cc2:	7833      	ldrb	r3, [r6, #0]
 8004cc4:	2b30      	cmp	r3, #48	; 0x30
 8004cc6:	d10a      	bne.n	8004cde <__cvt+0x86>
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2300      	movs	r3, #0
 8004ccc:	4620      	mov	r0, r4
 8004cce:	4639      	mov	r1, r7
 8004cd0:	f7fb fe6a 	bl	80009a8 <__aeabi_dcmpeq>
 8004cd4:	b918      	cbnz	r0, 8004cde <__cvt+0x86>
 8004cd6:	f1c5 0501 	rsb	r5, r5, #1
 8004cda:	f8ca 5000 	str.w	r5, [sl]
 8004cde:	f8da 3000 	ldr.w	r3, [sl]
 8004ce2:	4499      	add	r9, r3
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	4620      	mov	r0, r4
 8004cea:	4639      	mov	r1, r7
 8004cec:	f7fb fe5c 	bl	80009a8 <__aeabi_dcmpeq>
 8004cf0:	b108      	cbz	r0, 8004cf6 <__cvt+0x9e>
 8004cf2:	f8cd 901c 	str.w	r9, [sp, #28]
 8004cf6:	2230      	movs	r2, #48	; 0x30
 8004cf8:	9b07      	ldr	r3, [sp, #28]
 8004cfa:	454b      	cmp	r3, r9
 8004cfc:	d307      	bcc.n	8004d0e <__cvt+0xb6>
 8004cfe:	4630      	mov	r0, r6
 8004d00:	9b07      	ldr	r3, [sp, #28]
 8004d02:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d04:	1b9b      	subs	r3, r3, r6
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	b008      	add	sp, #32
 8004d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d0e:	1c59      	adds	r1, r3, #1
 8004d10:	9107      	str	r1, [sp, #28]
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	e7f0      	b.n	8004cf8 <__cvt+0xa0>

08004d16 <__exponent>:
 8004d16:	4603      	mov	r3, r0
 8004d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d1a:	2900      	cmp	r1, #0
 8004d1c:	f803 2b02 	strb.w	r2, [r3], #2
 8004d20:	bfb6      	itet	lt
 8004d22:	222d      	movlt	r2, #45	; 0x2d
 8004d24:	222b      	movge	r2, #43	; 0x2b
 8004d26:	4249      	neglt	r1, r1
 8004d28:	2909      	cmp	r1, #9
 8004d2a:	7042      	strb	r2, [r0, #1]
 8004d2c:	dd2b      	ble.n	8004d86 <__exponent+0x70>
 8004d2e:	f10d 0407 	add.w	r4, sp, #7
 8004d32:	46a4      	mov	ip, r4
 8004d34:	270a      	movs	r7, #10
 8004d36:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d3a:	460a      	mov	r2, r1
 8004d3c:	46a6      	mov	lr, r4
 8004d3e:	fb07 1516 	mls	r5, r7, r6, r1
 8004d42:	2a63      	cmp	r2, #99	; 0x63
 8004d44:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004d48:	4631      	mov	r1, r6
 8004d4a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004d4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d52:	dcf0      	bgt.n	8004d36 <__exponent+0x20>
 8004d54:	3130      	adds	r1, #48	; 0x30
 8004d56:	f1ae 0502 	sub.w	r5, lr, #2
 8004d5a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d5e:	4629      	mov	r1, r5
 8004d60:	1c44      	adds	r4, r0, #1
 8004d62:	4561      	cmp	r1, ip
 8004d64:	d30a      	bcc.n	8004d7c <__exponent+0x66>
 8004d66:	f10d 0209 	add.w	r2, sp, #9
 8004d6a:	eba2 020e 	sub.w	r2, r2, lr
 8004d6e:	4565      	cmp	r5, ip
 8004d70:	bf88      	it	hi
 8004d72:	2200      	movhi	r2, #0
 8004d74:	4413      	add	r3, r2
 8004d76:	1a18      	subs	r0, r3, r0
 8004d78:	b003      	add	sp, #12
 8004d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d7c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d80:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d84:	e7ed      	b.n	8004d62 <__exponent+0x4c>
 8004d86:	2330      	movs	r3, #48	; 0x30
 8004d88:	3130      	adds	r1, #48	; 0x30
 8004d8a:	7083      	strb	r3, [r0, #2]
 8004d8c:	70c1      	strb	r1, [r0, #3]
 8004d8e:	1d03      	adds	r3, r0, #4
 8004d90:	e7f1      	b.n	8004d76 <__exponent+0x60>
	...

08004d94 <_printf_float>:
 8004d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d98:	b091      	sub	sp, #68	; 0x44
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004da0:	4616      	mov	r6, r2
 8004da2:	461f      	mov	r7, r3
 8004da4:	4605      	mov	r5, r0
 8004da6:	f001 fd39 	bl	800681c <_localeconv_r>
 8004daa:	6803      	ldr	r3, [r0, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	9309      	str	r3, [sp, #36]	; 0x24
 8004db0:	f7fb f9ce 	bl	8000150 <strlen>
 8004db4:	2300      	movs	r3, #0
 8004db6:	930e      	str	r3, [sp, #56]	; 0x38
 8004db8:	f8d8 3000 	ldr.w	r3, [r8]
 8004dbc:	900a      	str	r0, [sp, #40]	; 0x28
 8004dbe:	3307      	adds	r3, #7
 8004dc0:	f023 0307 	bic.w	r3, r3, #7
 8004dc4:	f103 0208 	add.w	r2, r3, #8
 8004dc8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004dcc:	f8d4 b000 	ldr.w	fp, [r4]
 8004dd0:	f8c8 2000 	str.w	r2, [r8]
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ddc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004de0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004de4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dea:	4640      	mov	r0, r8
 8004dec:	4b9c      	ldr	r3, [pc, #624]	; (8005060 <_printf_float+0x2cc>)
 8004dee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004df0:	f7fb fe0c 	bl	8000a0c <__aeabi_dcmpun>
 8004df4:	bb70      	cbnz	r0, 8004e54 <_printf_float+0xc0>
 8004df6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dfa:	4640      	mov	r0, r8
 8004dfc:	4b98      	ldr	r3, [pc, #608]	; (8005060 <_printf_float+0x2cc>)
 8004dfe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e00:	f7fb fde6 	bl	80009d0 <__aeabi_dcmple>
 8004e04:	bb30      	cbnz	r0, 8004e54 <_printf_float+0xc0>
 8004e06:	2200      	movs	r2, #0
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	f7fb fdd5 	bl	80009bc <__aeabi_dcmplt>
 8004e12:	b110      	cbz	r0, 8004e1a <_printf_float+0x86>
 8004e14:	232d      	movs	r3, #45	; 0x2d
 8004e16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e1a:	4b92      	ldr	r3, [pc, #584]	; (8005064 <_printf_float+0x2d0>)
 8004e1c:	4892      	ldr	r0, [pc, #584]	; (8005068 <_printf_float+0x2d4>)
 8004e1e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004e22:	bf94      	ite	ls
 8004e24:	4698      	movls	r8, r3
 8004e26:	4680      	movhi	r8, r0
 8004e28:	2303      	movs	r3, #3
 8004e2a:	f04f 0a00 	mov.w	sl, #0
 8004e2e:	6123      	str	r3, [r4, #16]
 8004e30:	f02b 0304 	bic.w	r3, fp, #4
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	4633      	mov	r3, r6
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	9700      	str	r7, [sp, #0]
 8004e3e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004e40:	f000 f9d4 	bl	80051ec <_printf_common>
 8004e44:	3001      	adds	r0, #1
 8004e46:	f040 8090 	bne.w	8004f6a <_printf_float+0x1d6>
 8004e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e4e:	b011      	add	sp, #68	; 0x44
 8004e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e54:	4642      	mov	r2, r8
 8004e56:	4653      	mov	r3, sl
 8004e58:	4640      	mov	r0, r8
 8004e5a:	4651      	mov	r1, sl
 8004e5c:	f7fb fdd6 	bl	8000a0c <__aeabi_dcmpun>
 8004e60:	b148      	cbz	r0, 8004e76 <_printf_float+0xe2>
 8004e62:	f1ba 0f00 	cmp.w	sl, #0
 8004e66:	bfb8      	it	lt
 8004e68:	232d      	movlt	r3, #45	; 0x2d
 8004e6a:	4880      	ldr	r0, [pc, #512]	; (800506c <_printf_float+0x2d8>)
 8004e6c:	bfb8      	it	lt
 8004e6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e72:	4b7f      	ldr	r3, [pc, #508]	; (8005070 <_printf_float+0x2dc>)
 8004e74:	e7d3      	b.n	8004e1e <_printf_float+0x8a>
 8004e76:	6863      	ldr	r3, [r4, #4]
 8004e78:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	d142      	bne.n	8004f06 <_printf_float+0x172>
 8004e80:	2306      	movs	r3, #6
 8004e82:	6063      	str	r3, [r4, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	9206      	str	r2, [sp, #24]
 8004e88:	aa0e      	add	r2, sp, #56	; 0x38
 8004e8a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004e8e:	aa0d      	add	r2, sp, #52	; 0x34
 8004e90:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004e94:	9203      	str	r2, [sp, #12]
 8004e96:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004e9a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	6863      	ldr	r3, [r4, #4]
 8004ea2:	4642      	mov	r2, r8
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	4653      	mov	r3, sl
 8004eaa:	910b      	str	r1, [sp, #44]	; 0x2c
 8004eac:	f7ff fed4 	bl	8004c58 <__cvt>
 8004eb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eb2:	4680      	mov	r8, r0
 8004eb4:	2947      	cmp	r1, #71	; 0x47
 8004eb6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004eb8:	d108      	bne.n	8004ecc <_printf_float+0x138>
 8004eba:	1cc8      	adds	r0, r1, #3
 8004ebc:	db02      	blt.n	8004ec4 <_printf_float+0x130>
 8004ebe:	6863      	ldr	r3, [r4, #4]
 8004ec0:	4299      	cmp	r1, r3
 8004ec2:	dd40      	ble.n	8004f46 <_printf_float+0x1b2>
 8004ec4:	f1a9 0902 	sub.w	r9, r9, #2
 8004ec8:	fa5f f989 	uxtb.w	r9, r9
 8004ecc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ed0:	d81f      	bhi.n	8004f12 <_printf_float+0x17e>
 8004ed2:	464a      	mov	r2, r9
 8004ed4:	3901      	subs	r1, #1
 8004ed6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004eda:	910d      	str	r1, [sp, #52]	; 0x34
 8004edc:	f7ff ff1b 	bl	8004d16 <__exponent>
 8004ee0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ee2:	4682      	mov	sl, r0
 8004ee4:	1813      	adds	r3, r2, r0
 8004ee6:	2a01      	cmp	r2, #1
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	dc02      	bgt.n	8004ef2 <_printf_float+0x15e>
 8004eec:	6822      	ldr	r2, [r4, #0]
 8004eee:	07d2      	lsls	r2, r2, #31
 8004ef0:	d501      	bpl.n	8004ef6 <_printf_float+0x162>
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	6123      	str	r3, [r4, #16]
 8004ef6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d09b      	beq.n	8004e36 <_printf_float+0xa2>
 8004efe:	232d      	movs	r3, #45	; 0x2d
 8004f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f04:	e797      	b.n	8004e36 <_printf_float+0xa2>
 8004f06:	2947      	cmp	r1, #71	; 0x47
 8004f08:	d1bc      	bne.n	8004e84 <_printf_float+0xf0>
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1ba      	bne.n	8004e84 <_printf_float+0xf0>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e7b7      	b.n	8004e82 <_printf_float+0xee>
 8004f12:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004f16:	d118      	bne.n	8004f4a <_printf_float+0x1b6>
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	6863      	ldr	r3, [r4, #4]
 8004f1c:	dd0b      	ble.n	8004f36 <_printf_float+0x1a2>
 8004f1e:	6121      	str	r1, [r4, #16]
 8004f20:	b913      	cbnz	r3, 8004f28 <_printf_float+0x194>
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	07d0      	lsls	r0, r2, #31
 8004f26:	d502      	bpl.n	8004f2e <_printf_float+0x19a>
 8004f28:	3301      	adds	r3, #1
 8004f2a:	440b      	add	r3, r1
 8004f2c:	6123      	str	r3, [r4, #16]
 8004f2e:	f04f 0a00 	mov.w	sl, #0
 8004f32:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f34:	e7df      	b.n	8004ef6 <_printf_float+0x162>
 8004f36:	b913      	cbnz	r3, 8004f3e <_printf_float+0x1aa>
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	07d2      	lsls	r2, r2, #31
 8004f3c:	d501      	bpl.n	8004f42 <_printf_float+0x1ae>
 8004f3e:	3302      	adds	r3, #2
 8004f40:	e7f4      	b.n	8004f2c <_printf_float+0x198>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e7f2      	b.n	8004f2c <_printf_float+0x198>
 8004f46:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004f4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f4c:	4299      	cmp	r1, r3
 8004f4e:	db05      	blt.n	8004f5c <_printf_float+0x1c8>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	6121      	str	r1, [r4, #16]
 8004f54:	07d8      	lsls	r0, r3, #31
 8004f56:	d5ea      	bpl.n	8004f2e <_printf_float+0x19a>
 8004f58:	1c4b      	adds	r3, r1, #1
 8004f5a:	e7e7      	b.n	8004f2c <_printf_float+0x198>
 8004f5c:	2900      	cmp	r1, #0
 8004f5e:	bfcc      	ite	gt
 8004f60:	2201      	movgt	r2, #1
 8004f62:	f1c1 0202 	rsble	r2, r1, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	e7e0      	b.n	8004f2c <_printf_float+0x198>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	055a      	lsls	r2, r3, #21
 8004f6e:	d407      	bmi.n	8004f80 <_printf_float+0x1ec>
 8004f70:	6923      	ldr	r3, [r4, #16]
 8004f72:	4642      	mov	r2, r8
 8004f74:	4631      	mov	r1, r6
 8004f76:	4628      	mov	r0, r5
 8004f78:	47b8      	blx	r7
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d12b      	bne.n	8004fd6 <_printf_float+0x242>
 8004f7e:	e764      	b.n	8004e4a <_printf_float+0xb6>
 8004f80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f84:	f240 80dd 	bls.w	8005142 <_printf_float+0x3ae>
 8004f88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f7fb fd0a 	bl	80009a8 <__aeabi_dcmpeq>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	d033      	beq.n	8005000 <_printf_float+0x26c>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	4a35      	ldr	r2, [pc, #212]	; (8005074 <_printf_float+0x2e0>)
 8004fa0:	47b8      	blx	r7
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	f43f af51 	beq.w	8004e4a <_printf_float+0xb6>
 8004fa8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fac:	429a      	cmp	r2, r3
 8004fae:	db02      	blt.n	8004fb6 <_printf_float+0x222>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	07d8      	lsls	r0, r3, #31
 8004fb4:	d50f      	bpl.n	8004fd6 <_printf_float+0x242>
 8004fb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fba:	4631      	mov	r1, r6
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	47b8      	blx	r7
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	f43f af42 	beq.w	8004e4a <_printf_float+0xb6>
 8004fc6:	f04f 0800 	mov.w	r8, #0
 8004fca:	f104 091a 	add.w	r9, r4, #26
 8004fce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	4543      	cmp	r3, r8
 8004fd4:	dc09      	bgt.n	8004fea <_printf_float+0x256>
 8004fd6:	6823      	ldr	r3, [r4, #0]
 8004fd8:	079b      	lsls	r3, r3, #30
 8004fda:	f100 8102 	bmi.w	80051e2 <_printf_float+0x44e>
 8004fde:	68e0      	ldr	r0, [r4, #12]
 8004fe0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fe2:	4298      	cmp	r0, r3
 8004fe4:	bfb8      	it	lt
 8004fe6:	4618      	movlt	r0, r3
 8004fe8:	e731      	b.n	8004e4e <_printf_float+0xba>
 8004fea:	2301      	movs	r3, #1
 8004fec:	464a      	mov	r2, r9
 8004fee:	4631      	mov	r1, r6
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	47b8      	blx	r7
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	f43f af28 	beq.w	8004e4a <_printf_float+0xb6>
 8004ffa:	f108 0801 	add.w	r8, r8, #1
 8004ffe:	e7e6      	b.n	8004fce <_printf_float+0x23a>
 8005000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005002:	2b00      	cmp	r3, #0
 8005004:	dc38      	bgt.n	8005078 <_printf_float+0x2e4>
 8005006:	2301      	movs	r3, #1
 8005008:	4631      	mov	r1, r6
 800500a:	4628      	mov	r0, r5
 800500c:	4a19      	ldr	r2, [pc, #100]	; (8005074 <_printf_float+0x2e0>)
 800500e:	47b8      	blx	r7
 8005010:	3001      	adds	r0, #1
 8005012:	f43f af1a 	beq.w	8004e4a <_printf_float+0xb6>
 8005016:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800501a:	4313      	orrs	r3, r2
 800501c:	d102      	bne.n	8005024 <_printf_float+0x290>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	07d9      	lsls	r1, r3, #31
 8005022:	d5d8      	bpl.n	8004fd6 <_printf_float+0x242>
 8005024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005028:	4631      	mov	r1, r6
 800502a:	4628      	mov	r0, r5
 800502c:	47b8      	blx	r7
 800502e:	3001      	adds	r0, #1
 8005030:	f43f af0b 	beq.w	8004e4a <_printf_float+0xb6>
 8005034:	f04f 0900 	mov.w	r9, #0
 8005038:	f104 0a1a 	add.w	sl, r4, #26
 800503c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800503e:	425b      	negs	r3, r3
 8005040:	454b      	cmp	r3, r9
 8005042:	dc01      	bgt.n	8005048 <_printf_float+0x2b4>
 8005044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005046:	e794      	b.n	8004f72 <_printf_float+0x1de>
 8005048:	2301      	movs	r3, #1
 800504a:	4652      	mov	r2, sl
 800504c:	4631      	mov	r1, r6
 800504e:	4628      	mov	r0, r5
 8005050:	47b8      	blx	r7
 8005052:	3001      	adds	r0, #1
 8005054:	f43f aef9 	beq.w	8004e4a <_printf_float+0xb6>
 8005058:	f109 0901 	add.w	r9, r9, #1
 800505c:	e7ee      	b.n	800503c <_printf_float+0x2a8>
 800505e:	bf00      	nop
 8005060:	7fefffff 	.word	0x7fefffff
 8005064:	0800777c 	.word	0x0800777c
 8005068:	08007780 	.word	0x08007780
 800506c:	08007788 	.word	0x08007788
 8005070:	08007784 	.word	0x08007784
 8005074:	0800778c 	.word	0x0800778c
 8005078:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800507a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800507c:	429a      	cmp	r2, r3
 800507e:	bfa8      	it	ge
 8005080:	461a      	movge	r2, r3
 8005082:	2a00      	cmp	r2, #0
 8005084:	4691      	mov	r9, r2
 8005086:	dc37      	bgt.n	80050f8 <_printf_float+0x364>
 8005088:	f04f 0b00 	mov.w	fp, #0
 800508c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005090:	f104 021a 	add.w	r2, r4, #26
 8005094:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005098:	ebaa 0309 	sub.w	r3, sl, r9
 800509c:	455b      	cmp	r3, fp
 800509e:	dc33      	bgt.n	8005108 <_printf_float+0x374>
 80050a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050a4:	429a      	cmp	r2, r3
 80050a6:	db3b      	blt.n	8005120 <_printf_float+0x38c>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	07da      	lsls	r2, r3, #31
 80050ac:	d438      	bmi.n	8005120 <_printf_float+0x38c>
 80050ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050b2:	eba2 030a 	sub.w	r3, r2, sl
 80050b6:	eba2 0901 	sub.w	r9, r2, r1
 80050ba:	4599      	cmp	r9, r3
 80050bc:	bfa8      	it	ge
 80050be:	4699      	movge	r9, r3
 80050c0:	f1b9 0f00 	cmp.w	r9, #0
 80050c4:	dc34      	bgt.n	8005130 <_printf_float+0x39c>
 80050c6:	f04f 0800 	mov.w	r8, #0
 80050ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050ce:	f104 0a1a 	add.w	sl, r4, #26
 80050d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	eba3 0309 	sub.w	r3, r3, r9
 80050dc:	4543      	cmp	r3, r8
 80050de:	f77f af7a 	ble.w	8004fd6 <_printf_float+0x242>
 80050e2:	2301      	movs	r3, #1
 80050e4:	4652      	mov	r2, sl
 80050e6:	4631      	mov	r1, r6
 80050e8:	4628      	mov	r0, r5
 80050ea:	47b8      	blx	r7
 80050ec:	3001      	adds	r0, #1
 80050ee:	f43f aeac 	beq.w	8004e4a <_printf_float+0xb6>
 80050f2:	f108 0801 	add.w	r8, r8, #1
 80050f6:	e7ec      	b.n	80050d2 <_printf_float+0x33e>
 80050f8:	4613      	mov	r3, r2
 80050fa:	4631      	mov	r1, r6
 80050fc:	4642      	mov	r2, r8
 80050fe:	4628      	mov	r0, r5
 8005100:	47b8      	blx	r7
 8005102:	3001      	adds	r0, #1
 8005104:	d1c0      	bne.n	8005088 <_printf_float+0x2f4>
 8005106:	e6a0      	b.n	8004e4a <_printf_float+0xb6>
 8005108:	2301      	movs	r3, #1
 800510a:	4631      	mov	r1, r6
 800510c:	4628      	mov	r0, r5
 800510e:	920b      	str	r2, [sp, #44]	; 0x2c
 8005110:	47b8      	blx	r7
 8005112:	3001      	adds	r0, #1
 8005114:	f43f ae99 	beq.w	8004e4a <_printf_float+0xb6>
 8005118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800511a:	f10b 0b01 	add.w	fp, fp, #1
 800511e:	e7b9      	b.n	8005094 <_printf_float+0x300>
 8005120:	4631      	mov	r1, r6
 8005122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005126:	4628      	mov	r0, r5
 8005128:	47b8      	blx	r7
 800512a:	3001      	adds	r0, #1
 800512c:	d1bf      	bne.n	80050ae <_printf_float+0x31a>
 800512e:	e68c      	b.n	8004e4a <_printf_float+0xb6>
 8005130:	464b      	mov	r3, r9
 8005132:	4631      	mov	r1, r6
 8005134:	4628      	mov	r0, r5
 8005136:	eb08 020a 	add.w	r2, r8, sl
 800513a:	47b8      	blx	r7
 800513c:	3001      	adds	r0, #1
 800513e:	d1c2      	bne.n	80050c6 <_printf_float+0x332>
 8005140:	e683      	b.n	8004e4a <_printf_float+0xb6>
 8005142:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005144:	2a01      	cmp	r2, #1
 8005146:	dc01      	bgt.n	800514c <_printf_float+0x3b8>
 8005148:	07db      	lsls	r3, r3, #31
 800514a:	d537      	bpl.n	80051bc <_printf_float+0x428>
 800514c:	2301      	movs	r3, #1
 800514e:	4642      	mov	r2, r8
 8005150:	4631      	mov	r1, r6
 8005152:	4628      	mov	r0, r5
 8005154:	47b8      	blx	r7
 8005156:	3001      	adds	r0, #1
 8005158:	f43f ae77 	beq.w	8004e4a <_printf_float+0xb6>
 800515c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005160:	4631      	mov	r1, r6
 8005162:	4628      	mov	r0, r5
 8005164:	47b8      	blx	r7
 8005166:	3001      	adds	r0, #1
 8005168:	f43f ae6f 	beq.w	8004e4a <_printf_float+0xb6>
 800516c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005170:	2200      	movs	r2, #0
 8005172:	2300      	movs	r3, #0
 8005174:	f7fb fc18 	bl	80009a8 <__aeabi_dcmpeq>
 8005178:	b9d8      	cbnz	r0, 80051b2 <_printf_float+0x41e>
 800517a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800517c:	f108 0201 	add.w	r2, r8, #1
 8005180:	3b01      	subs	r3, #1
 8005182:	4631      	mov	r1, r6
 8005184:	4628      	mov	r0, r5
 8005186:	47b8      	blx	r7
 8005188:	3001      	adds	r0, #1
 800518a:	d10e      	bne.n	80051aa <_printf_float+0x416>
 800518c:	e65d      	b.n	8004e4a <_printf_float+0xb6>
 800518e:	2301      	movs	r3, #1
 8005190:	464a      	mov	r2, r9
 8005192:	4631      	mov	r1, r6
 8005194:	4628      	mov	r0, r5
 8005196:	47b8      	blx	r7
 8005198:	3001      	adds	r0, #1
 800519a:	f43f ae56 	beq.w	8004e4a <_printf_float+0xb6>
 800519e:	f108 0801 	add.w	r8, r8, #1
 80051a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051a4:	3b01      	subs	r3, #1
 80051a6:	4543      	cmp	r3, r8
 80051a8:	dcf1      	bgt.n	800518e <_printf_float+0x3fa>
 80051aa:	4653      	mov	r3, sl
 80051ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051b0:	e6e0      	b.n	8004f74 <_printf_float+0x1e0>
 80051b2:	f04f 0800 	mov.w	r8, #0
 80051b6:	f104 091a 	add.w	r9, r4, #26
 80051ba:	e7f2      	b.n	80051a2 <_printf_float+0x40e>
 80051bc:	2301      	movs	r3, #1
 80051be:	4642      	mov	r2, r8
 80051c0:	e7df      	b.n	8005182 <_printf_float+0x3ee>
 80051c2:	2301      	movs	r3, #1
 80051c4:	464a      	mov	r2, r9
 80051c6:	4631      	mov	r1, r6
 80051c8:	4628      	mov	r0, r5
 80051ca:	47b8      	blx	r7
 80051cc:	3001      	adds	r0, #1
 80051ce:	f43f ae3c 	beq.w	8004e4a <_printf_float+0xb6>
 80051d2:	f108 0801 	add.w	r8, r8, #1
 80051d6:	68e3      	ldr	r3, [r4, #12]
 80051d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80051da:	1a5b      	subs	r3, r3, r1
 80051dc:	4543      	cmp	r3, r8
 80051de:	dcf0      	bgt.n	80051c2 <_printf_float+0x42e>
 80051e0:	e6fd      	b.n	8004fde <_printf_float+0x24a>
 80051e2:	f04f 0800 	mov.w	r8, #0
 80051e6:	f104 0919 	add.w	r9, r4, #25
 80051ea:	e7f4      	b.n	80051d6 <_printf_float+0x442>

080051ec <_printf_common>:
 80051ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f0:	4616      	mov	r6, r2
 80051f2:	4699      	mov	r9, r3
 80051f4:	688a      	ldr	r2, [r1, #8]
 80051f6:	690b      	ldr	r3, [r1, #16]
 80051f8:	4607      	mov	r7, r0
 80051fa:	4293      	cmp	r3, r2
 80051fc:	bfb8      	it	lt
 80051fe:	4613      	movlt	r3, r2
 8005200:	6033      	str	r3, [r6, #0]
 8005202:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005206:	460c      	mov	r4, r1
 8005208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800520c:	b10a      	cbz	r2, 8005212 <_printf_common+0x26>
 800520e:	3301      	adds	r3, #1
 8005210:	6033      	str	r3, [r6, #0]
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	0699      	lsls	r1, r3, #26
 8005216:	bf42      	ittt	mi
 8005218:	6833      	ldrmi	r3, [r6, #0]
 800521a:	3302      	addmi	r3, #2
 800521c:	6033      	strmi	r3, [r6, #0]
 800521e:	6825      	ldr	r5, [r4, #0]
 8005220:	f015 0506 	ands.w	r5, r5, #6
 8005224:	d106      	bne.n	8005234 <_printf_common+0x48>
 8005226:	f104 0a19 	add.w	sl, r4, #25
 800522a:	68e3      	ldr	r3, [r4, #12]
 800522c:	6832      	ldr	r2, [r6, #0]
 800522e:	1a9b      	subs	r3, r3, r2
 8005230:	42ab      	cmp	r3, r5
 8005232:	dc28      	bgt.n	8005286 <_printf_common+0x9a>
 8005234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005238:	1e13      	subs	r3, r2, #0
 800523a:	6822      	ldr	r2, [r4, #0]
 800523c:	bf18      	it	ne
 800523e:	2301      	movne	r3, #1
 8005240:	0692      	lsls	r2, r2, #26
 8005242:	d42d      	bmi.n	80052a0 <_printf_common+0xb4>
 8005244:	4649      	mov	r1, r9
 8005246:	4638      	mov	r0, r7
 8005248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800524c:	47c0      	blx	r8
 800524e:	3001      	adds	r0, #1
 8005250:	d020      	beq.n	8005294 <_printf_common+0xa8>
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	68e5      	ldr	r5, [r4, #12]
 8005256:	f003 0306 	and.w	r3, r3, #6
 800525a:	2b04      	cmp	r3, #4
 800525c:	bf18      	it	ne
 800525e:	2500      	movne	r5, #0
 8005260:	6832      	ldr	r2, [r6, #0]
 8005262:	f04f 0600 	mov.w	r6, #0
 8005266:	68a3      	ldr	r3, [r4, #8]
 8005268:	bf08      	it	eq
 800526a:	1aad      	subeq	r5, r5, r2
 800526c:	6922      	ldr	r2, [r4, #16]
 800526e:	bf08      	it	eq
 8005270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005274:	4293      	cmp	r3, r2
 8005276:	bfc4      	itt	gt
 8005278:	1a9b      	subgt	r3, r3, r2
 800527a:	18ed      	addgt	r5, r5, r3
 800527c:	341a      	adds	r4, #26
 800527e:	42b5      	cmp	r5, r6
 8005280:	d11a      	bne.n	80052b8 <_printf_common+0xcc>
 8005282:	2000      	movs	r0, #0
 8005284:	e008      	b.n	8005298 <_printf_common+0xac>
 8005286:	2301      	movs	r3, #1
 8005288:	4652      	mov	r2, sl
 800528a:	4649      	mov	r1, r9
 800528c:	4638      	mov	r0, r7
 800528e:	47c0      	blx	r8
 8005290:	3001      	adds	r0, #1
 8005292:	d103      	bne.n	800529c <_printf_common+0xb0>
 8005294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800529c:	3501      	adds	r5, #1
 800529e:	e7c4      	b.n	800522a <_printf_common+0x3e>
 80052a0:	2030      	movs	r0, #48	; 0x30
 80052a2:	18e1      	adds	r1, r4, r3
 80052a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052ae:	4422      	add	r2, r4
 80052b0:	3302      	adds	r3, #2
 80052b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052b6:	e7c5      	b.n	8005244 <_printf_common+0x58>
 80052b8:	2301      	movs	r3, #1
 80052ba:	4622      	mov	r2, r4
 80052bc:	4649      	mov	r1, r9
 80052be:	4638      	mov	r0, r7
 80052c0:	47c0      	blx	r8
 80052c2:	3001      	adds	r0, #1
 80052c4:	d0e6      	beq.n	8005294 <_printf_common+0xa8>
 80052c6:	3601      	adds	r6, #1
 80052c8:	e7d9      	b.n	800527e <_printf_common+0x92>
	...

080052cc <_printf_i>:
 80052cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	460c      	mov	r4, r1
 80052d2:	7e27      	ldrb	r7, [r4, #24]
 80052d4:	4691      	mov	r9, r2
 80052d6:	2f78      	cmp	r7, #120	; 0x78
 80052d8:	4680      	mov	r8, r0
 80052da:	469a      	mov	sl, r3
 80052dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80052de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052e2:	d807      	bhi.n	80052f4 <_printf_i+0x28>
 80052e4:	2f62      	cmp	r7, #98	; 0x62
 80052e6:	d80a      	bhi.n	80052fe <_printf_i+0x32>
 80052e8:	2f00      	cmp	r7, #0
 80052ea:	f000 80d9 	beq.w	80054a0 <_printf_i+0x1d4>
 80052ee:	2f58      	cmp	r7, #88	; 0x58
 80052f0:	f000 80a4 	beq.w	800543c <_printf_i+0x170>
 80052f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052fc:	e03a      	b.n	8005374 <_printf_i+0xa8>
 80052fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005302:	2b15      	cmp	r3, #21
 8005304:	d8f6      	bhi.n	80052f4 <_printf_i+0x28>
 8005306:	a001      	add	r0, pc, #4	; (adr r0, 800530c <_printf_i+0x40>)
 8005308:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800530c:	08005365 	.word	0x08005365
 8005310:	08005379 	.word	0x08005379
 8005314:	080052f5 	.word	0x080052f5
 8005318:	080052f5 	.word	0x080052f5
 800531c:	080052f5 	.word	0x080052f5
 8005320:	080052f5 	.word	0x080052f5
 8005324:	08005379 	.word	0x08005379
 8005328:	080052f5 	.word	0x080052f5
 800532c:	080052f5 	.word	0x080052f5
 8005330:	080052f5 	.word	0x080052f5
 8005334:	080052f5 	.word	0x080052f5
 8005338:	08005487 	.word	0x08005487
 800533c:	080053a9 	.word	0x080053a9
 8005340:	08005469 	.word	0x08005469
 8005344:	080052f5 	.word	0x080052f5
 8005348:	080052f5 	.word	0x080052f5
 800534c:	080054a9 	.word	0x080054a9
 8005350:	080052f5 	.word	0x080052f5
 8005354:	080053a9 	.word	0x080053a9
 8005358:	080052f5 	.word	0x080052f5
 800535c:	080052f5 	.word	0x080052f5
 8005360:	08005471 	.word	0x08005471
 8005364:	680b      	ldr	r3, [r1, #0]
 8005366:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800536a:	1d1a      	adds	r2, r3, #4
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	600a      	str	r2, [r1, #0]
 8005370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005374:	2301      	movs	r3, #1
 8005376:	e0a4      	b.n	80054c2 <_printf_i+0x1f6>
 8005378:	6825      	ldr	r5, [r4, #0]
 800537a:	6808      	ldr	r0, [r1, #0]
 800537c:	062e      	lsls	r6, r5, #24
 800537e:	f100 0304 	add.w	r3, r0, #4
 8005382:	d50a      	bpl.n	800539a <_printf_i+0xce>
 8005384:	6805      	ldr	r5, [r0, #0]
 8005386:	600b      	str	r3, [r1, #0]
 8005388:	2d00      	cmp	r5, #0
 800538a:	da03      	bge.n	8005394 <_printf_i+0xc8>
 800538c:	232d      	movs	r3, #45	; 0x2d
 800538e:	426d      	negs	r5, r5
 8005390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005394:	230a      	movs	r3, #10
 8005396:	485e      	ldr	r0, [pc, #376]	; (8005510 <_printf_i+0x244>)
 8005398:	e019      	b.n	80053ce <_printf_i+0x102>
 800539a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800539e:	6805      	ldr	r5, [r0, #0]
 80053a0:	600b      	str	r3, [r1, #0]
 80053a2:	bf18      	it	ne
 80053a4:	b22d      	sxthne	r5, r5
 80053a6:	e7ef      	b.n	8005388 <_printf_i+0xbc>
 80053a8:	680b      	ldr	r3, [r1, #0]
 80053aa:	6825      	ldr	r5, [r4, #0]
 80053ac:	1d18      	adds	r0, r3, #4
 80053ae:	6008      	str	r0, [r1, #0]
 80053b0:	0628      	lsls	r0, r5, #24
 80053b2:	d501      	bpl.n	80053b8 <_printf_i+0xec>
 80053b4:	681d      	ldr	r5, [r3, #0]
 80053b6:	e002      	b.n	80053be <_printf_i+0xf2>
 80053b8:	0669      	lsls	r1, r5, #25
 80053ba:	d5fb      	bpl.n	80053b4 <_printf_i+0xe8>
 80053bc:	881d      	ldrh	r5, [r3, #0]
 80053be:	2f6f      	cmp	r7, #111	; 0x6f
 80053c0:	bf0c      	ite	eq
 80053c2:	2308      	moveq	r3, #8
 80053c4:	230a      	movne	r3, #10
 80053c6:	4852      	ldr	r0, [pc, #328]	; (8005510 <_printf_i+0x244>)
 80053c8:	2100      	movs	r1, #0
 80053ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053ce:	6866      	ldr	r6, [r4, #4]
 80053d0:	2e00      	cmp	r6, #0
 80053d2:	bfa8      	it	ge
 80053d4:	6821      	ldrge	r1, [r4, #0]
 80053d6:	60a6      	str	r6, [r4, #8]
 80053d8:	bfa4      	itt	ge
 80053da:	f021 0104 	bicge.w	r1, r1, #4
 80053de:	6021      	strge	r1, [r4, #0]
 80053e0:	b90d      	cbnz	r5, 80053e6 <_printf_i+0x11a>
 80053e2:	2e00      	cmp	r6, #0
 80053e4:	d04d      	beq.n	8005482 <_printf_i+0x1b6>
 80053e6:	4616      	mov	r6, r2
 80053e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80053ec:	fb03 5711 	mls	r7, r3, r1, r5
 80053f0:	5dc7      	ldrb	r7, [r0, r7]
 80053f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053f6:	462f      	mov	r7, r5
 80053f8:	42bb      	cmp	r3, r7
 80053fa:	460d      	mov	r5, r1
 80053fc:	d9f4      	bls.n	80053e8 <_printf_i+0x11c>
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d10b      	bne.n	800541a <_printf_i+0x14e>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	07df      	lsls	r7, r3, #31
 8005406:	d508      	bpl.n	800541a <_printf_i+0x14e>
 8005408:	6923      	ldr	r3, [r4, #16]
 800540a:	6861      	ldr	r1, [r4, #4]
 800540c:	4299      	cmp	r1, r3
 800540e:	bfde      	ittt	le
 8005410:	2330      	movle	r3, #48	; 0x30
 8005412:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005416:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800541a:	1b92      	subs	r2, r2, r6
 800541c:	6122      	str	r2, [r4, #16]
 800541e:	464b      	mov	r3, r9
 8005420:	4621      	mov	r1, r4
 8005422:	4640      	mov	r0, r8
 8005424:	f8cd a000 	str.w	sl, [sp]
 8005428:	aa03      	add	r2, sp, #12
 800542a:	f7ff fedf 	bl	80051ec <_printf_common>
 800542e:	3001      	adds	r0, #1
 8005430:	d14c      	bne.n	80054cc <_printf_i+0x200>
 8005432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005436:	b004      	add	sp, #16
 8005438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543c:	4834      	ldr	r0, [pc, #208]	; (8005510 <_printf_i+0x244>)
 800543e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005442:	680e      	ldr	r6, [r1, #0]
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	f856 5b04 	ldr.w	r5, [r6], #4
 800544a:	061f      	lsls	r7, r3, #24
 800544c:	600e      	str	r6, [r1, #0]
 800544e:	d514      	bpl.n	800547a <_printf_i+0x1ae>
 8005450:	07d9      	lsls	r1, r3, #31
 8005452:	bf44      	itt	mi
 8005454:	f043 0320 	orrmi.w	r3, r3, #32
 8005458:	6023      	strmi	r3, [r4, #0]
 800545a:	b91d      	cbnz	r5, 8005464 <_printf_i+0x198>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	f023 0320 	bic.w	r3, r3, #32
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	2310      	movs	r3, #16
 8005466:	e7af      	b.n	80053c8 <_printf_i+0xfc>
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	f043 0320 	orr.w	r3, r3, #32
 800546e:	6023      	str	r3, [r4, #0]
 8005470:	2378      	movs	r3, #120	; 0x78
 8005472:	4828      	ldr	r0, [pc, #160]	; (8005514 <_printf_i+0x248>)
 8005474:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005478:	e7e3      	b.n	8005442 <_printf_i+0x176>
 800547a:	065e      	lsls	r6, r3, #25
 800547c:	bf48      	it	mi
 800547e:	b2ad      	uxthmi	r5, r5
 8005480:	e7e6      	b.n	8005450 <_printf_i+0x184>
 8005482:	4616      	mov	r6, r2
 8005484:	e7bb      	b.n	80053fe <_printf_i+0x132>
 8005486:	680b      	ldr	r3, [r1, #0]
 8005488:	6826      	ldr	r6, [r4, #0]
 800548a:	1d1d      	adds	r5, r3, #4
 800548c:	6960      	ldr	r0, [r4, #20]
 800548e:	600d      	str	r5, [r1, #0]
 8005490:	0635      	lsls	r5, r6, #24
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	d501      	bpl.n	800549a <_printf_i+0x1ce>
 8005496:	6018      	str	r0, [r3, #0]
 8005498:	e002      	b.n	80054a0 <_printf_i+0x1d4>
 800549a:	0671      	lsls	r1, r6, #25
 800549c:	d5fb      	bpl.n	8005496 <_printf_i+0x1ca>
 800549e:	8018      	strh	r0, [r3, #0]
 80054a0:	2300      	movs	r3, #0
 80054a2:	4616      	mov	r6, r2
 80054a4:	6123      	str	r3, [r4, #16]
 80054a6:	e7ba      	b.n	800541e <_printf_i+0x152>
 80054a8:	680b      	ldr	r3, [r1, #0]
 80054aa:	1d1a      	adds	r2, r3, #4
 80054ac:	600a      	str	r2, [r1, #0]
 80054ae:	681e      	ldr	r6, [r3, #0]
 80054b0:	2100      	movs	r1, #0
 80054b2:	4630      	mov	r0, r6
 80054b4:	6862      	ldr	r2, [r4, #4]
 80054b6:	f001 fa25 	bl	8006904 <memchr>
 80054ba:	b108      	cbz	r0, 80054c0 <_printf_i+0x1f4>
 80054bc:	1b80      	subs	r0, r0, r6
 80054be:	6060      	str	r0, [r4, #4]
 80054c0:	6863      	ldr	r3, [r4, #4]
 80054c2:	6123      	str	r3, [r4, #16]
 80054c4:	2300      	movs	r3, #0
 80054c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ca:	e7a8      	b.n	800541e <_printf_i+0x152>
 80054cc:	4632      	mov	r2, r6
 80054ce:	4649      	mov	r1, r9
 80054d0:	4640      	mov	r0, r8
 80054d2:	6923      	ldr	r3, [r4, #16]
 80054d4:	47d0      	blx	sl
 80054d6:	3001      	adds	r0, #1
 80054d8:	d0ab      	beq.n	8005432 <_printf_i+0x166>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	079b      	lsls	r3, r3, #30
 80054de:	d413      	bmi.n	8005508 <_printf_i+0x23c>
 80054e0:	68e0      	ldr	r0, [r4, #12]
 80054e2:	9b03      	ldr	r3, [sp, #12]
 80054e4:	4298      	cmp	r0, r3
 80054e6:	bfb8      	it	lt
 80054e8:	4618      	movlt	r0, r3
 80054ea:	e7a4      	b.n	8005436 <_printf_i+0x16a>
 80054ec:	2301      	movs	r3, #1
 80054ee:	4632      	mov	r2, r6
 80054f0:	4649      	mov	r1, r9
 80054f2:	4640      	mov	r0, r8
 80054f4:	47d0      	blx	sl
 80054f6:	3001      	adds	r0, #1
 80054f8:	d09b      	beq.n	8005432 <_printf_i+0x166>
 80054fa:	3501      	adds	r5, #1
 80054fc:	68e3      	ldr	r3, [r4, #12]
 80054fe:	9903      	ldr	r1, [sp, #12]
 8005500:	1a5b      	subs	r3, r3, r1
 8005502:	42ab      	cmp	r3, r5
 8005504:	dcf2      	bgt.n	80054ec <_printf_i+0x220>
 8005506:	e7eb      	b.n	80054e0 <_printf_i+0x214>
 8005508:	2500      	movs	r5, #0
 800550a:	f104 0619 	add.w	r6, r4, #25
 800550e:	e7f5      	b.n	80054fc <_printf_i+0x230>
 8005510:	0800778e 	.word	0x0800778e
 8005514:	0800779f 	.word	0x0800779f

08005518 <iprintf>:
 8005518:	b40f      	push	{r0, r1, r2, r3}
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <iprintf+0x2c>)
 800551c:	b513      	push	{r0, r1, r4, lr}
 800551e:	681c      	ldr	r4, [r3, #0]
 8005520:	b124      	cbz	r4, 800552c <iprintf+0x14>
 8005522:	69a3      	ldr	r3, [r4, #24]
 8005524:	b913      	cbnz	r3, 800552c <iprintf+0x14>
 8005526:	4620      	mov	r0, r4
 8005528:	f001 f8da 	bl	80066e0 <__sinit>
 800552c:	ab05      	add	r3, sp, #20
 800552e:	4620      	mov	r0, r4
 8005530:	9a04      	ldr	r2, [sp, #16]
 8005532:	68a1      	ldr	r1, [r4, #8]
 8005534:	9301      	str	r3, [sp, #4]
 8005536:	f001 fe5f 	bl	80071f8 <_vfiprintf_r>
 800553a:	b002      	add	sp, #8
 800553c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005540:	b004      	add	sp, #16
 8005542:	4770      	bx	lr
 8005544:	2000000c 	.word	0x2000000c

08005548 <_puts_r>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	460e      	mov	r6, r1
 800554c:	4605      	mov	r5, r0
 800554e:	b118      	cbz	r0, 8005558 <_puts_r+0x10>
 8005550:	6983      	ldr	r3, [r0, #24]
 8005552:	b90b      	cbnz	r3, 8005558 <_puts_r+0x10>
 8005554:	f001 f8c4 	bl	80066e0 <__sinit>
 8005558:	69ab      	ldr	r3, [r5, #24]
 800555a:	68ac      	ldr	r4, [r5, #8]
 800555c:	b913      	cbnz	r3, 8005564 <_puts_r+0x1c>
 800555e:	4628      	mov	r0, r5
 8005560:	f001 f8be 	bl	80066e0 <__sinit>
 8005564:	4b2c      	ldr	r3, [pc, #176]	; (8005618 <_puts_r+0xd0>)
 8005566:	429c      	cmp	r4, r3
 8005568:	d120      	bne.n	80055ac <_puts_r+0x64>
 800556a:	686c      	ldr	r4, [r5, #4]
 800556c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800556e:	07db      	lsls	r3, r3, #31
 8005570:	d405      	bmi.n	800557e <_puts_r+0x36>
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	0598      	lsls	r0, r3, #22
 8005576:	d402      	bmi.n	800557e <_puts_r+0x36>
 8005578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800557a:	f001 f954 	bl	8006826 <__retarget_lock_acquire_recursive>
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	0719      	lsls	r1, r3, #28
 8005582:	d51d      	bpl.n	80055c0 <_puts_r+0x78>
 8005584:	6923      	ldr	r3, [r4, #16]
 8005586:	b1db      	cbz	r3, 80055c0 <_puts_r+0x78>
 8005588:	3e01      	subs	r6, #1
 800558a:	68a3      	ldr	r3, [r4, #8]
 800558c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005590:	3b01      	subs	r3, #1
 8005592:	60a3      	str	r3, [r4, #8]
 8005594:	bb39      	cbnz	r1, 80055e6 <_puts_r+0x9e>
 8005596:	2b00      	cmp	r3, #0
 8005598:	da38      	bge.n	800560c <_puts_r+0xc4>
 800559a:	4622      	mov	r2, r4
 800559c:	210a      	movs	r1, #10
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 f848 	bl	8005634 <__swbuf_r>
 80055a4:	3001      	adds	r0, #1
 80055a6:	d011      	beq.n	80055cc <_puts_r+0x84>
 80055a8:	250a      	movs	r5, #10
 80055aa:	e011      	b.n	80055d0 <_puts_r+0x88>
 80055ac:	4b1b      	ldr	r3, [pc, #108]	; (800561c <_puts_r+0xd4>)
 80055ae:	429c      	cmp	r4, r3
 80055b0:	d101      	bne.n	80055b6 <_puts_r+0x6e>
 80055b2:	68ac      	ldr	r4, [r5, #8]
 80055b4:	e7da      	b.n	800556c <_puts_r+0x24>
 80055b6:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <_puts_r+0xd8>)
 80055b8:	429c      	cmp	r4, r3
 80055ba:	bf08      	it	eq
 80055bc:	68ec      	ldreq	r4, [r5, #12]
 80055be:	e7d5      	b.n	800556c <_puts_r+0x24>
 80055c0:	4621      	mov	r1, r4
 80055c2:	4628      	mov	r0, r5
 80055c4:	f000 f888 	bl	80056d8 <__swsetup_r>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d0dd      	beq.n	8005588 <_puts_r+0x40>
 80055cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80055d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055d2:	07da      	lsls	r2, r3, #31
 80055d4:	d405      	bmi.n	80055e2 <_puts_r+0x9a>
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	059b      	lsls	r3, r3, #22
 80055da:	d402      	bmi.n	80055e2 <_puts_r+0x9a>
 80055dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055de:	f001 f923 	bl	8006828 <__retarget_lock_release_recursive>
 80055e2:	4628      	mov	r0, r5
 80055e4:	bd70      	pop	{r4, r5, r6, pc}
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	da04      	bge.n	80055f4 <_puts_r+0xac>
 80055ea:	69a2      	ldr	r2, [r4, #24]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	dc06      	bgt.n	80055fe <_puts_r+0xb6>
 80055f0:	290a      	cmp	r1, #10
 80055f2:	d004      	beq.n	80055fe <_puts_r+0xb6>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	6022      	str	r2, [r4, #0]
 80055fa:	7019      	strb	r1, [r3, #0]
 80055fc:	e7c5      	b.n	800558a <_puts_r+0x42>
 80055fe:	4622      	mov	r2, r4
 8005600:	4628      	mov	r0, r5
 8005602:	f000 f817 	bl	8005634 <__swbuf_r>
 8005606:	3001      	adds	r0, #1
 8005608:	d1bf      	bne.n	800558a <_puts_r+0x42>
 800560a:	e7df      	b.n	80055cc <_puts_r+0x84>
 800560c:	250a      	movs	r5, #10
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	6022      	str	r2, [r4, #0]
 8005614:	701d      	strb	r5, [r3, #0]
 8005616:	e7db      	b.n	80055d0 <_puts_r+0x88>
 8005618:	08007864 	.word	0x08007864
 800561c:	08007884 	.word	0x08007884
 8005620:	08007844 	.word	0x08007844

08005624 <puts>:
 8005624:	4b02      	ldr	r3, [pc, #8]	; (8005630 <puts+0xc>)
 8005626:	4601      	mov	r1, r0
 8005628:	6818      	ldr	r0, [r3, #0]
 800562a:	f7ff bf8d 	b.w	8005548 <_puts_r>
 800562e:	bf00      	nop
 8005630:	2000000c 	.word	0x2000000c

08005634 <__swbuf_r>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	460e      	mov	r6, r1
 8005638:	4614      	mov	r4, r2
 800563a:	4605      	mov	r5, r0
 800563c:	b118      	cbz	r0, 8005646 <__swbuf_r+0x12>
 800563e:	6983      	ldr	r3, [r0, #24]
 8005640:	b90b      	cbnz	r3, 8005646 <__swbuf_r+0x12>
 8005642:	f001 f84d 	bl	80066e0 <__sinit>
 8005646:	4b21      	ldr	r3, [pc, #132]	; (80056cc <__swbuf_r+0x98>)
 8005648:	429c      	cmp	r4, r3
 800564a:	d12b      	bne.n	80056a4 <__swbuf_r+0x70>
 800564c:	686c      	ldr	r4, [r5, #4]
 800564e:	69a3      	ldr	r3, [r4, #24]
 8005650:	60a3      	str	r3, [r4, #8]
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	071a      	lsls	r2, r3, #28
 8005656:	d52f      	bpl.n	80056b8 <__swbuf_r+0x84>
 8005658:	6923      	ldr	r3, [r4, #16]
 800565a:	b36b      	cbz	r3, 80056b8 <__swbuf_r+0x84>
 800565c:	6923      	ldr	r3, [r4, #16]
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	b2f6      	uxtb	r6, r6
 8005662:	1ac0      	subs	r0, r0, r3
 8005664:	6963      	ldr	r3, [r4, #20]
 8005666:	4637      	mov	r7, r6
 8005668:	4283      	cmp	r3, r0
 800566a:	dc04      	bgt.n	8005676 <__swbuf_r+0x42>
 800566c:	4621      	mov	r1, r4
 800566e:	4628      	mov	r0, r5
 8005670:	f000 ffa2 	bl	80065b8 <_fflush_r>
 8005674:	bb30      	cbnz	r0, 80056c4 <__swbuf_r+0x90>
 8005676:	68a3      	ldr	r3, [r4, #8]
 8005678:	3001      	adds	r0, #1
 800567a:	3b01      	subs	r3, #1
 800567c:	60a3      	str	r3, [r4, #8]
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	6022      	str	r2, [r4, #0]
 8005684:	701e      	strb	r6, [r3, #0]
 8005686:	6963      	ldr	r3, [r4, #20]
 8005688:	4283      	cmp	r3, r0
 800568a:	d004      	beq.n	8005696 <__swbuf_r+0x62>
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	07db      	lsls	r3, r3, #31
 8005690:	d506      	bpl.n	80056a0 <__swbuf_r+0x6c>
 8005692:	2e0a      	cmp	r6, #10
 8005694:	d104      	bne.n	80056a0 <__swbuf_r+0x6c>
 8005696:	4621      	mov	r1, r4
 8005698:	4628      	mov	r0, r5
 800569a:	f000 ff8d 	bl	80065b8 <_fflush_r>
 800569e:	b988      	cbnz	r0, 80056c4 <__swbuf_r+0x90>
 80056a0:	4638      	mov	r0, r7
 80056a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056a4:	4b0a      	ldr	r3, [pc, #40]	; (80056d0 <__swbuf_r+0x9c>)
 80056a6:	429c      	cmp	r4, r3
 80056a8:	d101      	bne.n	80056ae <__swbuf_r+0x7a>
 80056aa:	68ac      	ldr	r4, [r5, #8]
 80056ac:	e7cf      	b.n	800564e <__swbuf_r+0x1a>
 80056ae:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <__swbuf_r+0xa0>)
 80056b0:	429c      	cmp	r4, r3
 80056b2:	bf08      	it	eq
 80056b4:	68ec      	ldreq	r4, [r5, #12]
 80056b6:	e7ca      	b.n	800564e <__swbuf_r+0x1a>
 80056b8:	4621      	mov	r1, r4
 80056ba:	4628      	mov	r0, r5
 80056bc:	f000 f80c 	bl	80056d8 <__swsetup_r>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d0cb      	beq.n	800565c <__swbuf_r+0x28>
 80056c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80056c8:	e7ea      	b.n	80056a0 <__swbuf_r+0x6c>
 80056ca:	bf00      	nop
 80056cc:	08007864 	.word	0x08007864
 80056d0:	08007884 	.word	0x08007884
 80056d4:	08007844 	.word	0x08007844

080056d8 <__swsetup_r>:
 80056d8:	4b32      	ldr	r3, [pc, #200]	; (80057a4 <__swsetup_r+0xcc>)
 80056da:	b570      	push	{r4, r5, r6, lr}
 80056dc:	681d      	ldr	r5, [r3, #0]
 80056de:	4606      	mov	r6, r0
 80056e0:	460c      	mov	r4, r1
 80056e2:	b125      	cbz	r5, 80056ee <__swsetup_r+0x16>
 80056e4:	69ab      	ldr	r3, [r5, #24]
 80056e6:	b913      	cbnz	r3, 80056ee <__swsetup_r+0x16>
 80056e8:	4628      	mov	r0, r5
 80056ea:	f000 fff9 	bl	80066e0 <__sinit>
 80056ee:	4b2e      	ldr	r3, [pc, #184]	; (80057a8 <__swsetup_r+0xd0>)
 80056f0:	429c      	cmp	r4, r3
 80056f2:	d10f      	bne.n	8005714 <__swsetup_r+0x3c>
 80056f4:	686c      	ldr	r4, [r5, #4]
 80056f6:	89a3      	ldrh	r3, [r4, #12]
 80056f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056fc:	0719      	lsls	r1, r3, #28
 80056fe:	d42c      	bmi.n	800575a <__swsetup_r+0x82>
 8005700:	06dd      	lsls	r5, r3, #27
 8005702:	d411      	bmi.n	8005728 <__swsetup_r+0x50>
 8005704:	2309      	movs	r3, #9
 8005706:	6033      	str	r3, [r6, #0]
 8005708:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800570c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005710:	81a3      	strh	r3, [r4, #12]
 8005712:	e03e      	b.n	8005792 <__swsetup_r+0xba>
 8005714:	4b25      	ldr	r3, [pc, #148]	; (80057ac <__swsetup_r+0xd4>)
 8005716:	429c      	cmp	r4, r3
 8005718:	d101      	bne.n	800571e <__swsetup_r+0x46>
 800571a:	68ac      	ldr	r4, [r5, #8]
 800571c:	e7eb      	b.n	80056f6 <__swsetup_r+0x1e>
 800571e:	4b24      	ldr	r3, [pc, #144]	; (80057b0 <__swsetup_r+0xd8>)
 8005720:	429c      	cmp	r4, r3
 8005722:	bf08      	it	eq
 8005724:	68ec      	ldreq	r4, [r5, #12]
 8005726:	e7e6      	b.n	80056f6 <__swsetup_r+0x1e>
 8005728:	0758      	lsls	r0, r3, #29
 800572a:	d512      	bpl.n	8005752 <__swsetup_r+0x7a>
 800572c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800572e:	b141      	cbz	r1, 8005742 <__swsetup_r+0x6a>
 8005730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005734:	4299      	cmp	r1, r3
 8005736:	d002      	beq.n	800573e <__swsetup_r+0x66>
 8005738:	4630      	mov	r0, r6
 800573a:	f001 fc8f 	bl	800705c <_free_r>
 800573e:	2300      	movs	r3, #0
 8005740:	6363      	str	r3, [r4, #52]	; 0x34
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005748:	81a3      	strh	r3, [r4, #12]
 800574a:	2300      	movs	r3, #0
 800574c:	6063      	str	r3, [r4, #4]
 800574e:	6923      	ldr	r3, [r4, #16]
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	89a3      	ldrh	r3, [r4, #12]
 8005754:	f043 0308 	orr.w	r3, r3, #8
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	6923      	ldr	r3, [r4, #16]
 800575c:	b94b      	cbnz	r3, 8005772 <__swsetup_r+0x9a>
 800575e:	89a3      	ldrh	r3, [r4, #12]
 8005760:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005768:	d003      	beq.n	8005772 <__swsetup_r+0x9a>
 800576a:	4621      	mov	r1, r4
 800576c:	4630      	mov	r0, r6
 800576e:	f001 f881 	bl	8006874 <__smakebuf_r>
 8005772:	89a0      	ldrh	r0, [r4, #12]
 8005774:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005778:	f010 0301 	ands.w	r3, r0, #1
 800577c:	d00a      	beq.n	8005794 <__swsetup_r+0xbc>
 800577e:	2300      	movs	r3, #0
 8005780:	60a3      	str	r3, [r4, #8]
 8005782:	6963      	ldr	r3, [r4, #20]
 8005784:	425b      	negs	r3, r3
 8005786:	61a3      	str	r3, [r4, #24]
 8005788:	6923      	ldr	r3, [r4, #16]
 800578a:	b943      	cbnz	r3, 800579e <__swsetup_r+0xc6>
 800578c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005790:	d1ba      	bne.n	8005708 <__swsetup_r+0x30>
 8005792:	bd70      	pop	{r4, r5, r6, pc}
 8005794:	0781      	lsls	r1, r0, #30
 8005796:	bf58      	it	pl
 8005798:	6963      	ldrpl	r3, [r4, #20]
 800579a:	60a3      	str	r3, [r4, #8]
 800579c:	e7f4      	b.n	8005788 <__swsetup_r+0xb0>
 800579e:	2000      	movs	r0, #0
 80057a0:	e7f7      	b.n	8005792 <__swsetup_r+0xba>
 80057a2:	bf00      	nop
 80057a4:	2000000c 	.word	0x2000000c
 80057a8:	08007864 	.word	0x08007864
 80057ac:	08007884 	.word	0x08007884
 80057b0:	08007844 	.word	0x08007844

080057b4 <quorem>:
 80057b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	6903      	ldr	r3, [r0, #16]
 80057ba:	690c      	ldr	r4, [r1, #16]
 80057bc:	4607      	mov	r7, r0
 80057be:	42a3      	cmp	r3, r4
 80057c0:	f2c0 8083 	blt.w	80058ca <quorem+0x116>
 80057c4:	3c01      	subs	r4, #1
 80057c6:	f100 0514 	add.w	r5, r0, #20
 80057ca:	f101 0814 	add.w	r8, r1, #20
 80057ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057d2:	9301      	str	r3, [sp, #4]
 80057d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057dc:	3301      	adds	r3, #1
 80057de:	429a      	cmp	r2, r3
 80057e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80057e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80057e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057ec:	d332      	bcc.n	8005854 <quorem+0xa0>
 80057ee:	f04f 0e00 	mov.w	lr, #0
 80057f2:	4640      	mov	r0, r8
 80057f4:	46ac      	mov	ip, r5
 80057f6:	46f2      	mov	sl, lr
 80057f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80057fc:	b293      	uxth	r3, r2
 80057fe:	fb06 e303 	mla	r3, r6, r3, lr
 8005802:	0c12      	lsrs	r2, r2, #16
 8005804:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005808:	fb06 e202 	mla	r2, r6, r2, lr
 800580c:	b29b      	uxth	r3, r3
 800580e:	ebaa 0303 	sub.w	r3, sl, r3
 8005812:	f8dc a000 	ldr.w	sl, [ip]
 8005816:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800581a:	fa1f fa8a 	uxth.w	sl, sl
 800581e:	4453      	add	r3, sl
 8005820:	fa1f fa82 	uxth.w	sl, r2
 8005824:	f8dc 2000 	ldr.w	r2, [ip]
 8005828:	4581      	cmp	r9, r0
 800582a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800582e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005832:	b29b      	uxth	r3, r3
 8005834:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005838:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800583c:	f84c 3b04 	str.w	r3, [ip], #4
 8005840:	d2da      	bcs.n	80057f8 <quorem+0x44>
 8005842:	f855 300b 	ldr.w	r3, [r5, fp]
 8005846:	b92b      	cbnz	r3, 8005854 <quorem+0xa0>
 8005848:	9b01      	ldr	r3, [sp, #4]
 800584a:	3b04      	subs	r3, #4
 800584c:	429d      	cmp	r5, r3
 800584e:	461a      	mov	r2, r3
 8005850:	d32f      	bcc.n	80058b2 <quorem+0xfe>
 8005852:	613c      	str	r4, [r7, #16]
 8005854:	4638      	mov	r0, r7
 8005856:	f001 faeb 	bl	8006e30 <__mcmp>
 800585a:	2800      	cmp	r0, #0
 800585c:	db25      	blt.n	80058aa <quorem+0xf6>
 800585e:	4628      	mov	r0, r5
 8005860:	f04f 0c00 	mov.w	ip, #0
 8005864:	3601      	adds	r6, #1
 8005866:	f858 1b04 	ldr.w	r1, [r8], #4
 800586a:	f8d0 e000 	ldr.w	lr, [r0]
 800586e:	b28b      	uxth	r3, r1
 8005870:	ebac 0303 	sub.w	r3, ip, r3
 8005874:	fa1f f28e 	uxth.w	r2, lr
 8005878:	4413      	add	r3, r2
 800587a:	0c0a      	lsrs	r2, r1, #16
 800587c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005884:	b29b      	uxth	r3, r3
 8005886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800588a:	45c1      	cmp	r9, r8
 800588c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005890:	f840 3b04 	str.w	r3, [r0], #4
 8005894:	d2e7      	bcs.n	8005866 <quorem+0xb2>
 8005896:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800589a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800589e:	b922      	cbnz	r2, 80058aa <quorem+0xf6>
 80058a0:	3b04      	subs	r3, #4
 80058a2:	429d      	cmp	r5, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	d30a      	bcc.n	80058be <quorem+0x10a>
 80058a8:	613c      	str	r4, [r7, #16]
 80058aa:	4630      	mov	r0, r6
 80058ac:	b003      	add	sp, #12
 80058ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	3b04      	subs	r3, #4
 80058b6:	2a00      	cmp	r2, #0
 80058b8:	d1cb      	bne.n	8005852 <quorem+0x9e>
 80058ba:	3c01      	subs	r4, #1
 80058bc:	e7c6      	b.n	800584c <quorem+0x98>
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	3b04      	subs	r3, #4
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	d1f0      	bne.n	80058a8 <quorem+0xf4>
 80058c6:	3c01      	subs	r4, #1
 80058c8:	e7eb      	b.n	80058a2 <quorem+0xee>
 80058ca:	2000      	movs	r0, #0
 80058cc:	e7ee      	b.n	80058ac <quorem+0xf8>
	...

080058d0 <_dtoa_r>:
 80058d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	4616      	mov	r6, r2
 80058d6:	461f      	mov	r7, r3
 80058d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80058da:	b099      	sub	sp, #100	; 0x64
 80058dc:	4605      	mov	r5, r0
 80058de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80058e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80058e6:	b974      	cbnz	r4, 8005906 <_dtoa_r+0x36>
 80058e8:	2010      	movs	r0, #16
 80058ea:	f001 f803 	bl	80068f4 <malloc>
 80058ee:	4602      	mov	r2, r0
 80058f0:	6268      	str	r0, [r5, #36]	; 0x24
 80058f2:	b920      	cbnz	r0, 80058fe <_dtoa_r+0x2e>
 80058f4:	21ea      	movs	r1, #234	; 0xea
 80058f6:	4bae      	ldr	r3, [pc, #696]	; (8005bb0 <_dtoa_r+0x2e0>)
 80058f8:	48ae      	ldr	r0, [pc, #696]	; (8005bb4 <_dtoa_r+0x2e4>)
 80058fa:	f001 fe13 	bl	8007524 <__assert_func>
 80058fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005902:	6004      	str	r4, [r0, #0]
 8005904:	60c4      	str	r4, [r0, #12]
 8005906:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005908:	6819      	ldr	r1, [r3, #0]
 800590a:	b151      	cbz	r1, 8005922 <_dtoa_r+0x52>
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	2301      	movs	r3, #1
 8005910:	4093      	lsls	r3, r2
 8005912:	604a      	str	r2, [r1, #4]
 8005914:	608b      	str	r3, [r1, #8]
 8005916:	4628      	mov	r0, r5
 8005918:	f001 f850 	bl	80069bc <_Bfree>
 800591c:	2200      	movs	r2, #0
 800591e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	1e3b      	subs	r3, r7, #0
 8005924:	bfaf      	iteee	ge
 8005926:	2300      	movge	r3, #0
 8005928:	2201      	movlt	r2, #1
 800592a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800592e:	9305      	strlt	r3, [sp, #20]
 8005930:	bfa8      	it	ge
 8005932:	f8c8 3000 	strge.w	r3, [r8]
 8005936:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800593a:	4b9f      	ldr	r3, [pc, #636]	; (8005bb8 <_dtoa_r+0x2e8>)
 800593c:	bfb8      	it	lt
 800593e:	f8c8 2000 	strlt.w	r2, [r8]
 8005942:	ea33 0309 	bics.w	r3, r3, r9
 8005946:	d119      	bne.n	800597c <_dtoa_r+0xac>
 8005948:	f242 730f 	movw	r3, #9999	; 0x270f
 800594c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005954:	4333      	orrs	r3, r6
 8005956:	f000 8580 	beq.w	800645a <_dtoa_r+0xb8a>
 800595a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800595c:	b953      	cbnz	r3, 8005974 <_dtoa_r+0xa4>
 800595e:	4b97      	ldr	r3, [pc, #604]	; (8005bbc <_dtoa_r+0x2ec>)
 8005960:	e022      	b.n	80059a8 <_dtoa_r+0xd8>
 8005962:	4b97      	ldr	r3, [pc, #604]	; (8005bc0 <_dtoa_r+0x2f0>)
 8005964:	9308      	str	r3, [sp, #32]
 8005966:	3308      	adds	r3, #8
 8005968:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	9808      	ldr	r0, [sp, #32]
 800596e:	b019      	add	sp, #100	; 0x64
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005974:	4b91      	ldr	r3, [pc, #580]	; (8005bbc <_dtoa_r+0x2ec>)
 8005976:	9308      	str	r3, [sp, #32]
 8005978:	3303      	adds	r3, #3
 800597a:	e7f5      	b.n	8005968 <_dtoa_r+0x98>
 800597c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005980:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005988:	2200      	movs	r2, #0
 800598a:	2300      	movs	r3, #0
 800598c:	f7fb f80c 	bl	80009a8 <__aeabi_dcmpeq>
 8005990:	4680      	mov	r8, r0
 8005992:	b158      	cbz	r0, 80059ac <_dtoa_r+0xdc>
 8005994:	2301      	movs	r3, #1
 8005996:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 8559 	beq.w	8006454 <_dtoa_r+0xb84>
 80059a2:	4888      	ldr	r0, [pc, #544]	; (8005bc4 <_dtoa_r+0x2f4>)
 80059a4:	6018      	str	r0, [r3, #0]
 80059a6:	1e43      	subs	r3, r0, #1
 80059a8:	9308      	str	r3, [sp, #32]
 80059aa:	e7df      	b.n	800596c <_dtoa_r+0x9c>
 80059ac:	ab16      	add	r3, sp, #88	; 0x58
 80059ae:	9301      	str	r3, [sp, #4]
 80059b0:	ab17      	add	r3, sp, #92	; 0x5c
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	4628      	mov	r0, r5
 80059b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059ba:	f001 fae5 	bl	8006f88 <__d2b>
 80059be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80059c2:	4682      	mov	sl, r0
 80059c4:	2c00      	cmp	r4, #0
 80059c6:	d07e      	beq.n	8005ac6 <_dtoa_r+0x1f6>
 80059c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80059d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80059da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80059de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80059e2:	2200      	movs	r2, #0
 80059e4:	4b78      	ldr	r3, [pc, #480]	; (8005bc8 <_dtoa_r+0x2f8>)
 80059e6:	f7fa fbbf 	bl	8000168 <__aeabi_dsub>
 80059ea:	a36b      	add	r3, pc, #428	; (adr r3, 8005b98 <_dtoa_r+0x2c8>)
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f7fa fd72 	bl	80004d8 <__aeabi_dmul>
 80059f4:	a36a      	add	r3, pc, #424	; (adr r3, 8005ba0 <_dtoa_r+0x2d0>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	f7fa fbb7 	bl	800016c <__adddf3>
 80059fe:	4606      	mov	r6, r0
 8005a00:	4620      	mov	r0, r4
 8005a02:	460f      	mov	r7, r1
 8005a04:	f7fa fcfe 	bl	8000404 <__aeabi_i2d>
 8005a08:	a367      	add	r3, pc, #412	; (adr r3, 8005ba8 <_dtoa_r+0x2d8>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	f7fa fd63 	bl	80004d8 <__aeabi_dmul>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4630      	mov	r0, r6
 8005a18:	4639      	mov	r1, r7
 8005a1a:	f7fa fba7 	bl	800016c <__adddf3>
 8005a1e:	4606      	mov	r6, r0
 8005a20:	460f      	mov	r7, r1
 8005a22:	f7fb f809 	bl	8000a38 <__aeabi_d2iz>
 8005a26:	2200      	movs	r2, #0
 8005a28:	4681      	mov	r9, r0
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	4639      	mov	r1, r7
 8005a30:	f7fa ffc4 	bl	80009bc <__aeabi_dcmplt>
 8005a34:	b148      	cbz	r0, 8005a4a <_dtoa_r+0x17a>
 8005a36:	4648      	mov	r0, r9
 8005a38:	f7fa fce4 	bl	8000404 <__aeabi_i2d>
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	463b      	mov	r3, r7
 8005a40:	f7fa ffb2 	bl	80009a8 <__aeabi_dcmpeq>
 8005a44:	b908      	cbnz	r0, 8005a4a <_dtoa_r+0x17a>
 8005a46:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005a4a:	f1b9 0f16 	cmp.w	r9, #22
 8005a4e:	d857      	bhi.n	8005b00 <_dtoa_r+0x230>
 8005a50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a54:	4b5d      	ldr	r3, [pc, #372]	; (8005bcc <_dtoa_r+0x2fc>)
 8005a56:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5e:	f7fa ffad 	bl	80009bc <__aeabi_dcmplt>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d04e      	beq.n	8005b04 <_dtoa_r+0x234>
 8005a66:	2300      	movs	r3, #0
 8005a68:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005a70:	1b1c      	subs	r4, r3, r4
 8005a72:	1e63      	subs	r3, r4, #1
 8005a74:	9309      	str	r3, [sp, #36]	; 0x24
 8005a76:	bf49      	itett	mi
 8005a78:	f1c4 0301 	rsbmi	r3, r4, #1
 8005a7c:	2300      	movpl	r3, #0
 8005a7e:	9306      	strmi	r3, [sp, #24]
 8005a80:	2300      	movmi	r3, #0
 8005a82:	bf54      	ite	pl
 8005a84:	9306      	strpl	r3, [sp, #24]
 8005a86:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005a88:	f1b9 0f00 	cmp.w	r9, #0
 8005a8c:	db3c      	blt.n	8005b08 <_dtoa_r+0x238>
 8005a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a90:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005a94:	444b      	add	r3, r9
 8005a96:	9309      	str	r3, [sp, #36]	; 0x24
 8005a98:	2300      	movs	r3, #0
 8005a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8005a9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a9e:	2b09      	cmp	r3, #9
 8005aa0:	d86c      	bhi.n	8005b7c <_dtoa_r+0x2ac>
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	bfc4      	itt	gt
 8005aa6:	3b04      	subgt	r3, #4
 8005aa8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005aaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aac:	bfc8      	it	gt
 8005aae:	2400      	movgt	r4, #0
 8005ab0:	f1a3 0302 	sub.w	r3, r3, #2
 8005ab4:	bfd8      	it	le
 8005ab6:	2401      	movle	r4, #1
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	f200 808b 	bhi.w	8005bd4 <_dtoa_r+0x304>
 8005abe:	e8df f003 	tbb	[pc, r3]
 8005ac2:	4f2d      	.short	0x4f2d
 8005ac4:	5b4d      	.short	0x5b4d
 8005ac6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005aca:	441c      	add	r4, r3
 8005acc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	bfc3      	ittte	gt
 8005ad4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005ad8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005adc:	fa09 f303 	lslgt.w	r3, r9, r3
 8005ae0:	f1c3 0320 	rsble	r3, r3, #32
 8005ae4:	bfc6      	itte	gt
 8005ae6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005aea:	4318      	orrgt	r0, r3
 8005aec:	fa06 f003 	lslle.w	r0, r6, r3
 8005af0:	f7fa fc78 	bl	80003e4 <__aeabi_ui2d>
 8005af4:	2301      	movs	r3, #1
 8005af6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005afa:	3c01      	subs	r4, #1
 8005afc:	9313      	str	r3, [sp, #76]	; 0x4c
 8005afe:	e770      	b.n	80059e2 <_dtoa_r+0x112>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e7b3      	b.n	8005a6c <_dtoa_r+0x19c>
 8005b04:	900f      	str	r0, [sp, #60]	; 0x3c
 8005b06:	e7b2      	b.n	8005a6e <_dtoa_r+0x19e>
 8005b08:	9b06      	ldr	r3, [sp, #24]
 8005b0a:	eba3 0309 	sub.w	r3, r3, r9
 8005b0e:	9306      	str	r3, [sp, #24]
 8005b10:	f1c9 0300 	rsb	r3, r9, #0
 8005b14:	930a      	str	r3, [sp, #40]	; 0x28
 8005b16:	2300      	movs	r3, #0
 8005b18:	930e      	str	r3, [sp, #56]	; 0x38
 8005b1a:	e7bf      	b.n	8005a9c <_dtoa_r+0x1cc>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dc59      	bgt.n	8005bda <_dtoa_r+0x30a>
 8005b26:	f04f 0b01 	mov.w	fp, #1
 8005b2a:	465b      	mov	r3, fp
 8005b2c:	f8cd b008 	str.w	fp, [sp, #8]
 8005b30:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005b34:	2200      	movs	r2, #0
 8005b36:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005b38:	6042      	str	r2, [r0, #4]
 8005b3a:	2204      	movs	r2, #4
 8005b3c:	f102 0614 	add.w	r6, r2, #20
 8005b40:	429e      	cmp	r6, r3
 8005b42:	6841      	ldr	r1, [r0, #4]
 8005b44:	d94f      	bls.n	8005be6 <_dtoa_r+0x316>
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 fef8 	bl	800693c <_Balloc>
 8005b4c:	9008      	str	r0, [sp, #32]
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d14d      	bne.n	8005bee <_dtoa_r+0x31e>
 8005b52:	4602      	mov	r2, r0
 8005b54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <_dtoa_r+0x300>)
 8005b5a:	e6cd      	b.n	80058f8 <_dtoa_r+0x28>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e7de      	b.n	8005b1e <_dtoa_r+0x24e>
 8005b60:	2300      	movs	r3, #0
 8005b62:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b66:	eb09 0b03 	add.w	fp, r9, r3
 8005b6a:	f10b 0301 	add.w	r3, fp, #1
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	9302      	str	r3, [sp, #8]
 8005b72:	bfb8      	it	lt
 8005b74:	2301      	movlt	r3, #1
 8005b76:	e7dd      	b.n	8005b34 <_dtoa_r+0x264>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e7f2      	b.n	8005b62 <_dtoa_r+0x292>
 8005b7c:	2401      	movs	r4, #1
 8005b7e:	2300      	movs	r3, #0
 8005b80:	940b      	str	r4, [sp, #44]	; 0x2c
 8005b82:	9322      	str	r3, [sp, #136]	; 0x88
 8005b84:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005b88:	2200      	movs	r2, #0
 8005b8a:	2312      	movs	r3, #18
 8005b8c:	f8cd b008 	str.w	fp, [sp, #8]
 8005b90:	9223      	str	r2, [sp, #140]	; 0x8c
 8005b92:	e7cf      	b.n	8005b34 <_dtoa_r+0x264>
 8005b94:	f3af 8000 	nop.w
 8005b98:	636f4361 	.word	0x636f4361
 8005b9c:	3fd287a7 	.word	0x3fd287a7
 8005ba0:	8b60c8b3 	.word	0x8b60c8b3
 8005ba4:	3fc68a28 	.word	0x3fc68a28
 8005ba8:	509f79fb 	.word	0x509f79fb
 8005bac:	3fd34413 	.word	0x3fd34413
 8005bb0:	080077bd 	.word	0x080077bd
 8005bb4:	080077d4 	.word	0x080077d4
 8005bb8:	7ff00000 	.word	0x7ff00000
 8005bbc:	080077b9 	.word	0x080077b9
 8005bc0:	080077b0 	.word	0x080077b0
 8005bc4:	0800778d 	.word	0x0800778d
 8005bc8:	3ff80000 	.word	0x3ff80000
 8005bcc:	08007930 	.word	0x08007930
 8005bd0:	08007833 	.word	0x08007833
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bd8:	e7d4      	b.n	8005b84 <_dtoa_r+0x2b4>
 8005bda:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005bde:	465b      	mov	r3, fp
 8005be0:	f8cd b008 	str.w	fp, [sp, #8]
 8005be4:	e7a6      	b.n	8005b34 <_dtoa_r+0x264>
 8005be6:	3101      	adds	r1, #1
 8005be8:	6041      	str	r1, [r0, #4]
 8005bea:	0052      	lsls	r2, r2, #1
 8005bec:	e7a6      	b.n	8005b3c <_dtoa_r+0x26c>
 8005bee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005bf0:	9a08      	ldr	r2, [sp, #32]
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	9b02      	ldr	r3, [sp, #8]
 8005bf6:	2b0e      	cmp	r3, #14
 8005bf8:	f200 80a8 	bhi.w	8005d4c <_dtoa_r+0x47c>
 8005bfc:	2c00      	cmp	r4, #0
 8005bfe:	f000 80a5 	beq.w	8005d4c <_dtoa_r+0x47c>
 8005c02:	f1b9 0f00 	cmp.w	r9, #0
 8005c06:	dd34      	ble.n	8005c72 <_dtoa_r+0x3a2>
 8005c08:	4a9a      	ldr	r2, [pc, #616]	; (8005e74 <_dtoa_r+0x5a4>)
 8005c0a:	f009 030f 	and.w	r3, r9, #15
 8005c0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c12:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005c16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c1a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005c1e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8005c22:	d016      	beq.n	8005c52 <_dtoa_r+0x382>
 8005c24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c28:	4b93      	ldr	r3, [pc, #588]	; (8005e78 <_dtoa_r+0x5a8>)
 8005c2a:	2703      	movs	r7, #3
 8005c2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c30:	f7fa fd7c 	bl	800072c <__aeabi_ddiv>
 8005c34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c38:	f004 040f 	and.w	r4, r4, #15
 8005c3c:	4e8e      	ldr	r6, [pc, #568]	; (8005e78 <_dtoa_r+0x5a8>)
 8005c3e:	b954      	cbnz	r4, 8005c56 <_dtoa_r+0x386>
 8005c40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c48:	f7fa fd70 	bl	800072c <__aeabi_ddiv>
 8005c4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c50:	e029      	b.n	8005ca6 <_dtoa_r+0x3d6>
 8005c52:	2702      	movs	r7, #2
 8005c54:	e7f2      	b.n	8005c3c <_dtoa_r+0x36c>
 8005c56:	07e1      	lsls	r1, r4, #31
 8005c58:	d508      	bpl.n	8005c6c <_dtoa_r+0x39c>
 8005c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c62:	f7fa fc39 	bl	80004d8 <__aeabi_dmul>
 8005c66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c6a:	3701      	adds	r7, #1
 8005c6c:	1064      	asrs	r4, r4, #1
 8005c6e:	3608      	adds	r6, #8
 8005c70:	e7e5      	b.n	8005c3e <_dtoa_r+0x36e>
 8005c72:	f000 80a5 	beq.w	8005dc0 <_dtoa_r+0x4f0>
 8005c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c7a:	f1c9 0400 	rsb	r4, r9, #0
 8005c7e:	4b7d      	ldr	r3, [pc, #500]	; (8005e74 <_dtoa_r+0x5a4>)
 8005c80:	f004 020f 	and.w	r2, r4, #15
 8005c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8c:	f7fa fc24 	bl	80004d8 <__aeabi_dmul>
 8005c90:	2702      	movs	r7, #2
 8005c92:	2300      	movs	r3, #0
 8005c94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c98:	4e77      	ldr	r6, [pc, #476]	; (8005e78 <_dtoa_r+0x5a8>)
 8005c9a:	1124      	asrs	r4, r4, #4
 8005c9c:	2c00      	cmp	r4, #0
 8005c9e:	f040 8084 	bne.w	8005daa <_dtoa_r+0x4da>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1d2      	bne.n	8005c4c <_dtoa_r+0x37c>
 8005ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 808b 	beq.w	8005dc4 <_dtoa_r+0x4f4>
 8005cae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005cb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005cb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cba:	2200      	movs	r2, #0
 8005cbc:	4b6f      	ldr	r3, [pc, #444]	; (8005e7c <_dtoa_r+0x5ac>)
 8005cbe:	f7fa fe7d 	bl	80009bc <__aeabi_dcmplt>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d07e      	beq.n	8005dc4 <_dtoa_r+0x4f4>
 8005cc6:	9b02      	ldr	r3, [sp, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d07b      	beq.n	8005dc4 <_dtoa_r+0x4f4>
 8005ccc:	f1bb 0f00 	cmp.w	fp, #0
 8005cd0:	dd38      	ble.n	8005d44 <_dtoa_r+0x474>
 8005cd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4b69      	ldr	r3, [pc, #420]	; (8005e80 <_dtoa_r+0x5b0>)
 8005cda:	f7fa fbfd 	bl	80004d8 <__aeabi_dmul>
 8005cde:	465c      	mov	r4, fp
 8005ce0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ce4:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8005ce8:	3701      	adds	r7, #1
 8005cea:	4638      	mov	r0, r7
 8005cec:	f7fa fb8a 	bl	8000404 <__aeabi_i2d>
 8005cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cf4:	f7fa fbf0 	bl	80004d8 <__aeabi_dmul>
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	4b62      	ldr	r3, [pc, #392]	; (8005e84 <_dtoa_r+0x5b4>)
 8005cfc:	f7fa fa36 	bl	800016c <__adddf3>
 8005d00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005d04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d08:	9611      	str	r6, [sp, #68]	; 0x44
 8005d0a:	2c00      	cmp	r4, #0
 8005d0c:	d15d      	bne.n	8005dca <_dtoa_r+0x4fa>
 8005d0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d12:	2200      	movs	r2, #0
 8005d14:	4b5c      	ldr	r3, [pc, #368]	; (8005e88 <_dtoa_r+0x5b8>)
 8005d16:	f7fa fa27 	bl	8000168 <__aeabi_dsub>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d22:	4633      	mov	r3, r6
 8005d24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d26:	f7fa fe67 	bl	80009f8 <__aeabi_dcmpgt>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	f040 829e 	bne.w	800626c <_dtoa_r+0x99c>
 8005d30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d36:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005d3a:	f7fa fe3f 	bl	80009bc <__aeabi_dcmplt>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f040 8292 	bne.w	8006268 <_dtoa_r+0x998>
 8005d44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005d48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f2c0 8153 	blt.w	8005ffa <_dtoa_r+0x72a>
 8005d54:	f1b9 0f0e 	cmp.w	r9, #14
 8005d58:	f300 814f 	bgt.w	8005ffa <_dtoa_r+0x72a>
 8005d5c:	4b45      	ldr	r3, [pc, #276]	; (8005e74 <_dtoa_r+0x5a4>)
 8005d5e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005d62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d66:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005d6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f280 80db 	bge.w	8005f28 <_dtoa_r+0x658>
 8005d72:	9b02      	ldr	r3, [sp, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f300 80d7 	bgt.w	8005f28 <_dtoa_r+0x658>
 8005d7a:	f040 8274 	bne.w	8006266 <_dtoa_r+0x996>
 8005d7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d82:	2200      	movs	r2, #0
 8005d84:	4b40      	ldr	r3, [pc, #256]	; (8005e88 <_dtoa_r+0x5b8>)
 8005d86:	f7fa fba7 	bl	80004d8 <__aeabi_dmul>
 8005d8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d8e:	f7fa fe29 	bl	80009e4 <__aeabi_dcmpge>
 8005d92:	9c02      	ldr	r4, [sp, #8]
 8005d94:	4626      	mov	r6, r4
 8005d96:	2800      	cmp	r0, #0
 8005d98:	f040 824a 	bne.w	8006230 <_dtoa_r+0x960>
 8005d9c:	2331      	movs	r3, #49	; 0x31
 8005d9e:	9f08      	ldr	r7, [sp, #32]
 8005da0:	f109 0901 	add.w	r9, r9, #1
 8005da4:	f807 3b01 	strb.w	r3, [r7], #1
 8005da8:	e246      	b.n	8006238 <_dtoa_r+0x968>
 8005daa:	07e2      	lsls	r2, r4, #31
 8005dac:	d505      	bpl.n	8005dba <_dtoa_r+0x4ea>
 8005dae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005db2:	f7fa fb91 	bl	80004d8 <__aeabi_dmul>
 8005db6:	2301      	movs	r3, #1
 8005db8:	3701      	adds	r7, #1
 8005dba:	1064      	asrs	r4, r4, #1
 8005dbc:	3608      	adds	r6, #8
 8005dbe:	e76d      	b.n	8005c9c <_dtoa_r+0x3cc>
 8005dc0:	2702      	movs	r7, #2
 8005dc2:	e770      	b.n	8005ca6 <_dtoa_r+0x3d6>
 8005dc4:	46c8      	mov	r8, r9
 8005dc6:	9c02      	ldr	r4, [sp, #8]
 8005dc8:	e78f      	b.n	8005cea <_dtoa_r+0x41a>
 8005dca:	9908      	ldr	r1, [sp, #32]
 8005dcc:	4b29      	ldr	r3, [pc, #164]	; (8005e74 <_dtoa_r+0x5a4>)
 8005dce:	4421      	add	r1, r4
 8005dd0:	9112      	str	r1, [sp, #72]	; 0x48
 8005dd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005dd8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005ddc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005de0:	2900      	cmp	r1, #0
 8005de2:	d055      	beq.n	8005e90 <_dtoa_r+0x5c0>
 8005de4:	2000      	movs	r0, #0
 8005de6:	4929      	ldr	r1, [pc, #164]	; (8005e8c <_dtoa_r+0x5bc>)
 8005de8:	f7fa fca0 	bl	800072c <__aeabi_ddiv>
 8005dec:	463b      	mov	r3, r7
 8005dee:	4632      	mov	r2, r6
 8005df0:	f7fa f9ba 	bl	8000168 <__aeabi_dsub>
 8005df4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005df8:	9f08      	ldr	r7, [sp, #32]
 8005dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dfe:	f7fa fe1b 	bl	8000a38 <__aeabi_d2iz>
 8005e02:	4604      	mov	r4, r0
 8005e04:	f7fa fafe 	bl	8000404 <__aeabi_i2d>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e10:	f7fa f9aa 	bl	8000168 <__aeabi_dsub>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	3430      	adds	r4, #48	; 0x30
 8005e1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005e1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e22:	f807 4b01 	strb.w	r4, [r7], #1
 8005e26:	f7fa fdc9 	bl	80009bc <__aeabi_dcmplt>
 8005e2a:	2800      	cmp	r0, #0
 8005e2c:	d174      	bne.n	8005f18 <_dtoa_r+0x648>
 8005e2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e32:	2000      	movs	r0, #0
 8005e34:	4911      	ldr	r1, [pc, #68]	; (8005e7c <_dtoa_r+0x5ac>)
 8005e36:	f7fa f997 	bl	8000168 <__aeabi_dsub>
 8005e3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005e3e:	f7fa fdbd 	bl	80009bc <__aeabi_dcmplt>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	f040 80b6 	bne.w	8005fb4 <_dtoa_r+0x6e4>
 8005e48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e4a:	429f      	cmp	r7, r3
 8005e4c:	f43f af7a 	beq.w	8005d44 <_dtoa_r+0x474>
 8005e50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e54:	2200      	movs	r2, #0
 8005e56:	4b0a      	ldr	r3, [pc, #40]	; (8005e80 <_dtoa_r+0x5b0>)
 8005e58:	f7fa fb3e 	bl	80004d8 <__aeabi_dmul>
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e66:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <_dtoa_r+0x5b0>)
 8005e68:	f7fa fb36 	bl	80004d8 <__aeabi_dmul>
 8005e6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e70:	e7c3      	b.n	8005dfa <_dtoa_r+0x52a>
 8005e72:	bf00      	nop
 8005e74:	08007930 	.word	0x08007930
 8005e78:	08007908 	.word	0x08007908
 8005e7c:	3ff00000 	.word	0x3ff00000
 8005e80:	40240000 	.word	0x40240000
 8005e84:	401c0000 	.word	0x401c0000
 8005e88:	40140000 	.word	0x40140000
 8005e8c:	3fe00000 	.word	0x3fe00000
 8005e90:	4630      	mov	r0, r6
 8005e92:	4639      	mov	r1, r7
 8005e94:	f7fa fb20 	bl	80004d8 <__aeabi_dmul>
 8005e98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005e9e:	9c08      	ldr	r4, [sp, #32]
 8005ea0:	9314      	str	r3, [sp, #80]	; 0x50
 8005ea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ea6:	f7fa fdc7 	bl	8000a38 <__aeabi_d2iz>
 8005eaa:	9015      	str	r0, [sp, #84]	; 0x54
 8005eac:	f7fa faaa 	bl	8000404 <__aeabi_i2d>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005eb8:	f7fa f956 	bl	8000168 <__aeabi_dsub>
 8005ebc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	3330      	adds	r3, #48	; 0x30
 8005ec2:	f804 3b01 	strb.w	r3, [r4], #1
 8005ec6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ec8:	460f      	mov	r7, r1
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	d124      	bne.n	8005f1c <_dtoa_r+0x64c>
 8005ed2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005ed6:	4bb3      	ldr	r3, [pc, #716]	; (80061a4 <_dtoa_r+0x8d4>)
 8005ed8:	f7fa f948 	bl	800016c <__adddf3>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa fd88 	bl	80009f8 <__aeabi_dcmpgt>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d162      	bne.n	8005fb2 <_dtoa_r+0x6e2>
 8005eec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	49ac      	ldr	r1, [pc, #688]	; (80061a4 <_dtoa_r+0x8d4>)
 8005ef4:	f7fa f938 	bl	8000168 <__aeabi_dsub>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4630      	mov	r0, r6
 8005efe:	4639      	mov	r1, r7
 8005f00:	f7fa fd5c 	bl	80009bc <__aeabi_dcmplt>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	f43f af1d 	beq.w	8005d44 <_dtoa_r+0x474>
 8005f0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005f0c:	1e7b      	subs	r3, r7, #1
 8005f0e:	9314      	str	r3, [sp, #80]	; 0x50
 8005f10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005f14:	2b30      	cmp	r3, #48	; 0x30
 8005f16:	d0f8      	beq.n	8005f0a <_dtoa_r+0x63a>
 8005f18:	46c1      	mov	r9, r8
 8005f1a:	e03a      	b.n	8005f92 <_dtoa_r+0x6c2>
 8005f1c:	4ba2      	ldr	r3, [pc, #648]	; (80061a8 <_dtoa_r+0x8d8>)
 8005f1e:	f7fa fadb 	bl	80004d8 <__aeabi_dmul>
 8005f22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f26:	e7bc      	b.n	8005ea2 <_dtoa_r+0x5d2>
 8005f28:	9f08      	ldr	r7, [sp, #32]
 8005f2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f32:	f7fa fbfb 	bl	800072c <__aeabi_ddiv>
 8005f36:	f7fa fd7f 	bl	8000a38 <__aeabi_d2iz>
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	f7fa fa62 	bl	8000404 <__aeabi_i2d>
 8005f40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f44:	f7fa fac8 	bl	80004d8 <__aeabi_dmul>
 8005f48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4602      	mov	r2, r0
 8005f50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f54:	f7fa f908 	bl	8000168 <__aeabi_dsub>
 8005f58:	f807 6b01 	strb.w	r6, [r7], #1
 8005f5c:	9e08      	ldr	r6, [sp, #32]
 8005f5e:	9b02      	ldr	r3, [sp, #8]
 8005f60:	1bbe      	subs	r6, r7, r6
 8005f62:	42b3      	cmp	r3, r6
 8005f64:	d13a      	bne.n	8005fdc <_dtoa_r+0x70c>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	f7fa f8ff 	bl	800016c <__adddf3>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f7a:	f7fa fd3d 	bl	80009f8 <__aeabi_dcmpgt>
 8005f7e:	bb58      	cbnz	r0, 8005fd8 <_dtoa_r+0x708>
 8005f80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f88:	f7fa fd0e 	bl	80009a8 <__aeabi_dcmpeq>
 8005f8c:	b108      	cbz	r0, 8005f92 <_dtoa_r+0x6c2>
 8005f8e:	07e1      	lsls	r1, r4, #31
 8005f90:	d422      	bmi.n	8005fd8 <_dtoa_r+0x708>
 8005f92:	4628      	mov	r0, r5
 8005f94:	4651      	mov	r1, sl
 8005f96:	f000 fd11 	bl	80069bc <_Bfree>
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	703b      	strb	r3, [r7, #0]
 8005f9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005fa0:	f109 0001 	add.w	r0, r9, #1
 8005fa4:	6018      	str	r0, [r3, #0]
 8005fa6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f43f acdf 	beq.w	800596c <_dtoa_r+0x9c>
 8005fae:	601f      	str	r7, [r3, #0]
 8005fb0:	e4dc      	b.n	800596c <_dtoa_r+0x9c>
 8005fb2:	4627      	mov	r7, r4
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	461f      	mov	r7, r3
 8005fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fbc:	2a39      	cmp	r2, #57	; 0x39
 8005fbe:	d107      	bne.n	8005fd0 <_dtoa_r+0x700>
 8005fc0:	9a08      	ldr	r2, [sp, #32]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d1f7      	bne.n	8005fb6 <_dtoa_r+0x6e6>
 8005fc6:	2230      	movs	r2, #48	; 0x30
 8005fc8:	9908      	ldr	r1, [sp, #32]
 8005fca:	f108 0801 	add.w	r8, r8, #1
 8005fce:	700a      	strb	r2, [r1, #0]
 8005fd0:	781a      	ldrb	r2, [r3, #0]
 8005fd2:	3201      	adds	r2, #1
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	e79f      	b.n	8005f18 <_dtoa_r+0x648>
 8005fd8:	46c8      	mov	r8, r9
 8005fda:	e7eb      	b.n	8005fb4 <_dtoa_r+0x6e4>
 8005fdc:	2200      	movs	r2, #0
 8005fde:	4b72      	ldr	r3, [pc, #456]	; (80061a8 <_dtoa_r+0x8d8>)
 8005fe0:	f7fa fa7a 	bl	80004d8 <__aeabi_dmul>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005fec:	2200      	movs	r2, #0
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f7fa fcda 	bl	80009a8 <__aeabi_dcmpeq>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d098      	beq.n	8005f2a <_dtoa_r+0x65a>
 8005ff8:	e7cb      	b.n	8005f92 <_dtoa_r+0x6c2>
 8005ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ffc:	2a00      	cmp	r2, #0
 8005ffe:	f000 80cd 	beq.w	800619c <_dtoa_r+0x8cc>
 8006002:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006004:	2a01      	cmp	r2, #1
 8006006:	f300 80af 	bgt.w	8006168 <_dtoa_r+0x898>
 800600a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800600c:	2a00      	cmp	r2, #0
 800600e:	f000 80a7 	beq.w	8006160 <_dtoa_r+0x890>
 8006012:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006016:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006018:	9f06      	ldr	r7, [sp, #24]
 800601a:	9a06      	ldr	r2, [sp, #24]
 800601c:	2101      	movs	r1, #1
 800601e:	441a      	add	r2, r3
 8006020:	9206      	str	r2, [sp, #24]
 8006022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006024:	4628      	mov	r0, r5
 8006026:	441a      	add	r2, r3
 8006028:	9209      	str	r2, [sp, #36]	; 0x24
 800602a:	f000 fd81 	bl	8006b30 <__i2b>
 800602e:	4606      	mov	r6, r0
 8006030:	2f00      	cmp	r7, #0
 8006032:	dd0c      	ble.n	800604e <_dtoa_r+0x77e>
 8006034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	dd09      	ble.n	800604e <_dtoa_r+0x77e>
 800603a:	42bb      	cmp	r3, r7
 800603c:	bfa8      	it	ge
 800603e:	463b      	movge	r3, r7
 8006040:	9a06      	ldr	r2, [sp, #24]
 8006042:	1aff      	subs	r7, r7, r3
 8006044:	1ad2      	subs	r2, r2, r3
 8006046:	9206      	str	r2, [sp, #24]
 8006048:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	9309      	str	r3, [sp, #36]	; 0x24
 800604e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006050:	b1f3      	cbz	r3, 8006090 <_dtoa_r+0x7c0>
 8006052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 80a9 	beq.w	80061ac <_dtoa_r+0x8dc>
 800605a:	2c00      	cmp	r4, #0
 800605c:	dd10      	ble.n	8006080 <_dtoa_r+0x7b0>
 800605e:	4631      	mov	r1, r6
 8006060:	4622      	mov	r2, r4
 8006062:	4628      	mov	r0, r5
 8006064:	f000 fe1e 	bl	8006ca4 <__pow5mult>
 8006068:	4652      	mov	r2, sl
 800606a:	4601      	mov	r1, r0
 800606c:	4606      	mov	r6, r0
 800606e:	4628      	mov	r0, r5
 8006070:	f000 fd74 	bl	8006b5c <__multiply>
 8006074:	4680      	mov	r8, r0
 8006076:	4651      	mov	r1, sl
 8006078:	4628      	mov	r0, r5
 800607a:	f000 fc9f 	bl	80069bc <_Bfree>
 800607e:	46c2      	mov	sl, r8
 8006080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006082:	1b1a      	subs	r2, r3, r4
 8006084:	d004      	beq.n	8006090 <_dtoa_r+0x7c0>
 8006086:	4651      	mov	r1, sl
 8006088:	4628      	mov	r0, r5
 800608a:	f000 fe0b 	bl	8006ca4 <__pow5mult>
 800608e:	4682      	mov	sl, r0
 8006090:	2101      	movs	r1, #1
 8006092:	4628      	mov	r0, r5
 8006094:	f000 fd4c 	bl	8006b30 <__i2b>
 8006098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800609a:	4604      	mov	r4, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	f340 8087 	ble.w	80061b0 <_dtoa_r+0x8e0>
 80060a2:	461a      	mov	r2, r3
 80060a4:	4601      	mov	r1, r0
 80060a6:	4628      	mov	r0, r5
 80060a8:	f000 fdfc 	bl	8006ca4 <__pow5mult>
 80060ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060ae:	4604      	mov	r4, r0
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	f340 8080 	ble.w	80061b6 <_dtoa_r+0x8e6>
 80060b6:	f04f 0800 	mov.w	r8, #0
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060c0:	6918      	ldr	r0, [r3, #16]
 80060c2:	f000 fce7 	bl	8006a94 <__hi0bits>
 80060c6:	f1c0 0020 	rsb	r0, r0, #32
 80060ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060cc:	4418      	add	r0, r3
 80060ce:	f010 001f 	ands.w	r0, r0, #31
 80060d2:	f000 8092 	beq.w	80061fa <_dtoa_r+0x92a>
 80060d6:	f1c0 0320 	rsb	r3, r0, #32
 80060da:	2b04      	cmp	r3, #4
 80060dc:	f340 808a 	ble.w	80061f4 <_dtoa_r+0x924>
 80060e0:	f1c0 001c 	rsb	r0, r0, #28
 80060e4:	9b06      	ldr	r3, [sp, #24]
 80060e6:	4407      	add	r7, r0
 80060e8:	4403      	add	r3, r0
 80060ea:	9306      	str	r3, [sp, #24]
 80060ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ee:	4403      	add	r3, r0
 80060f0:	9309      	str	r3, [sp, #36]	; 0x24
 80060f2:	9b06      	ldr	r3, [sp, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	dd05      	ble.n	8006104 <_dtoa_r+0x834>
 80060f8:	4651      	mov	r1, sl
 80060fa:	461a      	mov	r2, r3
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 fe2b 	bl	8006d58 <__lshift>
 8006102:	4682      	mov	sl, r0
 8006104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006106:	2b00      	cmp	r3, #0
 8006108:	dd05      	ble.n	8006116 <_dtoa_r+0x846>
 800610a:	4621      	mov	r1, r4
 800610c:	461a      	mov	r2, r3
 800610e:	4628      	mov	r0, r5
 8006110:	f000 fe22 	bl	8006d58 <__lshift>
 8006114:	4604      	mov	r4, r0
 8006116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d070      	beq.n	80061fe <_dtoa_r+0x92e>
 800611c:	4621      	mov	r1, r4
 800611e:	4650      	mov	r0, sl
 8006120:	f000 fe86 	bl	8006e30 <__mcmp>
 8006124:	2800      	cmp	r0, #0
 8006126:	da6a      	bge.n	80061fe <_dtoa_r+0x92e>
 8006128:	2300      	movs	r3, #0
 800612a:	4651      	mov	r1, sl
 800612c:	220a      	movs	r2, #10
 800612e:	4628      	mov	r0, r5
 8006130:	f000 fc66 	bl	8006a00 <__multadd>
 8006134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006136:	4682      	mov	sl, r0
 8006138:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8193 	beq.w	8006468 <_dtoa_r+0xb98>
 8006142:	4631      	mov	r1, r6
 8006144:	2300      	movs	r3, #0
 8006146:	220a      	movs	r2, #10
 8006148:	4628      	mov	r0, r5
 800614a:	f000 fc59 	bl	8006a00 <__multadd>
 800614e:	f1bb 0f00 	cmp.w	fp, #0
 8006152:	4606      	mov	r6, r0
 8006154:	f300 8093 	bgt.w	800627e <_dtoa_r+0x9ae>
 8006158:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800615a:	2b02      	cmp	r3, #2
 800615c:	dc57      	bgt.n	800620e <_dtoa_r+0x93e>
 800615e:	e08e      	b.n	800627e <_dtoa_r+0x9ae>
 8006160:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006162:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006166:	e756      	b.n	8006016 <_dtoa_r+0x746>
 8006168:	9b02      	ldr	r3, [sp, #8]
 800616a:	1e5c      	subs	r4, r3, #1
 800616c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800616e:	42a3      	cmp	r3, r4
 8006170:	bfb7      	itett	lt
 8006172:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006174:	1b1c      	subge	r4, r3, r4
 8006176:	1ae2      	sublt	r2, r4, r3
 8006178:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800617a:	bfbe      	ittt	lt
 800617c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800617e:	189b      	addlt	r3, r3, r2
 8006180:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006182:	9b02      	ldr	r3, [sp, #8]
 8006184:	bfb8      	it	lt
 8006186:	2400      	movlt	r4, #0
 8006188:	2b00      	cmp	r3, #0
 800618a:	bfbb      	ittet	lt
 800618c:	9b06      	ldrlt	r3, [sp, #24]
 800618e:	9a02      	ldrlt	r2, [sp, #8]
 8006190:	9f06      	ldrge	r7, [sp, #24]
 8006192:	1a9f      	sublt	r7, r3, r2
 8006194:	bfac      	ite	ge
 8006196:	9b02      	ldrge	r3, [sp, #8]
 8006198:	2300      	movlt	r3, #0
 800619a:	e73e      	b.n	800601a <_dtoa_r+0x74a>
 800619c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800619e:	9f06      	ldr	r7, [sp, #24]
 80061a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80061a2:	e745      	b.n	8006030 <_dtoa_r+0x760>
 80061a4:	3fe00000 	.word	0x3fe00000
 80061a8:	40240000 	.word	0x40240000
 80061ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061ae:	e76a      	b.n	8006086 <_dtoa_r+0x7b6>
 80061b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	dc19      	bgt.n	80061ea <_dtoa_r+0x91a>
 80061b6:	9b04      	ldr	r3, [sp, #16]
 80061b8:	b9bb      	cbnz	r3, 80061ea <_dtoa_r+0x91a>
 80061ba:	9b05      	ldr	r3, [sp, #20]
 80061bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061c0:	b99b      	cbnz	r3, 80061ea <_dtoa_r+0x91a>
 80061c2:	9b05      	ldr	r3, [sp, #20]
 80061c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061c8:	0d1b      	lsrs	r3, r3, #20
 80061ca:	051b      	lsls	r3, r3, #20
 80061cc:	b183      	cbz	r3, 80061f0 <_dtoa_r+0x920>
 80061ce:	f04f 0801 	mov.w	r8, #1
 80061d2:	9b06      	ldr	r3, [sp, #24]
 80061d4:	3301      	adds	r3, #1
 80061d6:	9306      	str	r3, [sp, #24]
 80061d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061da:	3301      	adds	r3, #1
 80061dc:	9309      	str	r3, [sp, #36]	; 0x24
 80061de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f47f af6a 	bne.w	80060ba <_dtoa_r+0x7ea>
 80061e6:	2001      	movs	r0, #1
 80061e8:	e76f      	b.n	80060ca <_dtoa_r+0x7fa>
 80061ea:	f04f 0800 	mov.w	r8, #0
 80061ee:	e7f6      	b.n	80061de <_dtoa_r+0x90e>
 80061f0:	4698      	mov	r8, r3
 80061f2:	e7f4      	b.n	80061de <_dtoa_r+0x90e>
 80061f4:	f43f af7d 	beq.w	80060f2 <_dtoa_r+0x822>
 80061f8:	4618      	mov	r0, r3
 80061fa:	301c      	adds	r0, #28
 80061fc:	e772      	b.n	80060e4 <_dtoa_r+0x814>
 80061fe:	9b02      	ldr	r3, [sp, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	dc36      	bgt.n	8006272 <_dtoa_r+0x9a2>
 8006204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006206:	2b02      	cmp	r3, #2
 8006208:	dd33      	ble.n	8006272 <_dtoa_r+0x9a2>
 800620a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800620e:	f1bb 0f00 	cmp.w	fp, #0
 8006212:	d10d      	bne.n	8006230 <_dtoa_r+0x960>
 8006214:	4621      	mov	r1, r4
 8006216:	465b      	mov	r3, fp
 8006218:	2205      	movs	r2, #5
 800621a:	4628      	mov	r0, r5
 800621c:	f000 fbf0 	bl	8006a00 <__multadd>
 8006220:	4601      	mov	r1, r0
 8006222:	4604      	mov	r4, r0
 8006224:	4650      	mov	r0, sl
 8006226:	f000 fe03 	bl	8006e30 <__mcmp>
 800622a:	2800      	cmp	r0, #0
 800622c:	f73f adb6 	bgt.w	8005d9c <_dtoa_r+0x4cc>
 8006230:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006232:	9f08      	ldr	r7, [sp, #32]
 8006234:	ea6f 0903 	mvn.w	r9, r3
 8006238:	f04f 0800 	mov.w	r8, #0
 800623c:	4621      	mov	r1, r4
 800623e:	4628      	mov	r0, r5
 8006240:	f000 fbbc 	bl	80069bc <_Bfree>
 8006244:	2e00      	cmp	r6, #0
 8006246:	f43f aea4 	beq.w	8005f92 <_dtoa_r+0x6c2>
 800624a:	f1b8 0f00 	cmp.w	r8, #0
 800624e:	d005      	beq.n	800625c <_dtoa_r+0x98c>
 8006250:	45b0      	cmp	r8, r6
 8006252:	d003      	beq.n	800625c <_dtoa_r+0x98c>
 8006254:	4641      	mov	r1, r8
 8006256:	4628      	mov	r0, r5
 8006258:	f000 fbb0 	bl	80069bc <_Bfree>
 800625c:	4631      	mov	r1, r6
 800625e:	4628      	mov	r0, r5
 8006260:	f000 fbac 	bl	80069bc <_Bfree>
 8006264:	e695      	b.n	8005f92 <_dtoa_r+0x6c2>
 8006266:	2400      	movs	r4, #0
 8006268:	4626      	mov	r6, r4
 800626a:	e7e1      	b.n	8006230 <_dtoa_r+0x960>
 800626c:	46c1      	mov	r9, r8
 800626e:	4626      	mov	r6, r4
 8006270:	e594      	b.n	8005d9c <_dtoa_r+0x4cc>
 8006272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006274:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f000 80fc 	beq.w	8006476 <_dtoa_r+0xba6>
 800627e:	2f00      	cmp	r7, #0
 8006280:	dd05      	ble.n	800628e <_dtoa_r+0x9be>
 8006282:	4631      	mov	r1, r6
 8006284:	463a      	mov	r2, r7
 8006286:	4628      	mov	r0, r5
 8006288:	f000 fd66 	bl	8006d58 <__lshift>
 800628c:	4606      	mov	r6, r0
 800628e:	f1b8 0f00 	cmp.w	r8, #0
 8006292:	d05c      	beq.n	800634e <_dtoa_r+0xa7e>
 8006294:	4628      	mov	r0, r5
 8006296:	6871      	ldr	r1, [r6, #4]
 8006298:	f000 fb50 	bl	800693c <_Balloc>
 800629c:	4607      	mov	r7, r0
 800629e:	b928      	cbnz	r0, 80062ac <_dtoa_r+0x9dc>
 80062a0:	4602      	mov	r2, r0
 80062a2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062a6:	4b7e      	ldr	r3, [pc, #504]	; (80064a0 <_dtoa_r+0xbd0>)
 80062a8:	f7ff bb26 	b.w	80058f8 <_dtoa_r+0x28>
 80062ac:	6932      	ldr	r2, [r6, #16]
 80062ae:	f106 010c 	add.w	r1, r6, #12
 80062b2:	3202      	adds	r2, #2
 80062b4:	0092      	lsls	r2, r2, #2
 80062b6:	300c      	adds	r0, #12
 80062b8:	f000 fb32 	bl	8006920 <memcpy>
 80062bc:	2201      	movs	r2, #1
 80062be:	4639      	mov	r1, r7
 80062c0:	4628      	mov	r0, r5
 80062c2:	f000 fd49 	bl	8006d58 <__lshift>
 80062c6:	46b0      	mov	r8, r6
 80062c8:	4606      	mov	r6, r0
 80062ca:	9b08      	ldr	r3, [sp, #32]
 80062cc:	3301      	adds	r3, #1
 80062ce:	9302      	str	r3, [sp, #8]
 80062d0:	9b08      	ldr	r3, [sp, #32]
 80062d2:	445b      	add	r3, fp
 80062d4:	930a      	str	r3, [sp, #40]	; 0x28
 80062d6:	9b04      	ldr	r3, [sp, #16]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	9309      	str	r3, [sp, #36]	; 0x24
 80062de:	9b02      	ldr	r3, [sp, #8]
 80062e0:	4621      	mov	r1, r4
 80062e2:	4650      	mov	r0, sl
 80062e4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80062e8:	f7ff fa64 	bl	80057b4 <quorem>
 80062ec:	4603      	mov	r3, r0
 80062ee:	4641      	mov	r1, r8
 80062f0:	3330      	adds	r3, #48	; 0x30
 80062f2:	9004      	str	r0, [sp, #16]
 80062f4:	4650      	mov	r0, sl
 80062f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80062f8:	f000 fd9a 	bl	8006e30 <__mcmp>
 80062fc:	4632      	mov	r2, r6
 80062fe:	9006      	str	r0, [sp, #24]
 8006300:	4621      	mov	r1, r4
 8006302:	4628      	mov	r0, r5
 8006304:	f000 fdb0 	bl	8006e68 <__mdiff>
 8006308:	68c2      	ldr	r2, [r0, #12]
 800630a:	4607      	mov	r7, r0
 800630c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800630e:	bb02      	cbnz	r2, 8006352 <_dtoa_r+0xa82>
 8006310:	4601      	mov	r1, r0
 8006312:	4650      	mov	r0, sl
 8006314:	f000 fd8c 	bl	8006e30 <__mcmp>
 8006318:	4602      	mov	r2, r0
 800631a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800631c:	4639      	mov	r1, r7
 800631e:	4628      	mov	r0, r5
 8006320:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006324:	f000 fb4a 	bl	80069bc <_Bfree>
 8006328:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800632a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800632c:	9f02      	ldr	r7, [sp, #8]
 800632e:	ea43 0102 	orr.w	r1, r3, r2
 8006332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006334:	430b      	orrs	r3, r1
 8006336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006338:	d10d      	bne.n	8006356 <_dtoa_r+0xa86>
 800633a:	2b39      	cmp	r3, #57	; 0x39
 800633c:	d027      	beq.n	800638e <_dtoa_r+0xabe>
 800633e:	9a06      	ldr	r2, [sp, #24]
 8006340:	2a00      	cmp	r2, #0
 8006342:	dd01      	ble.n	8006348 <_dtoa_r+0xa78>
 8006344:	9b04      	ldr	r3, [sp, #16]
 8006346:	3331      	adds	r3, #49	; 0x31
 8006348:	f88b 3000 	strb.w	r3, [fp]
 800634c:	e776      	b.n	800623c <_dtoa_r+0x96c>
 800634e:	4630      	mov	r0, r6
 8006350:	e7b9      	b.n	80062c6 <_dtoa_r+0x9f6>
 8006352:	2201      	movs	r2, #1
 8006354:	e7e2      	b.n	800631c <_dtoa_r+0xa4c>
 8006356:	9906      	ldr	r1, [sp, #24]
 8006358:	2900      	cmp	r1, #0
 800635a:	db04      	blt.n	8006366 <_dtoa_r+0xa96>
 800635c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800635e:	4301      	orrs	r1, r0
 8006360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006362:	4301      	orrs	r1, r0
 8006364:	d120      	bne.n	80063a8 <_dtoa_r+0xad8>
 8006366:	2a00      	cmp	r2, #0
 8006368:	ddee      	ble.n	8006348 <_dtoa_r+0xa78>
 800636a:	4651      	mov	r1, sl
 800636c:	2201      	movs	r2, #1
 800636e:	4628      	mov	r0, r5
 8006370:	9302      	str	r3, [sp, #8]
 8006372:	f000 fcf1 	bl	8006d58 <__lshift>
 8006376:	4621      	mov	r1, r4
 8006378:	4682      	mov	sl, r0
 800637a:	f000 fd59 	bl	8006e30 <__mcmp>
 800637e:	2800      	cmp	r0, #0
 8006380:	9b02      	ldr	r3, [sp, #8]
 8006382:	dc02      	bgt.n	800638a <_dtoa_r+0xaba>
 8006384:	d1e0      	bne.n	8006348 <_dtoa_r+0xa78>
 8006386:	07da      	lsls	r2, r3, #31
 8006388:	d5de      	bpl.n	8006348 <_dtoa_r+0xa78>
 800638a:	2b39      	cmp	r3, #57	; 0x39
 800638c:	d1da      	bne.n	8006344 <_dtoa_r+0xa74>
 800638e:	2339      	movs	r3, #57	; 0x39
 8006390:	f88b 3000 	strb.w	r3, [fp]
 8006394:	463b      	mov	r3, r7
 8006396:	461f      	mov	r7, r3
 8006398:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800639c:	3b01      	subs	r3, #1
 800639e:	2a39      	cmp	r2, #57	; 0x39
 80063a0:	d050      	beq.n	8006444 <_dtoa_r+0xb74>
 80063a2:	3201      	adds	r2, #1
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	e749      	b.n	800623c <_dtoa_r+0x96c>
 80063a8:	2a00      	cmp	r2, #0
 80063aa:	dd03      	ble.n	80063b4 <_dtoa_r+0xae4>
 80063ac:	2b39      	cmp	r3, #57	; 0x39
 80063ae:	d0ee      	beq.n	800638e <_dtoa_r+0xabe>
 80063b0:	3301      	adds	r3, #1
 80063b2:	e7c9      	b.n	8006348 <_dtoa_r+0xa78>
 80063b4:	9a02      	ldr	r2, [sp, #8]
 80063b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80063b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80063bc:	428a      	cmp	r2, r1
 80063be:	d02a      	beq.n	8006416 <_dtoa_r+0xb46>
 80063c0:	4651      	mov	r1, sl
 80063c2:	2300      	movs	r3, #0
 80063c4:	220a      	movs	r2, #10
 80063c6:	4628      	mov	r0, r5
 80063c8:	f000 fb1a 	bl	8006a00 <__multadd>
 80063cc:	45b0      	cmp	r8, r6
 80063ce:	4682      	mov	sl, r0
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	f04f 020a 	mov.w	r2, #10
 80063d8:	4641      	mov	r1, r8
 80063da:	4628      	mov	r0, r5
 80063dc:	d107      	bne.n	80063ee <_dtoa_r+0xb1e>
 80063de:	f000 fb0f 	bl	8006a00 <__multadd>
 80063e2:	4680      	mov	r8, r0
 80063e4:	4606      	mov	r6, r0
 80063e6:	9b02      	ldr	r3, [sp, #8]
 80063e8:	3301      	adds	r3, #1
 80063ea:	9302      	str	r3, [sp, #8]
 80063ec:	e777      	b.n	80062de <_dtoa_r+0xa0e>
 80063ee:	f000 fb07 	bl	8006a00 <__multadd>
 80063f2:	4631      	mov	r1, r6
 80063f4:	4680      	mov	r8, r0
 80063f6:	2300      	movs	r3, #0
 80063f8:	220a      	movs	r2, #10
 80063fa:	4628      	mov	r0, r5
 80063fc:	f000 fb00 	bl	8006a00 <__multadd>
 8006400:	4606      	mov	r6, r0
 8006402:	e7f0      	b.n	80063e6 <_dtoa_r+0xb16>
 8006404:	f1bb 0f00 	cmp.w	fp, #0
 8006408:	bfcc      	ite	gt
 800640a:	465f      	movgt	r7, fp
 800640c:	2701      	movle	r7, #1
 800640e:	f04f 0800 	mov.w	r8, #0
 8006412:	9a08      	ldr	r2, [sp, #32]
 8006414:	4417      	add	r7, r2
 8006416:	4651      	mov	r1, sl
 8006418:	2201      	movs	r2, #1
 800641a:	4628      	mov	r0, r5
 800641c:	9302      	str	r3, [sp, #8]
 800641e:	f000 fc9b 	bl	8006d58 <__lshift>
 8006422:	4621      	mov	r1, r4
 8006424:	4682      	mov	sl, r0
 8006426:	f000 fd03 	bl	8006e30 <__mcmp>
 800642a:	2800      	cmp	r0, #0
 800642c:	dcb2      	bgt.n	8006394 <_dtoa_r+0xac4>
 800642e:	d102      	bne.n	8006436 <_dtoa_r+0xb66>
 8006430:	9b02      	ldr	r3, [sp, #8]
 8006432:	07db      	lsls	r3, r3, #31
 8006434:	d4ae      	bmi.n	8006394 <_dtoa_r+0xac4>
 8006436:	463b      	mov	r3, r7
 8006438:	461f      	mov	r7, r3
 800643a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800643e:	2a30      	cmp	r2, #48	; 0x30
 8006440:	d0fa      	beq.n	8006438 <_dtoa_r+0xb68>
 8006442:	e6fb      	b.n	800623c <_dtoa_r+0x96c>
 8006444:	9a08      	ldr	r2, [sp, #32]
 8006446:	429a      	cmp	r2, r3
 8006448:	d1a5      	bne.n	8006396 <_dtoa_r+0xac6>
 800644a:	2331      	movs	r3, #49	; 0x31
 800644c:	f109 0901 	add.w	r9, r9, #1
 8006450:	7013      	strb	r3, [r2, #0]
 8006452:	e6f3      	b.n	800623c <_dtoa_r+0x96c>
 8006454:	4b13      	ldr	r3, [pc, #76]	; (80064a4 <_dtoa_r+0xbd4>)
 8006456:	f7ff baa7 	b.w	80059a8 <_dtoa_r+0xd8>
 800645a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800645c:	2b00      	cmp	r3, #0
 800645e:	f47f aa80 	bne.w	8005962 <_dtoa_r+0x92>
 8006462:	4b11      	ldr	r3, [pc, #68]	; (80064a8 <_dtoa_r+0xbd8>)
 8006464:	f7ff baa0 	b.w	80059a8 <_dtoa_r+0xd8>
 8006468:	f1bb 0f00 	cmp.w	fp, #0
 800646c:	dc03      	bgt.n	8006476 <_dtoa_r+0xba6>
 800646e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006470:	2b02      	cmp	r3, #2
 8006472:	f73f aecc 	bgt.w	800620e <_dtoa_r+0x93e>
 8006476:	9f08      	ldr	r7, [sp, #32]
 8006478:	4621      	mov	r1, r4
 800647a:	4650      	mov	r0, sl
 800647c:	f7ff f99a 	bl	80057b4 <quorem>
 8006480:	9a08      	ldr	r2, [sp, #32]
 8006482:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006486:	f807 3b01 	strb.w	r3, [r7], #1
 800648a:	1aba      	subs	r2, r7, r2
 800648c:	4593      	cmp	fp, r2
 800648e:	ddb9      	ble.n	8006404 <_dtoa_r+0xb34>
 8006490:	4651      	mov	r1, sl
 8006492:	2300      	movs	r3, #0
 8006494:	220a      	movs	r2, #10
 8006496:	4628      	mov	r0, r5
 8006498:	f000 fab2 	bl	8006a00 <__multadd>
 800649c:	4682      	mov	sl, r0
 800649e:	e7eb      	b.n	8006478 <_dtoa_r+0xba8>
 80064a0:	08007833 	.word	0x08007833
 80064a4:	0800778c 	.word	0x0800778c
 80064a8:	080077b0 	.word	0x080077b0

080064ac <__sflush_r>:
 80064ac:	898a      	ldrh	r2, [r1, #12]
 80064ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b2:	4605      	mov	r5, r0
 80064b4:	0710      	lsls	r0, r2, #28
 80064b6:	460c      	mov	r4, r1
 80064b8:	d458      	bmi.n	800656c <__sflush_r+0xc0>
 80064ba:	684b      	ldr	r3, [r1, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	dc05      	bgt.n	80064cc <__sflush_r+0x20>
 80064c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	dc02      	bgt.n	80064cc <__sflush_r+0x20>
 80064c6:	2000      	movs	r0, #0
 80064c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064ce:	2e00      	cmp	r6, #0
 80064d0:	d0f9      	beq.n	80064c6 <__sflush_r+0x1a>
 80064d2:	2300      	movs	r3, #0
 80064d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064d8:	682f      	ldr	r7, [r5, #0]
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	d032      	beq.n	8006544 <__sflush_r+0x98>
 80064de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	075a      	lsls	r2, r3, #29
 80064e4:	d505      	bpl.n	80064f2 <__sflush_r+0x46>
 80064e6:	6863      	ldr	r3, [r4, #4]
 80064e8:	1ac0      	subs	r0, r0, r3
 80064ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064ec:	b10b      	cbz	r3, 80064f2 <__sflush_r+0x46>
 80064ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064f0:	1ac0      	subs	r0, r0, r3
 80064f2:	2300      	movs	r3, #0
 80064f4:	4602      	mov	r2, r0
 80064f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064f8:	4628      	mov	r0, r5
 80064fa:	6a21      	ldr	r1, [r4, #32]
 80064fc:	47b0      	blx	r6
 80064fe:	1c43      	adds	r3, r0, #1
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	d106      	bne.n	8006512 <__sflush_r+0x66>
 8006504:	6829      	ldr	r1, [r5, #0]
 8006506:	291d      	cmp	r1, #29
 8006508:	d82c      	bhi.n	8006564 <__sflush_r+0xb8>
 800650a:	4a2a      	ldr	r2, [pc, #168]	; (80065b4 <__sflush_r+0x108>)
 800650c:	40ca      	lsrs	r2, r1
 800650e:	07d6      	lsls	r6, r2, #31
 8006510:	d528      	bpl.n	8006564 <__sflush_r+0xb8>
 8006512:	2200      	movs	r2, #0
 8006514:	6062      	str	r2, [r4, #4]
 8006516:	6922      	ldr	r2, [r4, #16]
 8006518:	04d9      	lsls	r1, r3, #19
 800651a:	6022      	str	r2, [r4, #0]
 800651c:	d504      	bpl.n	8006528 <__sflush_r+0x7c>
 800651e:	1c42      	adds	r2, r0, #1
 8006520:	d101      	bne.n	8006526 <__sflush_r+0x7a>
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	b903      	cbnz	r3, 8006528 <__sflush_r+0x7c>
 8006526:	6560      	str	r0, [r4, #84]	; 0x54
 8006528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800652a:	602f      	str	r7, [r5, #0]
 800652c:	2900      	cmp	r1, #0
 800652e:	d0ca      	beq.n	80064c6 <__sflush_r+0x1a>
 8006530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006534:	4299      	cmp	r1, r3
 8006536:	d002      	beq.n	800653e <__sflush_r+0x92>
 8006538:	4628      	mov	r0, r5
 800653a:	f000 fd8f 	bl	800705c <_free_r>
 800653e:	2000      	movs	r0, #0
 8006540:	6360      	str	r0, [r4, #52]	; 0x34
 8006542:	e7c1      	b.n	80064c8 <__sflush_r+0x1c>
 8006544:	6a21      	ldr	r1, [r4, #32]
 8006546:	2301      	movs	r3, #1
 8006548:	4628      	mov	r0, r5
 800654a:	47b0      	blx	r6
 800654c:	1c41      	adds	r1, r0, #1
 800654e:	d1c7      	bne.n	80064e0 <__sflush_r+0x34>
 8006550:	682b      	ldr	r3, [r5, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0c4      	beq.n	80064e0 <__sflush_r+0x34>
 8006556:	2b1d      	cmp	r3, #29
 8006558:	d001      	beq.n	800655e <__sflush_r+0xb2>
 800655a:	2b16      	cmp	r3, #22
 800655c:	d101      	bne.n	8006562 <__sflush_r+0xb6>
 800655e:	602f      	str	r7, [r5, #0]
 8006560:	e7b1      	b.n	80064c6 <__sflush_r+0x1a>
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006568:	81a3      	strh	r3, [r4, #12]
 800656a:	e7ad      	b.n	80064c8 <__sflush_r+0x1c>
 800656c:	690f      	ldr	r7, [r1, #16]
 800656e:	2f00      	cmp	r7, #0
 8006570:	d0a9      	beq.n	80064c6 <__sflush_r+0x1a>
 8006572:	0793      	lsls	r3, r2, #30
 8006574:	bf18      	it	ne
 8006576:	2300      	movne	r3, #0
 8006578:	680e      	ldr	r6, [r1, #0]
 800657a:	bf08      	it	eq
 800657c:	694b      	ldreq	r3, [r1, #20]
 800657e:	eba6 0807 	sub.w	r8, r6, r7
 8006582:	600f      	str	r7, [r1, #0]
 8006584:	608b      	str	r3, [r1, #8]
 8006586:	f1b8 0f00 	cmp.w	r8, #0
 800658a:	dd9c      	ble.n	80064c6 <__sflush_r+0x1a>
 800658c:	4643      	mov	r3, r8
 800658e:	463a      	mov	r2, r7
 8006590:	4628      	mov	r0, r5
 8006592:	6a21      	ldr	r1, [r4, #32]
 8006594:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006596:	47b0      	blx	r6
 8006598:	2800      	cmp	r0, #0
 800659a:	dc06      	bgt.n	80065aa <__sflush_r+0xfe>
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	e78e      	b.n	80064c8 <__sflush_r+0x1c>
 80065aa:	4407      	add	r7, r0
 80065ac:	eba8 0800 	sub.w	r8, r8, r0
 80065b0:	e7e9      	b.n	8006586 <__sflush_r+0xda>
 80065b2:	bf00      	nop
 80065b4:	20400001 	.word	0x20400001

080065b8 <_fflush_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	690b      	ldr	r3, [r1, #16]
 80065bc:	4605      	mov	r5, r0
 80065be:	460c      	mov	r4, r1
 80065c0:	b913      	cbnz	r3, 80065c8 <_fflush_r+0x10>
 80065c2:	2500      	movs	r5, #0
 80065c4:	4628      	mov	r0, r5
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	b118      	cbz	r0, 80065d2 <_fflush_r+0x1a>
 80065ca:	6983      	ldr	r3, [r0, #24]
 80065cc:	b90b      	cbnz	r3, 80065d2 <_fflush_r+0x1a>
 80065ce:	f000 f887 	bl	80066e0 <__sinit>
 80065d2:	4b14      	ldr	r3, [pc, #80]	; (8006624 <_fflush_r+0x6c>)
 80065d4:	429c      	cmp	r4, r3
 80065d6:	d11b      	bne.n	8006610 <_fflush_r+0x58>
 80065d8:	686c      	ldr	r4, [r5, #4]
 80065da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0ef      	beq.n	80065c2 <_fflush_r+0xa>
 80065e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065e4:	07d0      	lsls	r0, r2, #31
 80065e6:	d404      	bmi.n	80065f2 <_fflush_r+0x3a>
 80065e8:	0599      	lsls	r1, r3, #22
 80065ea:	d402      	bmi.n	80065f2 <_fflush_r+0x3a>
 80065ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ee:	f000 f91a 	bl	8006826 <__retarget_lock_acquire_recursive>
 80065f2:	4628      	mov	r0, r5
 80065f4:	4621      	mov	r1, r4
 80065f6:	f7ff ff59 	bl	80064ac <__sflush_r>
 80065fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065fc:	4605      	mov	r5, r0
 80065fe:	07da      	lsls	r2, r3, #31
 8006600:	d4e0      	bmi.n	80065c4 <_fflush_r+0xc>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	059b      	lsls	r3, r3, #22
 8006606:	d4dd      	bmi.n	80065c4 <_fflush_r+0xc>
 8006608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800660a:	f000 f90d 	bl	8006828 <__retarget_lock_release_recursive>
 800660e:	e7d9      	b.n	80065c4 <_fflush_r+0xc>
 8006610:	4b05      	ldr	r3, [pc, #20]	; (8006628 <_fflush_r+0x70>)
 8006612:	429c      	cmp	r4, r3
 8006614:	d101      	bne.n	800661a <_fflush_r+0x62>
 8006616:	68ac      	ldr	r4, [r5, #8]
 8006618:	e7df      	b.n	80065da <_fflush_r+0x22>
 800661a:	4b04      	ldr	r3, [pc, #16]	; (800662c <_fflush_r+0x74>)
 800661c:	429c      	cmp	r4, r3
 800661e:	bf08      	it	eq
 8006620:	68ec      	ldreq	r4, [r5, #12]
 8006622:	e7da      	b.n	80065da <_fflush_r+0x22>
 8006624:	08007864 	.word	0x08007864
 8006628:	08007884 	.word	0x08007884
 800662c:	08007844 	.word	0x08007844

08006630 <std>:
 8006630:	2300      	movs	r3, #0
 8006632:	b510      	push	{r4, lr}
 8006634:	4604      	mov	r4, r0
 8006636:	e9c0 3300 	strd	r3, r3, [r0]
 800663a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800663e:	6083      	str	r3, [r0, #8]
 8006640:	8181      	strh	r1, [r0, #12]
 8006642:	6643      	str	r3, [r0, #100]	; 0x64
 8006644:	81c2      	strh	r2, [r0, #14]
 8006646:	6183      	str	r3, [r0, #24]
 8006648:	4619      	mov	r1, r3
 800664a:	2208      	movs	r2, #8
 800664c:	305c      	adds	r0, #92	; 0x5c
 800664e:	f7fe fafb 	bl	8004c48 <memset>
 8006652:	4b05      	ldr	r3, [pc, #20]	; (8006668 <std+0x38>)
 8006654:	6224      	str	r4, [r4, #32]
 8006656:	6263      	str	r3, [r4, #36]	; 0x24
 8006658:	4b04      	ldr	r3, [pc, #16]	; (800666c <std+0x3c>)
 800665a:	62a3      	str	r3, [r4, #40]	; 0x28
 800665c:	4b04      	ldr	r3, [pc, #16]	; (8006670 <std+0x40>)
 800665e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006660:	4b04      	ldr	r3, [pc, #16]	; (8006674 <std+0x44>)
 8006662:	6323      	str	r3, [r4, #48]	; 0x30
 8006664:	bd10      	pop	{r4, pc}
 8006666:	bf00      	nop
 8006668:	08007479 	.word	0x08007479
 800666c:	0800749b 	.word	0x0800749b
 8006670:	080074d3 	.word	0x080074d3
 8006674:	080074f7 	.word	0x080074f7

08006678 <_cleanup_r>:
 8006678:	4901      	ldr	r1, [pc, #4]	; (8006680 <_cleanup_r+0x8>)
 800667a:	f000 b8af 	b.w	80067dc <_fwalk_reent>
 800667e:	bf00      	nop
 8006680:	080065b9 	.word	0x080065b9

08006684 <__sfmoreglue>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	2568      	movs	r5, #104	; 0x68
 8006688:	1e4a      	subs	r2, r1, #1
 800668a:	4355      	muls	r5, r2
 800668c:	460e      	mov	r6, r1
 800668e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006692:	f000 fd2f 	bl	80070f4 <_malloc_r>
 8006696:	4604      	mov	r4, r0
 8006698:	b140      	cbz	r0, 80066ac <__sfmoreglue+0x28>
 800669a:	2100      	movs	r1, #0
 800669c:	e9c0 1600 	strd	r1, r6, [r0]
 80066a0:	300c      	adds	r0, #12
 80066a2:	60a0      	str	r0, [r4, #8]
 80066a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066a8:	f7fe face 	bl	8004c48 <memset>
 80066ac:	4620      	mov	r0, r4
 80066ae:	bd70      	pop	{r4, r5, r6, pc}

080066b0 <__sfp_lock_acquire>:
 80066b0:	4801      	ldr	r0, [pc, #4]	; (80066b8 <__sfp_lock_acquire+0x8>)
 80066b2:	f000 b8b8 	b.w	8006826 <__retarget_lock_acquire_recursive>
 80066b6:	bf00      	nop
 80066b8:	200008c4 	.word	0x200008c4

080066bc <__sfp_lock_release>:
 80066bc:	4801      	ldr	r0, [pc, #4]	; (80066c4 <__sfp_lock_release+0x8>)
 80066be:	f000 b8b3 	b.w	8006828 <__retarget_lock_release_recursive>
 80066c2:	bf00      	nop
 80066c4:	200008c4 	.word	0x200008c4

080066c8 <__sinit_lock_acquire>:
 80066c8:	4801      	ldr	r0, [pc, #4]	; (80066d0 <__sinit_lock_acquire+0x8>)
 80066ca:	f000 b8ac 	b.w	8006826 <__retarget_lock_acquire_recursive>
 80066ce:	bf00      	nop
 80066d0:	200008bf 	.word	0x200008bf

080066d4 <__sinit_lock_release>:
 80066d4:	4801      	ldr	r0, [pc, #4]	; (80066dc <__sinit_lock_release+0x8>)
 80066d6:	f000 b8a7 	b.w	8006828 <__retarget_lock_release_recursive>
 80066da:	bf00      	nop
 80066dc:	200008bf 	.word	0x200008bf

080066e0 <__sinit>:
 80066e0:	b510      	push	{r4, lr}
 80066e2:	4604      	mov	r4, r0
 80066e4:	f7ff fff0 	bl	80066c8 <__sinit_lock_acquire>
 80066e8:	69a3      	ldr	r3, [r4, #24]
 80066ea:	b11b      	cbz	r3, 80066f4 <__sinit+0x14>
 80066ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f0:	f7ff bff0 	b.w	80066d4 <__sinit_lock_release>
 80066f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066f8:	6523      	str	r3, [r4, #80]	; 0x50
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <__sinit+0x68>)
 80066fc:	4a13      	ldr	r2, [pc, #76]	; (800674c <__sinit+0x6c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	62a2      	str	r2, [r4, #40]	; 0x28
 8006702:	42a3      	cmp	r3, r4
 8006704:	bf08      	it	eq
 8006706:	2301      	moveq	r3, #1
 8006708:	4620      	mov	r0, r4
 800670a:	bf08      	it	eq
 800670c:	61a3      	streq	r3, [r4, #24]
 800670e:	f000 f81f 	bl	8006750 <__sfp>
 8006712:	6060      	str	r0, [r4, #4]
 8006714:	4620      	mov	r0, r4
 8006716:	f000 f81b 	bl	8006750 <__sfp>
 800671a:	60a0      	str	r0, [r4, #8]
 800671c:	4620      	mov	r0, r4
 800671e:	f000 f817 	bl	8006750 <__sfp>
 8006722:	2200      	movs	r2, #0
 8006724:	2104      	movs	r1, #4
 8006726:	60e0      	str	r0, [r4, #12]
 8006728:	6860      	ldr	r0, [r4, #4]
 800672a:	f7ff ff81 	bl	8006630 <std>
 800672e:	2201      	movs	r2, #1
 8006730:	2109      	movs	r1, #9
 8006732:	68a0      	ldr	r0, [r4, #8]
 8006734:	f7ff ff7c 	bl	8006630 <std>
 8006738:	2202      	movs	r2, #2
 800673a:	2112      	movs	r1, #18
 800673c:	68e0      	ldr	r0, [r4, #12]
 800673e:	f7ff ff77 	bl	8006630 <std>
 8006742:	2301      	movs	r3, #1
 8006744:	61a3      	str	r3, [r4, #24]
 8006746:	e7d1      	b.n	80066ec <__sinit+0xc>
 8006748:	08007778 	.word	0x08007778
 800674c:	08006679 	.word	0x08006679

08006750 <__sfp>:
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006752:	4607      	mov	r7, r0
 8006754:	f7ff ffac 	bl	80066b0 <__sfp_lock_acquire>
 8006758:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <__sfp+0x84>)
 800675a:	681e      	ldr	r6, [r3, #0]
 800675c:	69b3      	ldr	r3, [r6, #24]
 800675e:	b913      	cbnz	r3, 8006766 <__sfp+0x16>
 8006760:	4630      	mov	r0, r6
 8006762:	f7ff ffbd 	bl	80066e0 <__sinit>
 8006766:	3648      	adds	r6, #72	; 0x48
 8006768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800676c:	3b01      	subs	r3, #1
 800676e:	d503      	bpl.n	8006778 <__sfp+0x28>
 8006770:	6833      	ldr	r3, [r6, #0]
 8006772:	b30b      	cbz	r3, 80067b8 <__sfp+0x68>
 8006774:	6836      	ldr	r6, [r6, #0]
 8006776:	e7f7      	b.n	8006768 <__sfp+0x18>
 8006778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800677c:	b9d5      	cbnz	r5, 80067b4 <__sfp+0x64>
 800677e:	4b16      	ldr	r3, [pc, #88]	; (80067d8 <__sfp+0x88>)
 8006780:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006784:	60e3      	str	r3, [r4, #12]
 8006786:	6665      	str	r5, [r4, #100]	; 0x64
 8006788:	f000 f84c 	bl	8006824 <__retarget_lock_init_recursive>
 800678c:	f7ff ff96 	bl	80066bc <__sfp_lock_release>
 8006790:	2208      	movs	r2, #8
 8006792:	4629      	mov	r1, r5
 8006794:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006798:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800679c:	6025      	str	r5, [r4, #0]
 800679e:	61a5      	str	r5, [r4, #24]
 80067a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067a4:	f7fe fa50 	bl	8004c48 <memset>
 80067a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067b0:	4620      	mov	r0, r4
 80067b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b4:	3468      	adds	r4, #104	; 0x68
 80067b6:	e7d9      	b.n	800676c <__sfp+0x1c>
 80067b8:	2104      	movs	r1, #4
 80067ba:	4638      	mov	r0, r7
 80067bc:	f7ff ff62 	bl	8006684 <__sfmoreglue>
 80067c0:	4604      	mov	r4, r0
 80067c2:	6030      	str	r0, [r6, #0]
 80067c4:	2800      	cmp	r0, #0
 80067c6:	d1d5      	bne.n	8006774 <__sfp+0x24>
 80067c8:	f7ff ff78 	bl	80066bc <__sfp_lock_release>
 80067cc:	230c      	movs	r3, #12
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	e7ee      	b.n	80067b0 <__sfp+0x60>
 80067d2:	bf00      	nop
 80067d4:	08007778 	.word	0x08007778
 80067d8:	ffff0001 	.word	0xffff0001

080067dc <_fwalk_reent>:
 80067dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e0:	4606      	mov	r6, r0
 80067e2:	4688      	mov	r8, r1
 80067e4:	2700      	movs	r7, #0
 80067e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067ee:	f1b9 0901 	subs.w	r9, r9, #1
 80067f2:	d505      	bpl.n	8006800 <_fwalk_reent+0x24>
 80067f4:	6824      	ldr	r4, [r4, #0]
 80067f6:	2c00      	cmp	r4, #0
 80067f8:	d1f7      	bne.n	80067ea <_fwalk_reent+0xe>
 80067fa:	4638      	mov	r0, r7
 80067fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006800:	89ab      	ldrh	r3, [r5, #12]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d907      	bls.n	8006816 <_fwalk_reent+0x3a>
 8006806:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800680a:	3301      	adds	r3, #1
 800680c:	d003      	beq.n	8006816 <_fwalk_reent+0x3a>
 800680e:	4629      	mov	r1, r5
 8006810:	4630      	mov	r0, r6
 8006812:	47c0      	blx	r8
 8006814:	4307      	orrs	r7, r0
 8006816:	3568      	adds	r5, #104	; 0x68
 8006818:	e7e9      	b.n	80067ee <_fwalk_reent+0x12>
	...

0800681c <_localeconv_r>:
 800681c:	4800      	ldr	r0, [pc, #0]	; (8006820 <_localeconv_r+0x4>)
 800681e:	4770      	bx	lr
 8006820:	20000160 	.word	0x20000160

08006824 <__retarget_lock_init_recursive>:
 8006824:	4770      	bx	lr

08006826 <__retarget_lock_acquire_recursive>:
 8006826:	4770      	bx	lr

08006828 <__retarget_lock_release_recursive>:
 8006828:	4770      	bx	lr

0800682a <__swhatbuf_r>:
 800682a:	b570      	push	{r4, r5, r6, lr}
 800682c:	460e      	mov	r6, r1
 800682e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006832:	4614      	mov	r4, r2
 8006834:	2900      	cmp	r1, #0
 8006836:	461d      	mov	r5, r3
 8006838:	b096      	sub	sp, #88	; 0x58
 800683a:	da07      	bge.n	800684c <__swhatbuf_r+0x22>
 800683c:	2300      	movs	r3, #0
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	89b3      	ldrh	r3, [r6, #12]
 8006842:	061a      	lsls	r2, r3, #24
 8006844:	d410      	bmi.n	8006868 <__swhatbuf_r+0x3e>
 8006846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800684a:	e00e      	b.n	800686a <__swhatbuf_r+0x40>
 800684c:	466a      	mov	r2, sp
 800684e:	f000 fea9 	bl	80075a4 <_fstat_r>
 8006852:	2800      	cmp	r0, #0
 8006854:	dbf2      	blt.n	800683c <__swhatbuf_r+0x12>
 8006856:	9a01      	ldr	r2, [sp, #4]
 8006858:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800685c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006860:	425a      	negs	r2, r3
 8006862:	415a      	adcs	r2, r3
 8006864:	602a      	str	r2, [r5, #0]
 8006866:	e7ee      	b.n	8006846 <__swhatbuf_r+0x1c>
 8006868:	2340      	movs	r3, #64	; 0x40
 800686a:	2000      	movs	r0, #0
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	b016      	add	sp, #88	; 0x58
 8006870:	bd70      	pop	{r4, r5, r6, pc}
	...

08006874 <__smakebuf_r>:
 8006874:	898b      	ldrh	r3, [r1, #12]
 8006876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006878:	079d      	lsls	r5, r3, #30
 800687a:	4606      	mov	r6, r0
 800687c:	460c      	mov	r4, r1
 800687e:	d507      	bpl.n	8006890 <__smakebuf_r+0x1c>
 8006880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	6123      	str	r3, [r4, #16]
 8006888:	2301      	movs	r3, #1
 800688a:	6163      	str	r3, [r4, #20]
 800688c:	b002      	add	sp, #8
 800688e:	bd70      	pop	{r4, r5, r6, pc}
 8006890:	466a      	mov	r2, sp
 8006892:	ab01      	add	r3, sp, #4
 8006894:	f7ff ffc9 	bl	800682a <__swhatbuf_r>
 8006898:	9900      	ldr	r1, [sp, #0]
 800689a:	4605      	mov	r5, r0
 800689c:	4630      	mov	r0, r6
 800689e:	f000 fc29 	bl	80070f4 <_malloc_r>
 80068a2:	b948      	cbnz	r0, 80068b8 <__smakebuf_r+0x44>
 80068a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a8:	059a      	lsls	r2, r3, #22
 80068aa:	d4ef      	bmi.n	800688c <__smakebuf_r+0x18>
 80068ac:	f023 0303 	bic.w	r3, r3, #3
 80068b0:	f043 0302 	orr.w	r3, r3, #2
 80068b4:	81a3      	strh	r3, [r4, #12]
 80068b6:	e7e3      	b.n	8006880 <__smakebuf_r+0xc>
 80068b8:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <__smakebuf_r+0x7c>)
 80068ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	6020      	str	r0, [r4, #0]
 80068c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	9b00      	ldr	r3, [sp, #0]
 80068c8:	6120      	str	r0, [r4, #16]
 80068ca:	6163      	str	r3, [r4, #20]
 80068cc:	9b01      	ldr	r3, [sp, #4]
 80068ce:	b15b      	cbz	r3, 80068e8 <__smakebuf_r+0x74>
 80068d0:	4630      	mov	r0, r6
 80068d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068d6:	f000 fe77 	bl	80075c8 <_isatty_r>
 80068da:	b128      	cbz	r0, 80068e8 <__smakebuf_r+0x74>
 80068dc:	89a3      	ldrh	r3, [r4, #12]
 80068de:	f023 0303 	bic.w	r3, r3, #3
 80068e2:	f043 0301 	orr.w	r3, r3, #1
 80068e6:	81a3      	strh	r3, [r4, #12]
 80068e8:	89a0      	ldrh	r0, [r4, #12]
 80068ea:	4305      	orrs	r5, r0
 80068ec:	81a5      	strh	r5, [r4, #12]
 80068ee:	e7cd      	b.n	800688c <__smakebuf_r+0x18>
 80068f0:	08006679 	.word	0x08006679

080068f4 <malloc>:
 80068f4:	4b02      	ldr	r3, [pc, #8]	; (8006900 <malloc+0xc>)
 80068f6:	4601      	mov	r1, r0
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	f000 bbfb 	b.w	80070f4 <_malloc_r>
 80068fe:	bf00      	nop
 8006900:	2000000c 	.word	0x2000000c

08006904 <memchr>:
 8006904:	4603      	mov	r3, r0
 8006906:	b510      	push	{r4, lr}
 8006908:	b2c9      	uxtb	r1, r1
 800690a:	4402      	add	r2, r0
 800690c:	4293      	cmp	r3, r2
 800690e:	4618      	mov	r0, r3
 8006910:	d101      	bne.n	8006916 <memchr+0x12>
 8006912:	2000      	movs	r0, #0
 8006914:	e003      	b.n	800691e <memchr+0x1a>
 8006916:	7804      	ldrb	r4, [r0, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	428c      	cmp	r4, r1
 800691c:	d1f6      	bne.n	800690c <memchr+0x8>
 800691e:	bd10      	pop	{r4, pc}

08006920 <memcpy>:
 8006920:	440a      	add	r2, r1
 8006922:	4291      	cmp	r1, r2
 8006924:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006928:	d100      	bne.n	800692c <memcpy+0xc>
 800692a:	4770      	bx	lr
 800692c:	b510      	push	{r4, lr}
 800692e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006932:	4291      	cmp	r1, r2
 8006934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006938:	d1f9      	bne.n	800692e <memcpy+0xe>
 800693a:	bd10      	pop	{r4, pc}

0800693c <_Balloc>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006940:	4604      	mov	r4, r0
 8006942:	460d      	mov	r5, r1
 8006944:	b976      	cbnz	r6, 8006964 <_Balloc+0x28>
 8006946:	2010      	movs	r0, #16
 8006948:	f7ff ffd4 	bl	80068f4 <malloc>
 800694c:	4602      	mov	r2, r0
 800694e:	6260      	str	r0, [r4, #36]	; 0x24
 8006950:	b920      	cbnz	r0, 800695c <_Balloc+0x20>
 8006952:	2166      	movs	r1, #102	; 0x66
 8006954:	4b17      	ldr	r3, [pc, #92]	; (80069b4 <_Balloc+0x78>)
 8006956:	4818      	ldr	r0, [pc, #96]	; (80069b8 <_Balloc+0x7c>)
 8006958:	f000 fde4 	bl	8007524 <__assert_func>
 800695c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006960:	6006      	str	r6, [r0, #0]
 8006962:	60c6      	str	r6, [r0, #12]
 8006964:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006966:	68f3      	ldr	r3, [r6, #12]
 8006968:	b183      	cbz	r3, 800698c <_Balloc+0x50>
 800696a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006972:	b9b8      	cbnz	r0, 80069a4 <_Balloc+0x68>
 8006974:	2101      	movs	r1, #1
 8006976:	fa01 f605 	lsl.w	r6, r1, r5
 800697a:	1d72      	adds	r2, r6, #5
 800697c:	4620      	mov	r0, r4
 800697e:	0092      	lsls	r2, r2, #2
 8006980:	f000 fb5e 	bl	8007040 <_calloc_r>
 8006984:	b160      	cbz	r0, 80069a0 <_Balloc+0x64>
 8006986:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800698a:	e00e      	b.n	80069aa <_Balloc+0x6e>
 800698c:	2221      	movs	r2, #33	; 0x21
 800698e:	2104      	movs	r1, #4
 8006990:	4620      	mov	r0, r4
 8006992:	f000 fb55 	bl	8007040 <_calloc_r>
 8006996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006998:	60f0      	str	r0, [r6, #12]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e4      	bne.n	800696a <_Balloc+0x2e>
 80069a0:	2000      	movs	r0, #0
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	6802      	ldr	r2, [r0, #0]
 80069a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80069aa:	2300      	movs	r3, #0
 80069ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80069b0:	e7f7      	b.n	80069a2 <_Balloc+0x66>
 80069b2:	bf00      	nop
 80069b4:	080077bd 	.word	0x080077bd
 80069b8:	080078a4 	.word	0x080078a4

080069bc <_Bfree>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069c0:	4605      	mov	r5, r0
 80069c2:	460c      	mov	r4, r1
 80069c4:	b976      	cbnz	r6, 80069e4 <_Bfree+0x28>
 80069c6:	2010      	movs	r0, #16
 80069c8:	f7ff ff94 	bl	80068f4 <malloc>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6268      	str	r0, [r5, #36]	; 0x24
 80069d0:	b920      	cbnz	r0, 80069dc <_Bfree+0x20>
 80069d2:	218a      	movs	r1, #138	; 0x8a
 80069d4:	4b08      	ldr	r3, [pc, #32]	; (80069f8 <_Bfree+0x3c>)
 80069d6:	4809      	ldr	r0, [pc, #36]	; (80069fc <_Bfree+0x40>)
 80069d8:	f000 fda4 	bl	8007524 <__assert_func>
 80069dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069e0:	6006      	str	r6, [r0, #0]
 80069e2:	60c6      	str	r6, [r0, #12]
 80069e4:	b13c      	cbz	r4, 80069f6 <_Bfree+0x3a>
 80069e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069e8:	6862      	ldr	r2, [r4, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069f0:	6021      	str	r1, [r4, #0]
 80069f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
 80069f8:	080077bd 	.word	0x080077bd
 80069fc:	080078a4 	.word	0x080078a4

08006a00 <__multadd>:
 8006a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a04:	4698      	mov	r8, r3
 8006a06:	460c      	mov	r4, r1
 8006a08:	2300      	movs	r3, #0
 8006a0a:	690e      	ldr	r6, [r1, #16]
 8006a0c:	4607      	mov	r7, r0
 8006a0e:	f101 0014 	add.w	r0, r1, #20
 8006a12:	6805      	ldr	r5, [r0, #0]
 8006a14:	3301      	adds	r3, #1
 8006a16:	b2a9      	uxth	r1, r5
 8006a18:	fb02 8101 	mla	r1, r2, r1, r8
 8006a1c:	0c2d      	lsrs	r5, r5, #16
 8006a1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006a22:	fb02 c505 	mla	r5, r2, r5, ip
 8006a26:	b289      	uxth	r1, r1
 8006a28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006a2c:	429e      	cmp	r6, r3
 8006a2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006a32:	f840 1b04 	str.w	r1, [r0], #4
 8006a36:	dcec      	bgt.n	8006a12 <__multadd+0x12>
 8006a38:	f1b8 0f00 	cmp.w	r8, #0
 8006a3c:	d022      	beq.n	8006a84 <__multadd+0x84>
 8006a3e:	68a3      	ldr	r3, [r4, #8]
 8006a40:	42b3      	cmp	r3, r6
 8006a42:	dc19      	bgt.n	8006a78 <__multadd+0x78>
 8006a44:	6861      	ldr	r1, [r4, #4]
 8006a46:	4638      	mov	r0, r7
 8006a48:	3101      	adds	r1, #1
 8006a4a:	f7ff ff77 	bl	800693c <_Balloc>
 8006a4e:	4605      	mov	r5, r0
 8006a50:	b928      	cbnz	r0, 8006a5e <__multadd+0x5e>
 8006a52:	4602      	mov	r2, r0
 8006a54:	21b5      	movs	r1, #181	; 0xb5
 8006a56:	4b0d      	ldr	r3, [pc, #52]	; (8006a8c <__multadd+0x8c>)
 8006a58:	480d      	ldr	r0, [pc, #52]	; (8006a90 <__multadd+0x90>)
 8006a5a:	f000 fd63 	bl	8007524 <__assert_func>
 8006a5e:	6922      	ldr	r2, [r4, #16]
 8006a60:	f104 010c 	add.w	r1, r4, #12
 8006a64:	3202      	adds	r2, #2
 8006a66:	0092      	lsls	r2, r2, #2
 8006a68:	300c      	adds	r0, #12
 8006a6a:	f7ff ff59 	bl	8006920 <memcpy>
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4638      	mov	r0, r7
 8006a72:	f7ff ffa3 	bl	80069bc <_Bfree>
 8006a76:	462c      	mov	r4, r5
 8006a78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006a7c:	3601      	adds	r6, #1
 8006a7e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006a82:	6126      	str	r6, [r4, #16]
 8006a84:	4620      	mov	r0, r4
 8006a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a8a:	bf00      	nop
 8006a8c:	08007833 	.word	0x08007833
 8006a90:	080078a4 	.word	0x080078a4

08006a94 <__hi0bits>:
 8006a94:	0c02      	lsrs	r2, r0, #16
 8006a96:	0412      	lsls	r2, r2, #16
 8006a98:	4603      	mov	r3, r0
 8006a9a:	b9ca      	cbnz	r2, 8006ad0 <__hi0bits+0x3c>
 8006a9c:	0403      	lsls	r3, r0, #16
 8006a9e:	2010      	movs	r0, #16
 8006aa0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006aa4:	bf04      	itt	eq
 8006aa6:	021b      	lsleq	r3, r3, #8
 8006aa8:	3008      	addeq	r0, #8
 8006aaa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006aae:	bf04      	itt	eq
 8006ab0:	011b      	lsleq	r3, r3, #4
 8006ab2:	3004      	addeq	r0, #4
 8006ab4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006ab8:	bf04      	itt	eq
 8006aba:	009b      	lsleq	r3, r3, #2
 8006abc:	3002      	addeq	r0, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	db05      	blt.n	8006ace <__hi0bits+0x3a>
 8006ac2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006ac6:	f100 0001 	add.w	r0, r0, #1
 8006aca:	bf08      	it	eq
 8006acc:	2020      	moveq	r0, #32
 8006ace:	4770      	bx	lr
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	e7e5      	b.n	8006aa0 <__hi0bits+0xc>

08006ad4 <__lo0bits>:
 8006ad4:	6803      	ldr	r3, [r0, #0]
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	f013 0007 	ands.w	r0, r3, #7
 8006adc:	d00b      	beq.n	8006af6 <__lo0bits+0x22>
 8006ade:	07d9      	lsls	r1, r3, #31
 8006ae0:	d422      	bmi.n	8006b28 <__lo0bits+0x54>
 8006ae2:	0798      	lsls	r0, r3, #30
 8006ae4:	bf49      	itett	mi
 8006ae6:	085b      	lsrmi	r3, r3, #1
 8006ae8:	089b      	lsrpl	r3, r3, #2
 8006aea:	2001      	movmi	r0, #1
 8006aec:	6013      	strmi	r3, [r2, #0]
 8006aee:	bf5c      	itt	pl
 8006af0:	2002      	movpl	r0, #2
 8006af2:	6013      	strpl	r3, [r2, #0]
 8006af4:	4770      	bx	lr
 8006af6:	b299      	uxth	r1, r3
 8006af8:	b909      	cbnz	r1, 8006afe <__lo0bits+0x2a>
 8006afa:	2010      	movs	r0, #16
 8006afc:	0c1b      	lsrs	r3, r3, #16
 8006afe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006b02:	bf04      	itt	eq
 8006b04:	0a1b      	lsreq	r3, r3, #8
 8006b06:	3008      	addeq	r0, #8
 8006b08:	0719      	lsls	r1, r3, #28
 8006b0a:	bf04      	itt	eq
 8006b0c:	091b      	lsreq	r3, r3, #4
 8006b0e:	3004      	addeq	r0, #4
 8006b10:	0799      	lsls	r1, r3, #30
 8006b12:	bf04      	itt	eq
 8006b14:	089b      	lsreq	r3, r3, #2
 8006b16:	3002      	addeq	r0, #2
 8006b18:	07d9      	lsls	r1, r3, #31
 8006b1a:	d403      	bmi.n	8006b24 <__lo0bits+0x50>
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	f100 0001 	add.w	r0, r0, #1
 8006b22:	d003      	beq.n	8006b2c <__lo0bits+0x58>
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	4770      	bx	lr
 8006b28:	2000      	movs	r0, #0
 8006b2a:	4770      	bx	lr
 8006b2c:	2020      	movs	r0, #32
 8006b2e:	4770      	bx	lr

08006b30 <__i2b>:
 8006b30:	b510      	push	{r4, lr}
 8006b32:	460c      	mov	r4, r1
 8006b34:	2101      	movs	r1, #1
 8006b36:	f7ff ff01 	bl	800693c <_Balloc>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	b928      	cbnz	r0, 8006b4a <__i2b+0x1a>
 8006b3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b42:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <__i2b+0x24>)
 8006b44:	4804      	ldr	r0, [pc, #16]	; (8006b58 <__i2b+0x28>)
 8006b46:	f000 fced 	bl	8007524 <__assert_func>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	6144      	str	r4, [r0, #20]
 8006b4e:	6103      	str	r3, [r0, #16]
 8006b50:	bd10      	pop	{r4, pc}
 8006b52:	bf00      	nop
 8006b54:	08007833 	.word	0x08007833
 8006b58:	080078a4 	.word	0x080078a4

08006b5c <__multiply>:
 8006b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b60:	4614      	mov	r4, r2
 8006b62:	690a      	ldr	r2, [r1, #16]
 8006b64:	6923      	ldr	r3, [r4, #16]
 8006b66:	460d      	mov	r5, r1
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	bfbe      	ittt	lt
 8006b6c:	460b      	movlt	r3, r1
 8006b6e:	4625      	movlt	r5, r4
 8006b70:	461c      	movlt	r4, r3
 8006b72:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006b76:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006b7a:	68ab      	ldr	r3, [r5, #8]
 8006b7c:	6869      	ldr	r1, [r5, #4]
 8006b7e:	eb0a 0709 	add.w	r7, sl, r9
 8006b82:	42bb      	cmp	r3, r7
 8006b84:	b085      	sub	sp, #20
 8006b86:	bfb8      	it	lt
 8006b88:	3101      	addlt	r1, #1
 8006b8a:	f7ff fed7 	bl	800693c <_Balloc>
 8006b8e:	b930      	cbnz	r0, 8006b9e <__multiply+0x42>
 8006b90:	4602      	mov	r2, r0
 8006b92:	f240 115d 	movw	r1, #349	; 0x15d
 8006b96:	4b41      	ldr	r3, [pc, #260]	; (8006c9c <__multiply+0x140>)
 8006b98:	4841      	ldr	r0, [pc, #260]	; (8006ca0 <__multiply+0x144>)
 8006b9a:	f000 fcc3 	bl	8007524 <__assert_func>
 8006b9e:	f100 0614 	add.w	r6, r0, #20
 8006ba2:	4633      	mov	r3, r6
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006baa:	4543      	cmp	r3, r8
 8006bac:	d31e      	bcc.n	8006bec <__multiply+0x90>
 8006bae:	f105 0c14 	add.w	ip, r5, #20
 8006bb2:	f104 0314 	add.w	r3, r4, #20
 8006bb6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006bba:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006bbe:	9202      	str	r2, [sp, #8]
 8006bc0:	ebac 0205 	sub.w	r2, ip, r5
 8006bc4:	3a15      	subs	r2, #21
 8006bc6:	f022 0203 	bic.w	r2, r2, #3
 8006bca:	3204      	adds	r2, #4
 8006bcc:	f105 0115 	add.w	r1, r5, #21
 8006bd0:	458c      	cmp	ip, r1
 8006bd2:	bf38      	it	cc
 8006bd4:	2204      	movcc	r2, #4
 8006bd6:	9201      	str	r2, [sp, #4]
 8006bd8:	9a02      	ldr	r2, [sp, #8]
 8006bda:	9303      	str	r3, [sp, #12]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d808      	bhi.n	8006bf2 <__multiply+0x96>
 8006be0:	2f00      	cmp	r7, #0
 8006be2:	dc55      	bgt.n	8006c90 <__multiply+0x134>
 8006be4:	6107      	str	r7, [r0, #16]
 8006be6:	b005      	add	sp, #20
 8006be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bec:	f843 2b04 	str.w	r2, [r3], #4
 8006bf0:	e7db      	b.n	8006baa <__multiply+0x4e>
 8006bf2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bf6:	f1ba 0f00 	cmp.w	sl, #0
 8006bfa:	d020      	beq.n	8006c3e <__multiply+0xe2>
 8006bfc:	46b1      	mov	r9, r6
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f105 0e14 	add.w	lr, r5, #20
 8006c04:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006c08:	f8d9 b000 	ldr.w	fp, [r9]
 8006c0c:	b2a1      	uxth	r1, r4
 8006c0e:	fa1f fb8b 	uxth.w	fp, fp
 8006c12:	fb0a b101 	mla	r1, sl, r1, fp
 8006c16:	4411      	add	r1, r2
 8006c18:	f8d9 2000 	ldr.w	r2, [r9]
 8006c1c:	0c24      	lsrs	r4, r4, #16
 8006c1e:	0c12      	lsrs	r2, r2, #16
 8006c20:	fb0a 2404 	mla	r4, sl, r4, r2
 8006c24:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006c28:	b289      	uxth	r1, r1
 8006c2a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c2e:	45f4      	cmp	ip, lr
 8006c30:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006c34:	f849 1b04 	str.w	r1, [r9], #4
 8006c38:	d8e4      	bhi.n	8006c04 <__multiply+0xa8>
 8006c3a:	9901      	ldr	r1, [sp, #4]
 8006c3c:	5072      	str	r2, [r6, r1]
 8006c3e:	9a03      	ldr	r2, [sp, #12]
 8006c40:	3304      	adds	r3, #4
 8006c42:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c46:	f1b9 0f00 	cmp.w	r9, #0
 8006c4a:	d01f      	beq.n	8006c8c <__multiply+0x130>
 8006c4c:	46b6      	mov	lr, r6
 8006c4e:	f04f 0a00 	mov.w	sl, #0
 8006c52:	6834      	ldr	r4, [r6, #0]
 8006c54:	f105 0114 	add.w	r1, r5, #20
 8006c58:	880a      	ldrh	r2, [r1, #0]
 8006c5a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006c5e:	b2a4      	uxth	r4, r4
 8006c60:	fb09 b202 	mla	r2, r9, r2, fp
 8006c64:	4492      	add	sl, r2
 8006c66:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006c6a:	f84e 4b04 	str.w	r4, [lr], #4
 8006c6e:	f851 4b04 	ldr.w	r4, [r1], #4
 8006c72:	f8be 2000 	ldrh.w	r2, [lr]
 8006c76:	0c24      	lsrs	r4, r4, #16
 8006c78:	fb09 2404 	mla	r4, r9, r4, r2
 8006c7c:	458c      	cmp	ip, r1
 8006c7e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006c82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c86:	d8e7      	bhi.n	8006c58 <__multiply+0xfc>
 8006c88:	9a01      	ldr	r2, [sp, #4]
 8006c8a:	50b4      	str	r4, [r6, r2]
 8006c8c:	3604      	adds	r6, #4
 8006c8e:	e7a3      	b.n	8006bd8 <__multiply+0x7c>
 8006c90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1a5      	bne.n	8006be4 <__multiply+0x88>
 8006c98:	3f01      	subs	r7, #1
 8006c9a:	e7a1      	b.n	8006be0 <__multiply+0x84>
 8006c9c:	08007833 	.word	0x08007833
 8006ca0:	080078a4 	.word	0x080078a4

08006ca4 <__pow5mult>:
 8006ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca8:	4615      	mov	r5, r2
 8006caa:	f012 0203 	ands.w	r2, r2, #3
 8006cae:	4606      	mov	r6, r0
 8006cb0:	460f      	mov	r7, r1
 8006cb2:	d007      	beq.n	8006cc4 <__pow5mult+0x20>
 8006cb4:	4c25      	ldr	r4, [pc, #148]	; (8006d4c <__pow5mult+0xa8>)
 8006cb6:	3a01      	subs	r2, #1
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006cbe:	f7ff fe9f 	bl	8006a00 <__multadd>
 8006cc2:	4607      	mov	r7, r0
 8006cc4:	10ad      	asrs	r5, r5, #2
 8006cc6:	d03d      	beq.n	8006d44 <__pow5mult+0xa0>
 8006cc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006cca:	b97c      	cbnz	r4, 8006cec <__pow5mult+0x48>
 8006ccc:	2010      	movs	r0, #16
 8006cce:	f7ff fe11 	bl	80068f4 <malloc>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	6270      	str	r0, [r6, #36]	; 0x24
 8006cd6:	b928      	cbnz	r0, 8006ce4 <__pow5mult+0x40>
 8006cd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006cdc:	4b1c      	ldr	r3, [pc, #112]	; (8006d50 <__pow5mult+0xac>)
 8006cde:	481d      	ldr	r0, [pc, #116]	; (8006d54 <__pow5mult+0xb0>)
 8006ce0:	f000 fc20 	bl	8007524 <__assert_func>
 8006ce4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ce8:	6004      	str	r4, [r0, #0]
 8006cea:	60c4      	str	r4, [r0, #12]
 8006cec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006cf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cf4:	b94c      	cbnz	r4, 8006d0a <__pow5mult+0x66>
 8006cf6:	f240 2171 	movw	r1, #625	; 0x271
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	f7ff ff18 	bl	8006b30 <__i2b>
 8006d00:	2300      	movs	r3, #0
 8006d02:	4604      	mov	r4, r0
 8006d04:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d08:	6003      	str	r3, [r0, #0]
 8006d0a:	f04f 0900 	mov.w	r9, #0
 8006d0e:	07eb      	lsls	r3, r5, #31
 8006d10:	d50a      	bpl.n	8006d28 <__pow5mult+0x84>
 8006d12:	4639      	mov	r1, r7
 8006d14:	4622      	mov	r2, r4
 8006d16:	4630      	mov	r0, r6
 8006d18:	f7ff ff20 	bl	8006b5c <__multiply>
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	4639      	mov	r1, r7
 8006d20:	4630      	mov	r0, r6
 8006d22:	f7ff fe4b 	bl	80069bc <_Bfree>
 8006d26:	4647      	mov	r7, r8
 8006d28:	106d      	asrs	r5, r5, #1
 8006d2a:	d00b      	beq.n	8006d44 <__pow5mult+0xa0>
 8006d2c:	6820      	ldr	r0, [r4, #0]
 8006d2e:	b938      	cbnz	r0, 8006d40 <__pow5mult+0x9c>
 8006d30:	4622      	mov	r2, r4
 8006d32:	4621      	mov	r1, r4
 8006d34:	4630      	mov	r0, r6
 8006d36:	f7ff ff11 	bl	8006b5c <__multiply>
 8006d3a:	6020      	str	r0, [r4, #0]
 8006d3c:	f8c0 9000 	str.w	r9, [r0]
 8006d40:	4604      	mov	r4, r0
 8006d42:	e7e4      	b.n	8006d0e <__pow5mult+0x6a>
 8006d44:	4638      	mov	r0, r7
 8006d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d4a:	bf00      	nop
 8006d4c:	080079f8 	.word	0x080079f8
 8006d50:	080077bd 	.word	0x080077bd
 8006d54:	080078a4 	.word	0x080078a4

08006d58 <__lshift>:
 8006d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	4607      	mov	r7, r0
 8006d60:	4691      	mov	r9, r2
 8006d62:	6923      	ldr	r3, [r4, #16]
 8006d64:	6849      	ldr	r1, [r1, #4]
 8006d66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d6a:	68a3      	ldr	r3, [r4, #8]
 8006d6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d70:	f108 0601 	add.w	r6, r8, #1
 8006d74:	42b3      	cmp	r3, r6
 8006d76:	db0b      	blt.n	8006d90 <__lshift+0x38>
 8006d78:	4638      	mov	r0, r7
 8006d7a:	f7ff fddf 	bl	800693c <_Balloc>
 8006d7e:	4605      	mov	r5, r0
 8006d80:	b948      	cbnz	r0, 8006d96 <__lshift+0x3e>
 8006d82:	4602      	mov	r2, r0
 8006d84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d88:	4b27      	ldr	r3, [pc, #156]	; (8006e28 <__lshift+0xd0>)
 8006d8a:	4828      	ldr	r0, [pc, #160]	; (8006e2c <__lshift+0xd4>)
 8006d8c:	f000 fbca 	bl	8007524 <__assert_func>
 8006d90:	3101      	adds	r1, #1
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	e7ee      	b.n	8006d74 <__lshift+0x1c>
 8006d96:	2300      	movs	r3, #0
 8006d98:	f100 0114 	add.w	r1, r0, #20
 8006d9c:	f100 0210 	add.w	r2, r0, #16
 8006da0:	4618      	mov	r0, r3
 8006da2:	4553      	cmp	r3, sl
 8006da4:	db33      	blt.n	8006e0e <__lshift+0xb6>
 8006da6:	6920      	ldr	r0, [r4, #16]
 8006da8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006dac:	f104 0314 	add.w	r3, r4, #20
 8006db0:	f019 091f 	ands.w	r9, r9, #31
 8006db4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006db8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dbc:	d02b      	beq.n	8006e16 <__lshift+0xbe>
 8006dbe:	468a      	mov	sl, r1
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f1c9 0e20 	rsb	lr, r9, #32
 8006dc6:	6818      	ldr	r0, [r3, #0]
 8006dc8:	fa00 f009 	lsl.w	r0, r0, r9
 8006dcc:	4302      	orrs	r2, r0
 8006dce:	f84a 2b04 	str.w	r2, [sl], #4
 8006dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dd6:	459c      	cmp	ip, r3
 8006dd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ddc:	d8f3      	bhi.n	8006dc6 <__lshift+0x6e>
 8006dde:	ebac 0304 	sub.w	r3, ip, r4
 8006de2:	3b15      	subs	r3, #21
 8006de4:	f023 0303 	bic.w	r3, r3, #3
 8006de8:	3304      	adds	r3, #4
 8006dea:	f104 0015 	add.w	r0, r4, #21
 8006dee:	4584      	cmp	ip, r0
 8006df0:	bf38      	it	cc
 8006df2:	2304      	movcc	r3, #4
 8006df4:	50ca      	str	r2, [r1, r3]
 8006df6:	b10a      	cbz	r2, 8006dfc <__lshift+0xa4>
 8006df8:	f108 0602 	add.w	r6, r8, #2
 8006dfc:	3e01      	subs	r6, #1
 8006dfe:	4638      	mov	r0, r7
 8006e00:	4621      	mov	r1, r4
 8006e02:	612e      	str	r6, [r5, #16]
 8006e04:	f7ff fdda 	bl	80069bc <_Bfree>
 8006e08:	4628      	mov	r0, r5
 8006e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e12:	3301      	adds	r3, #1
 8006e14:	e7c5      	b.n	8006da2 <__lshift+0x4a>
 8006e16:	3904      	subs	r1, #4
 8006e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e1c:	459c      	cmp	ip, r3
 8006e1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e22:	d8f9      	bhi.n	8006e18 <__lshift+0xc0>
 8006e24:	e7ea      	b.n	8006dfc <__lshift+0xa4>
 8006e26:	bf00      	nop
 8006e28:	08007833 	.word	0x08007833
 8006e2c:	080078a4 	.word	0x080078a4

08006e30 <__mcmp>:
 8006e30:	4603      	mov	r3, r0
 8006e32:	690a      	ldr	r2, [r1, #16]
 8006e34:	6900      	ldr	r0, [r0, #16]
 8006e36:	b530      	push	{r4, r5, lr}
 8006e38:	1a80      	subs	r0, r0, r2
 8006e3a:	d10d      	bne.n	8006e58 <__mcmp+0x28>
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	3114      	adds	r1, #20
 8006e40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006e44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006e48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e50:	4295      	cmp	r5, r2
 8006e52:	d002      	beq.n	8006e5a <__mcmp+0x2a>
 8006e54:	d304      	bcc.n	8006e60 <__mcmp+0x30>
 8006e56:	2001      	movs	r0, #1
 8006e58:	bd30      	pop	{r4, r5, pc}
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	d3f4      	bcc.n	8006e48 <__mcmp+0x18>
 8006e5e:	e7fb      	b.n	8006e58 <__mcmp+0x28>
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e64:	e7f8      	b.n	8006e58 <__mcmp+0x28>
	...

08006e68 <__mdiff>:
 8006e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	4606      	mov	r6, r0
 8006e70:	4611      	mov	r1, r2
 8006e72:	4620      	mov	r0, r4
 8006e74:	4692      	mov	sl, r2
 8006e76:	f7ff ffdb 	bl	8006e30 <__mcmp>
 8006e7a:	1e05      	subs	r5, r0, #0
 8006e7c:	d111      	bne.n	8006ea2 <__mdiff+0x3a>
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4630      	mov	r0, r6
 8006e82:	f7ff fd5b 	bl	800693c <_Balloc>
 8006e86:	4602      	mov	r2, r0
 8006e88:	b928      	cbnz	r0, 8006e96 <__mdiff+0x2e>
 8006e8a:	f240 2132 	movw	r1, #562	; 0x232
 8006e8e:	4b3c      	ldr	r3, [pc, #240]	; (8006f80 <__mdiff+0x118>)
 8006e90:	483c      	ldr	r0, [pc, #240]	; (8006f84 <__mdiff+0x11c>)
 8006e92:	f000 fb47 	bl	8007524 <__assert_func>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	bfa4      	itt	ge
 8006ea4:	4653      	movge	r3, sl
 8006ea6:	46a2      	movge	sl, r4
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006eae:	bfa6      	itte	ge
 8006eb0:	461c      	movge	r4, r3
 8006eb2:	2500      	movge	r5, #0
 8006eb4:	2501      	movlt	r5, #1
 8006eb6:	f7ff fd41 	bl	800693c <_Balloc>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	b918      	cbnz	r0, 8006ec6 <__mdiff+0x5e>
 8006ebe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ec2:	4b2f      	ldr	r3, [pc, #188]	; (8006f80 <__mdiff+0x118>)
 8006ec4:	e7e4      	b.n	8006e90 <__mdiff+0x28>
 8006ec6:	f100 0814 	add.w	r8, r0, #20
 8006eca:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006ece:	60c5      	str	r5, [r0, #12]
 8006ed0:	f04f 0c00 	mov.w	ip, #0
 8006ed4:	f10a 0514 	add.w	r5, sl, #20
 8006ed8:	f10a 0010 	add.w	r0, sl, #16
 8006edc:	46c2      	mov	sl, r8
 8006ede:	6926      	ldr	r6, [r4, #16]
 8006ee0:	f104 0914 	add.w	r9, r4, #20
 8006ee4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006ee8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006eec:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006ef0:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ef4:	fa1f f18b 	uxth.w	r1, fp
 8006ef8:	4461      	add	r1, ip
 8006efa:	fa1f fc83 	uxth.w	ip, r3
 8006efe:	0c1b      	lsrs	r3, r3, #16
 8006f00:	eba1 010c 	sub.w	r1, r1, ip
 8006f04:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f08:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006f0c:	b289      	uxth	r1, r1
 8006f0e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006f12:	454e      	cmp	r6, r9
 8006f14:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006f18:	f84a 3b04 	str.w	r3, [sl], #4
 8006f1c:	d8e6      	bhi.n	8006eec <__mdiff+0x84>
 8006f1e:	1b33      	subs	r3, r6, r4
 8006f20:	3b15      	subs	r3, #21
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	3415      	adds	r4, #21
 8006f28:	3304      	adds	r3, #4
 8006f2a:	42a6      	cmp	r6, r4
 8006f2c:	bf38      	it	cc
 8006f2e:	2304      	movcc	r3, #4
 8006f30:	441d      	add	r5, r3
 8006f32:	4443      	add	r3, r8
 8006f34:	461e      	mov	r6, r3
 8006f36:	462c      	mov	r4, r5
 8006f38:	4574      	cmp	r4, lr
 8006f3a:	d30e      	bcc.n	8006f5a <__mdiff+0xf2>
 8006f3c:	f10e 0103 	add.w	r1, lr, #3
 8006f40:	1b49      	subs	r1, r1, r5
 8006f42:	f021 0103 	bic.w	r1, r1, #3
 8006f46:	3d03      	subs	r5, #3
 8006f48:	45ae      	cmp	lr, r5
 8006f4a:	bf38      	it	cc
 8006f4c:	2100      	movcc	r1, #0
 8006f4e:	4419      	add	r1, r3
 8006f50:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006f54:	b18b      	cbz	r3, 8006f7a <__mdiff+0x112>
 8006f56:	6117      	str	r7, [r2, #16]
 8006f58:	e7a0      	b.n	8006e9c <__mdiff+0x34>
 8006f5a:	f854 8b04 	ldr.w	r8, [r4], #4
 8006f5e:	fa1f f188 	uxth.w	r1, r8
 8006f62:	4461      	add	r1, ip
 8006f64:	1408      	asrs	r0, r1, #16
 8006f66:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006f6a:	b289      	uxth	r1, r1
 8006f6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006f70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f74:	f846 1b04 	str.w	r1, [r6], #4
 8006f78:	e7de      	b.n	8006f38 <__mdiff+0xd0>
 8006f7a:	3f01      	subs	r7, #1
 8006f7c:	e7e8      	b.n	8006f50 <__mdiff+0xe8>
 8006f7e:	bf00      	nop
 8006f80:	08007833 	.word	0x08007833
 8006f84:	080078a4 	.word	0x080078a4

08006f88 <__d2b>:
 8006f88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006f92:	4690      	mov	r8, r2
 8006f94:	461d      	mov	r5, r3
 8006f96:	f7ff fcd1 	bl	800693c <_Balloc>
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	b930      	cbnz	r0, 8006fac <__d2b+0x24>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	f240 310a 	movw	r1, #778	; 0x30a
 8006fa4:	4b24      	ldr	r3, [pc, #144]	; (8007038 <__d2b+0xb0>)
 8006fa6:	4825      	ldr	r0, [pc, #148]	; (800703c <__d2b+0xb4>)
 8006fa8:	f000 fabc 	bl	8007524 <__assert_func>
 8006fac:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006fb0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006fb4:	bb2d      	cbnz	r5, 8007002 <__d2b+0x7a>
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	f1b8 0300 	subs.w	r3, r8, #0
 8006fbc:	d026      	beq.n	800700c <__d2b+0x84>
 8006fbe:	4668      	mov	r0, sp
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	f7ff fd87 	bl	8006ad4 <__lo0bits>
 8006fc6:	9900      	ldr	r1, [sp, #0]
 8006fc8:	b1f0      	cbz	r0, 8007008 <__d2b+0x80>
 8006fca:	9a01      	ldr	r2, [sp, #4]
 8006fcc:	f1c0 0320 	rsb	r3, r0, #32
 8006fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	40c2      	lsrs	r2, r0
 8006fd8:	6163      	str	r3, [r4, #20]
 8006fda:	9201      	str	r2, [sp, #4]
 8006fdc:	9b01      	ldr	r3, [sp, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	bf14      	ite	ne
 8006fe2:	2102      	movne	r1, #2
 8006fe4:	2101      	moveq	r1, #1
 8006fe6:	61a3      	str	r3, [r4, #24]
 8006fe8:	6121      	str	r1, [r4, #16]
 8006fea:	b1c5      	cbz	r5, 800701e <__d2b+0x96>
 8006fec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ff0:	4405      	add	r5, r0
 8006ff2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ff6:	603d      	str	r5, [r7, #0]
 8006ff8:	6030      	str	r0, [r6, #0]
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	b002      	add	sp, #8
 8006ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007006:	e7d6      	b.n	8006fb6 <__d2b+0x2e>
 8007008:	6161      	str	r1, [r4, #20]
 800700a:	e7e7      	b.n	8006fdc <__d2b+0x54>
 800700c:	a801      	add	r0, sp, #4
 800700e:	f7ff fd61 	bl	8006ad4 <__lo0bits>
 8007012:	2101      	movs	r1, #1
 8007014:	9b01      	ldr	r3, [sp, #4]
 8007016:	6121      	str	r1, [r4, #16]
 8007018:	6163      	str	r3, [r4, #20]
 800701a:	3020      	adds	r0, #32
 800701c:	e7e5      	b.n	8006fea <__d2b+0x62>
 800701e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007022:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007026:	6038      	str	r0, [r7, #0]
 8007028:	6918      	ldr	r0, [r3, #16]
 800702a:	f7ff fd33 	bl	8006a94 <__hi0bits>
 800702e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007032:	6031      	str	r1, [r6, #0]
 8007034:	e7e1      	b.n	8006ffa <__d2b+0x72>
 8007036:	bf00      	nop
 8007038:	08007833 	.word	0x08007833
 800703c:	080078a4 	.word	0x080078a4

08007040 <_calloc_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	fb02 f501 	mul.w	r5, r2, r1
 8007046:	4629      	mov	r1, r5
 8007048:	f000 f854 	bl	80070f4 <_malloc_r>
 800704c:	4604      	mov	r4, r0
 800704e:	b118      	cbz	r0, 8007058 <_calloc_r+0x18>
 8007050:	462a      	mov	r2, r5
 8007052:	2100      	movs	r1, #0
 8007054:	f7fd fdf8 	bl	8004c48 <memset>
 8007058:	4620      	mov	r0, r4
 800705a:	bd38      	pop	{r3, r4, r5, pc}

0800705c <_free_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4605      	mov	r5, r0
 8007060:	2900      	cmp	r1, #0
 8007062:	d043      	beq.n	80070ec <_free_r+0x90>
 8007064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007068:	1f0c      	subs	r4, r1, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	bfb8      	it	lt
 800706e:	18e4      	addlt	r4, r4, r3
 8007070:	f000 fade 	bl	8007630 <__malloc_lock>
 8007074:	4a1e      	ldr	r2, [pc, #120]	; (80070f0 <_free_r+0x94>)
 8007076:	6813      	ldr	r3, [r2, #0]
 8007078:	4610      	mov	r0, r2
 800707a:	b933      	cbnz	r3, 800708a <_free_r+0x2e>
 800707c:	6063      	str	r3, [r4, #4]
 800707e:	6014      	str	r4, [r2, #0]
 8007080:	4628      	mov	r0, r5
 8007082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007086:	f000 bad9 	b.w	800763c <__malloc_unlock>
 800708a:	42a3      	cmp	r3, r4
 800708c:	d90a      	bls.n	80070a4 <_free_r+0x48>
 800708e:	6821      	ldr	r1, [r4, #0]
 8007090:	1862      	adds	r2, r4, r1
 8007092:	4293      	cmp	r3, r2
 8007094:	bf01      	itttt	eq
 8007096:	681a      	ldreq	r2, [r3, #0]
 8007098:	685b      	ldreq	r3, [r3, #4]
 800709a:	1852      	addeq	r2, r2, r1
 800709c:	6022      	streq	r2, [r4, #0]
 800709e:	6063      	str	r3, [r4, #4]
 80070a0:	6004      	str	r4, [r0, #0]
 80070a2:	e7ed      	b.n	8007080 <_free_r+0x24>
 80070a4:	461a      	mov	r2, r3
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	b10b      	cbz	r3, 80070ae <_free_r+0x52>
 80070aa:	42a3      	cmp	r3, r4
 80070ac:	d9fa      	bls.n	80070a4 <_free_r+0x48>
 80070ae:	6811      	ldr	r1, [r2, #0]
 80070b0:	1850      	adds	r0, r2, r1
 80070b2:	42a0      	cmp	r0, r4
 80070b4:	d10b      	bne.n	80070ce <_free_r+0x72>
 80070b6:	6820      	ldr	r0, [r4, #0]
 80070b8:	4401      	add	r1, r0
 80070ba:	1850      	adds	r0, r2, r1
 80070bc:	4283      	cmp	r3, r0
 80070be:	6011      	str	r1, [r2, #0]
 80070c0:	d1de      	bne.n	8007080 <_free_r+0x24>
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	4401      	add	r1, r0
 80070c8:	6011      	str	r1, [r2, #0]
 80070ca:	6053      	str	r3, [r2, #4]
 80070cc:	e7d8      	b.n	8007080 <_free_r+0x24>
 80070ce:	d902      	bls.n	80070d6 <_free_r+0x7a>
 80070d0:	230c      	movs	r3, #12
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	e7d4      	b.n	8007080 <_free_r+0x24>
 80070d6:	6820      	ldr	r0, [r4, #0]
 80070d8:	1821      	adds	r1, r4, r0
 80070da:	428b      	cmp	r3, r1
 80070dc:	bf01      	itttt	eq
 80070de:	6819      	ldreq	r1, [r3, #0]
 80070e0:	685b      	ldreq	r3, [r3, #4]
 80070e2:	1809      	addeq	r1, r1, r0
 80070e4:	6021      	streq	r1, [r4, #0]
 80070e6:	6063      	str	r3, [r4, #4]
 80070e8:	6054      	str	r4, [r2, #4]
 80070ea:	e7c9      	b.n	8007080 <_free_r+0x24>
 80070ec:	bd38      	pop	{r3, r4, r5, pc}
 80070ee:	bf00      	nop
 80070f0:	20000204 	.word	0x20000204

080070f4 <_malloc_r>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	1ccd      	adds	r5, r1, #3
 80070f8:	f025 0503 	bic.w	r5, r5, #3
 80070fc:	3508      	adds	r5, #8
 80070fe:	2d0c      	cmp	r5, #12
 8007100:	bf38      	it	cc
 8007102:	250c      	movcc	r5, #12
 8007104:	2d00      	cmp	r5, #0
 8007106:	4606      	mov	r6, r0
 8007108:	db01      	blt.n	800710e <_malloc_r+0x1a>
 800710a:	42a9      	cmp	r1, r5
 800710c:	d903      	bls.n	8007116 <_malloc_r+0x22>
 800710e:	230c      	movs	r3, #12
 8007110:	6033      	str	r3, [r6, #0]
 8007112:	2000      	movs	r0, #0
 8007114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007116:	f000 fa8b 	bl	8007630 <__malloc_lock>
 800711a:	4921      	ldr	r1, [pc, #132]	; (80071a0 <_malloc_r+0xac>)
 800711c:	680a      	ldr	r2, [r1, #0]
 800711e:	4614      	mov	r4, r2
 8007120:	b99c      	cbnz	r4, 800714a <_malloc_r+0x56>
 8007122:	4f20      	ldr	r7, [pc, #128]	; (80071a4 <_malloc_r+0xb0>)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	b923      	cbnz	r3, 8007132 <_malloc_r+0x3e>
 8007128:	4621      	mov	r1, r4
 800712a:	4630      	mov	r0, r6
 800712c:	f000 f994 	bl	8007458 <_sbrk_r>
 8007130:	6038      	str	r0, [r7, #0]
 8007132:	4629      	mov	r1, r5
 8007134:	4630      	mov	r0, r6
 8007136:	f000 f98f 	bl	8007458 <_sbrk_r>
 800713a:	1c43      	adds	r3, r0, #1
 800713c:	d123      	bne.n	8007186 <_malloc_r+0x92>
 800713e:	230c      	movs	r3, #12
 8007140:	4630      	mov	r0, r6
 8007142:	6033      	str	r3, [r6, #0]
 8007144:	f000 fa7a 	bl	800763c <__malloc_unlock>
 8007148:	e7e3      	b.n	8007112 <_malloc_r+0x1e>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	1b5b      	subs	r3, r3, r5
 800714e:	d417      	bmi.n	8007180 <_malloc_r+0x8c>
 8007150:	2b0b      	cmp	r3, #11
 8007152:	d903      	bls.n	800715c <_malloc_r+0x68>
 8007154:	6023      	str	r3, [r4, #0]
 8007156:	441c      	add	r4, r3
 8007158:	6025      	str	r5, [r4, #0]
 800715a:	e004      	b.n	8007166 <_malloc_r+0x72>
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	42a2      	cmp	r2, r4
 8007160:	bf0c      	ite	eq
 8007162:	600b      	streq	r3, [r1, #0]
 8007164:	6053      	strne	r3, [r2, #4]
 8007166:	4630      	mov	r0, r6
 8007168:	f000 fa68 	bl	800763c <__malloc_unlock>
 800716c:	f104 000b 	add.w	r0, r4, #11
 8007170:	1d23      	adds	r3, r4, #4
 8007172:	f020 0007 	bic.w	r0, r0, #7
 8007176:	1ac2      	subs	r2, r0, r3
 8007178:	d0cc      	beq.n	8007114 <_malloc_r+0x20>
 800717a:	1a1b      	subs	r3, r3, r0
 800717c:	50a3      	str	r3, [r4, r2]
 800717e:	e7c9      	b.n	8007114 <_malloc_r+0x20>
 8007180:	4622      	mov	r2, r4
 8007182:	6864      	ldr	r4, [r4, #4]
 8007184:	e7cc      	b.n	8007120 <_malloc_r+0x2c>
 8007186:	1cc4      	adds	r4, r0, #3
 8007188:	f024 0403 	bic.w	r4, r4, #3
 800718c:	42a0      	cmp	r0, r4
 800718e:	d0e3      	beq.n	8007158 <_malloc_r+0x64>
 8007190:	1a21      	subs	r1, r4, r0
 8007192:	4630      	mov	r0, r6
 8007194:	f000 f960 	bl	8007458 <_sbrk_r>
 8007198:	3001      	adds	r0, #1
 800719a:	d1dd      	bne.n	8007158 <_malloc_r+0x64>
 800719c:	e7cf      	b.n	800713e <_malloc_r+0x4a>
 800719e:	bf00      	nop
 80071a0:	20000204 	.word	0x20000204
 80071a4:	20000208 	.word	0x20000208

080071a8 <__sfputc_r>:
 80071a8:	6893      	ldr	r3, [r2, #8]
 80071aa:	b410      	push	{r4}
 80071ac:	3b01      	subs	r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	6093      	str	r3, [r2, #8]
 80071b2:	da07      	bge.n	80071c4 <__sfputc_r+0x1c>
 80071b4:	6994      	ldr	r4, [r2, #24]
 80071b6:	42a3      	cmp	r3, r4
 80071b8:	db01      	blt.n	80071be <__sfputc_r+0x16>
 80071ba:	290a      	cmp	r1, #10
 80071bc:	d102      	bne.n	80071c4 <__sfputc_r+0x1c>
 80071be:	bc10      	pop	{r4}
 80071c0:	f7fe ba38 	b.w	8005634 <__swbuf_r>
 80071c4:	6813      	ldr	r3, [r2, #0]
 80071c6:	1c58      	adds	r0, r3, #1
 80071c8:	6010      	str	r0, [r2, #0]
 80071ca:	7019      	strb	r1, [r3, #0]
 80071cc:	4608      	mov	r0, r1
 80071ce:	bc10      	pop	{r4}
 80071d0:	4770      	bx	lr

080071d2 <__sfputs_r>:
 80071d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d4:	4606      	mov	r6, r0
 80071d6:	460f      	mov	r7, r1
 80071d8:	4614      	mov	r4, r2
 80071da:	18d5      	adds	r5, r2, r3
 80071dc:	42ac      	cmp	r4, r5
 80071de:	d101      	bne.n	80071e4 <__sfputs_r+0x12>
 80071e0:	2000      	movs	r0, #0
 80071e2:	e007      	b.n	80071f4 <__sfputs_r+0x22>
 80071e4:	463a      	mov	r2, r7
 80071e6:	4630      	mov	r0, r6
 80071e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ec:	f7ff ffdc 	bl	80071a8 <__sfputc_r>
 80071f0:	1c43      	adds	r3, r0, #1
 80071f2:	d1f3      	bne.n	80071dc <__sfputs_r+0xa>
 80071f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071f8 <_vfiprintf_r>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	460d      	mov	r5, r1
 80071fe:	4614      	mov	r4, r2
 8007200:	4698      	mov	r8, r3
 8007202:	4606      	mov	r6, r0
 8007204:	b09d      	sub	sp, #116	; 0x74
 8007206:	b118      	cbz	r0, 8007210 <_vfiprintf_r+0x18>
 8007208:	6983      	ldr	r3, [r0, #24]
 800720a:	b90b      	cbnz	r3, 8007210 <_vfiprintf_r+0x18>
 800720c:	f7ff fa68 	bl	80066e0 <__sinit>
 8007210:	4b89      	ldr	r3, [pc, #548]	; (8007438 <_vfiprintf_r+0x240>)
 8007212:	429d      	cmp	r5, r3
 8007214:	d11b      	bne.n	800724e <_vfiprintf_r+0x56>
 8007216:	6875      	ldr	r5, [r6, #4]
 8007218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800721a:	07d9      	lsls	r1, r3, #31
 800721c:	d405      	bmi.n	800722a <_vfiprintf_r+0x32>
 800721e:	89ab      	ldrh	r3, [r5, #12]
 8007220:	059a      	lsls	r2, r3, #22
 8007222:	d402      	bmi.n	800722a <_vfiprintf_r+0x32>
 8007224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007226:	f7ff fafe 	bl	8006826 <__retarget_lock_acquire_recursive>
 800722a:	89ab      	ldrh	r3, [r5, #12]
 800722c:	071b      	lsls	r3, r3, #28
 800722e:	d501      	bpl.n	8007234 <_vfiprintf_r+0x3c>
 8007230:	692b      	ldr	r3, [r5, #16]
 8007232:	b9eb      	cbnz	r3, 8007270 <_vfiprintf_r+0x78>
 8007234:	4629      	mov	r1, r5
 8007236:	4630      	mov	r0, r6
 8007238:	f7fe fa4e 	bl	80056d8 <__swsetup_r>
 800723c:	b1c0      	cbz	r0, 8007270 <_vfiprintf_r+0x78>
 800723e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007240:	07dc      	lsls	r4, r3, #31
 8007242:	d50e      	bpl.n	8007262 <_vfiprintf_r+0x6a>
 8007244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007248:	b01d      	add	sp, #116	; 0x74
 800724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724e:	4b7b      	ldr	r3, [pc, #492]	; (800743c <_vfiprintf_r+0x244>)
 8007250:	429d      	cmp	r5, r3
 8007252:	d101      	bne.n	8007258 <_vfiprintf_r+0x60>
 8007254:	68b5      	ldr	r5, [r6, #8]
 8007256:	e7df      	b.n	8007218 <_vfiprintf_r+0x20>
 8007258:	4b79      	ldr	r3, [pc, #484]	; (8007440 <_vfiprintf_r+0x248>)
 800725a:	429d      	cmp	r5, r3
 800725c:	bf08      	it	eq
 800725e:	68f5      	ldreq	r5, [r6, #12]
 8007260:	e7da      	b.n	8007218 <_vfiprintf_r+0x20>
 8007262:	89ab      	ldrh	r3, [r5, #12]
 8007264:	0598      	lsls	r0, r3, #22
 8007266:	d4ed      	bmi.n	8007244 <_vfiprintf_r+0x4c>
 8007268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800726a:	f7ff fadd 	bl	8006828 <__retarget_lock_release_recursive>
 800726e:	e7e9      	b.n	8007244 <_vfiprintf_r+0x4c>
 8007270:	2300      	movs	r3, #0
 8007272:	9309      	str	r3, [sp, #36]	; 0x24
 8007274:	2320      	movs	r3, #32
 8007276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800727a:	2330      	movs	r3, #48	; 0x30
 800727c:	f04f 0901 	mov.w	r9, #1
 8007280:	f8cd 800c 	str.w	r8, [sp, #12]
 8007284:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007444 <_vfiprintf_r+0x24c>
 8007288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800728c:	4623      	mov	r3, r4
 800728e:	469a      	mov	sl, r3
 8007290:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007294:	b10a      	cbz	r2, 800729a <_vfiprintf_r+0xa2>
 8007296:	2a25      	cmp	r2, #37	; 0x25
 8007298:	d1f9      	bne.n	800728e <_vfiprintf_r+0x96>
 800729a:	ebba 0b04 	subs.w	fp, sl, r4
 800729e:	d00b      	beq.n	80072b8 <_vfiprintf_r+0xc0>
 80072a0:	465b      	mov	r3, fp
 80072a2:	4622      	mov	r2, r4
 80072a4:	4629      	mov	r1, r5
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7ff ff93 	bl	80071d2 <__sfputs_r>
 80072ac:	3001      	adds	r0, #1
 80072ae:	f000 80aa 	beq.w	8007406 <_vfiprintf_r+0x20e>
 80072b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072b4:	445a      	add	r2, fp
 80072b6:	9209      	str	r2, [sp, #36]	; 0x24
 80072b8:	f89a 3000 	ldrb.w	r3, [sl]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f000 80a2 	beq.w	8007406 <_vfiprintf_r+0x20e>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072cc:	f10a 0a01 	add.w	sl, sl, #1
 80072d0:	9304      	str	r3, [sp, #16]
 80072d2:	9307      	str	r3, [sp, #28]
 80072d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072d8:	931a      	str	r3, [sp, #104]	; 0x68
 80072da:	4654      	mov	r4, sl
 80072dc:	2205      	movs	r2, #5
 80072de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e2:	4858      	ldr	r0, [pc, #352]	; (8007444 <_vfiprintf_r+0x24c>)
 80072e4:	f7ff fb0e 	bl	8006904 <memchr>
 80072e8:	9a04      	ldr	r2, [sp, #16]
 80072ea:	b9d8      	cbnz	r0, 8007324 <_vfiprintf_r+0x12c>
 80072ec:	06d1      	lsls	r1, r2, #27
 80072ee:	bf44      	itt	mi
 80072f0:	2320      	movmi	r3, #32
 80072f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072f6:	0713      	lsls	r3, r2, #28
 80072f8:	bf44      	itt	mi
 80072fa:	232b      	movmi	r3, #43	; 0x2b
 80072fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007300:	f89a 3000 	ldrb.w	r3, [sl]
 8007304:	2b2a      	cmp	r3, #42	; 0x2a
 8007306:	d015      	beq.n	8007334 <_vfiprintf_r+0x13c>
 8007308:	4654      	mov	r4, sl
 800730a:	2000      	movs	r0, #0
 800730c:	f04f 0c0a 	mov.w	ip, #10
 8007310:	9a07      	ldr	r2, [sp, #28]
 8007312:	4621      	mov	r1, r4
 8007314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007318:	3b30      	subs	r3, #48	; 0x30
 800731a:	2b09      	cmp	r3, #9
 800731c:	d94e      	bls.n	80073bc <_vfiprintf_r+0x1c4>
 800731e:	b1b0      	cbz	r0, 800734e <_vfiprintf_r+0x156>
 8007320:	9207      	str	r2, [sp, #28]
 8007322:	e014      	b.n	800734e <_vfiprintf_r+0x156>
 8007324:	eba0 0308 	sub.w	r3, r0, r8
 8007328:	fa09 f303 	lsl.w	r3, r9, r3
 800732c:	4313      	orrs	r3, r2
 800732e:	46a2      	mov	sl, r4
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	e7d2      	b.n	80072da <_vfiprintf_r+0xe2>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	1d19      	adds	r1, r3, #4
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	9103      	str	r1, [sp, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	bfbb      	ittet	lt
 8007340:	425b      	neglt	r3, r3
 8007342:	f042 0202 	orrlt.w	r2, r2, #2
 8007346:	9307      	strge	r3, [sp, #28]
 8007348:	9307      	strlt	r3, [sp, #28]
 800734a:	bfb8      	it	lt
 800734c:	9204      	strlt	r2, [sp, #16]
 800734e:	7823      	ldrb	r3, [r4, #0]
 8007350:	2b2e      	cmp	r3, #46	; 0x2e
 8007352:	d10c      	bne.n	800736e <_vfiprintf_r+0x176>
 8007354:	7863      	ldrb	r3, [r4, #1]
 8007356:	2b2a      	cmp	r3, #42	; 0x2a
 8007358:	d135      	bne.n	80073c6 <_vfiprintf_r+0x1ce>
 800735a:	9b03      	ldr	r3, [sp, #12]
 800735c:	3402      	adds	r4, #2
 800735e:	1d1a      	adds	r2, r3, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	9203      	str	r2, [sp, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	bfb8      	it	lt
 8007368:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800736c:	9305      	str	r3, [sp, #20]
 800736e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007454 <_vfiprintf_r+0x25c>
 8007372:	2203      	movs	r2, #3
 8007374:	4650      	mov	r0, sl
 8007376:	7821      	ldrb	r1, [r4, #0]
 8007378:	f7ff fac4 	bl	8006904 <memchr>
 800737c:	b140      	cbz	r0, 8007390 <_vfiprintf_r+0x198>
 800737e:	2340      	movs	r3, #64	; 0x40
 8007380:	eba0 000a 	sub.w	r0, r0, sl
 8007384:	fa03 f000 	lsl.w	r0, r3, r0
 8007388:	9b04      	ldr	r3, [sp, #16]
 800738a:	3401      	adds	r4, #1
 800738c:	4303      	orrs	r3, r0
 800738e:	9304      	str	r3, [sp, #16]
 8007390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007394:	2206      	movs	r2, #6
 8007396:	482c      	ldr	r0, [pc, #176]	; (8007448 <_vfiprintf_r+0x250>)
 8007398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800739c:	f7ff fab2 	bl	8006904 <memchr>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d03f      	beq.n	8007424 <_vfiprintf_r+0x22c>
 80073a4:	4b29      	ldr	r3, [pc, #164]	; (800744c <_vfiprintf_r+0x254>)
 80073a6:	bb1b      	cbnz	r3, 80073f0 <_vfiprintf_r+0x1f8>
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	3307      	adds	r3, #7
 80073ac:	f023 0307 	bic.w	r3, r3, #7
 80073b0:	3308      	adds	r3, #8
 80073b2:	9303      	str	r3, [sp, #12]
 80073b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b6:	443b      	add	r3, r7
 80073b8:	9309      	str	r3, [sp, #36]	; 0x24
 80073ba:	e767      	b.n	800728c <_vfiprintf_r+0x94>
 80073bc:	460c      	mov	r4, r1
 80073be:	2001      	movs	r0, #1
 80073c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80073c4:	e7a5      	b.n	8007312 <_vfiprintf_r+0x11a>
 80073c6:	2300      	movs	r3, #0
 80073c8:	f04f 0c0a 	mov.w	ip, #10
 80073cc:	4619      	mov	r1, r3
 80073ce:	3401      	adds	r4, #1
 80073d0:	9305      	str	r3, [sp, #20]
 80073d2:	4620      	mov	r0, r4
 80073d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073d8:	3a30      	subs	r2, #48	; 0x30
 80073da:	2a09      	cmp	r2, #9
 80073dc:	d903      	bls.n	80073e6 <_vfiprintf_r+0x1ee>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d0c5      	beq.n	800736e <_vfiprintf_r+0x176>
 80073e2:	9105      	str	r1, [sp, #20]
 80073e4:	e7c3      	b.n	800736e <_vfiprintf_r+0x176>
 80073e6:	4604      	mov	r4, r0
 80073e8:	2301      	movs	r3, #1
 80073ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80073ee:	e7f0      	b.n	80073d2 <_vfiprintf_r+0x1da>
 80073f0:	ab03      	add	r3, sp, #12
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	462a      	mov	r2, r5
 80073f6:	4630      	mov	r0, r6
 80073f8:	4b15      	ldr	r3, [pc, #84]	; (8007450 <_vfiprintf_r+0x258>)
 80073fa:	a904      	add	r1, sp, #16
 80073fc:	f7fd fcca 	bl	8004d94 <_printf_float>
 8007400:	4607      	mov	r7, r0
 8007402:	1c78      	adds	r0, r7, #1
 8007404:	d1d6      	bne.n	80073b4 <_vfiprintf_r+0x1bc>
 8007406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007408:	07d9      	lsls	r1, r3, #31
 800740a:	d405      	bmi.n	8007418 <_vfiprintf_r+0x220>
 800740c:	89ab      	ldrh	r3, [r5, #12]
 800740e:	059a      	lsls	r2, r3, #22
 8007410:	d402      	bmi.n	8007418 <_vfiprintf_r+0x220>
 8007412:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007414:	f7ff fa08 	bl	8006828 <__retarget_lock_release_recursive>
 8007418:	89ab      	ldrh	r3, [r5, #12]
 800741a:	065b      	lsls	r3, r3, #25
 800741c:	f53f af12 	bmi.w	8007244 <_vfiprintf_r+0x4c>
 8007420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007422:	e711      	b.n	8007248 <_vfiprintf_r+0x50>
 8007424:	ab03      	add	r3, sp, #12
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	462a      	mov	r2, r5
 800742a:	4630      	mov	r0, r6
 800742c:	4b08      	ldr	r3, [pc, #32]	; (8007450 <_vfiprintf_r+0x258>)
 800742e:	a904      	add	r1, sp, #16
 8007430:	f7fd ff4c 	bl	80052cc <_printf_i>
 8007434:	e7e4      	b.n	8007400 <_vfiprintf_r+0x208>
 8007436:	bf00      	nop
 8007438:	08007864 	.word	0x08007864
 800743c:	08007884 	.word	0x08007884
 8007440:	08007844 	.word	0x08007844
 8007444:	08007a04 	.word	0x08007a04
 8007448:	08007a0e 	.word	0x08007a0e
 800744c:	08004d95 	.word	0x08004d95
 8007450:	080071d3 	.word	0x080071d3
 8007454:	08007a0a 	.word	0x08007a0a

08007458 <_sbrk_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	2300      	movs	r3, #0
 800745c:	4d05      	ldr	r5, [pc, #20]	; (8007474 <_sbrk_r+0x1c>)
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	f7f9 fe7c 	bl	8001160 <_sbrk>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_sbrk_r+0x1a>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_sbrk_r+0x1a>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	200008c8 	.word	0x200008c8

08007478 <__sread>:
 8007478:	b510      	push	{r4, lr}
 800747a:	460c      	mov	r4, r1
 800747c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007480:	f000 f8e2 	bl	8007648 <_read_r>
 8007484:	2800      	cmp	r0, #0
 8007486:	bfab      	itete	ge
 8007488:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800748a:	89a3      	ldrhlt	r3, [r4, #12]
 800748c:	181b      	addge	r3, r3, r0
 800748e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007492:	bfac      	ite	ge
 8007494:	6563      	strge	r3, [r4, #84]	; 0x54
 8007496:	81a3      	strhlt	r3, [r4, #12]
 8007498:	bd10      	pop	{r4, pc}

0800749a <__swrite>:
 800749a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800749e:	461f      	mov	r7, r3
 80074a0:	898b      	ldrh	r3, [r1, #12]
 80074a2:	4605      	mov	r5, r0
 80074a4:	05db      	lsls	r3, r3, #23
 80074a6:	460c      	mov	r4, r1
 80074a8:	4616      	mov	r6, r2
 80074aa:	d505      	bpl.n	80074b8 <__swrite+0x1e>
 80074ac:	2302      	movs	r3, #2
 80074ae:	2200      	movs	r2, #0
 80074b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b4:	f000 f898 	bl	80075e8 <_lseek_r>
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	4632      	mov	r2, r6
 80074bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	4628      	mov	r0, r5
 80074c4:	463b      	mov	r3, r7
 80074c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074ce:	f000 b817 	b.w	8007500 <_write_r>

080074d2 <__sseek>:
 80074d2:	b510      	push	{r4, lr}
 80074d4:	460c      	mov	r4, r1
 80074d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074da:	f000 f885 	bl	80075e8 <_lseek_r>
 80074de:	1c43      	adds	r3, r0, #1
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	bf15      	itete	ne
 80074e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80074e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074ee:	81a3      	strheq	r3, [r4, #12]
 80074f0:	bf18      	it	ne
 80074f2:	81a3      	strhne	r3, [r4, #12]
 80074f4:	bd10      	pop	{r4, pc}

080074f6 <__sclose>:
 80074f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fa:	f000 b831 	b.w	8007560 <_close_r>
	...

08007500 <_write_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4604      	mov	r4, r0
 8007504:	4608      	mov	r0, r1
 8007506:	4611      	mov	r1, r2
 8007508:	2200      	movs	r2, #0
 800750a:	4d05      	ldr	r5, [pc, #20]	; (8007520 <_write_r+0x20>)
 800750c:	602a      	str	r2, [r5, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	f7f9 fdda 	bl	80010c8 <_write>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d102      	bne.n	800751e <_write_r+0x1e>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	b103      	cbz	r3, 800751e <_write_r+0x1e>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	200008c8 	.word	0x200008c8

08007524 <__assert_func>:
 8007524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007526:	4614      	mov	r4, r2
 8007528:	461a      	mov	r2, r3
 800752a:	4b09      	ldr	r3, [pc, #36]	; (8007550 <__assert_func+0x2c>)
 800752c:	4605      	mov	r5, r0
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68d8      	ldr	r0, [r3, #12]
 8007532:	b14c      	cbz	r4, 8007548 <__assert_func+0x24>
 8007534:	4b07      	ldr	r3, [pc, #28]	; (8007554 <__assert_func+0x30>)
 8007536:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800753a:	9100      	str	r1, [sp, #0]
 800753c:	462b      	mov	r3, r5
 800753e:	4906      	ldr	r1, [pc, #24]	; (8007558 <__assert_func+0x34>)
 8007540:	f000 f81e 	bl	8007580 <fiprintf>
 8007544:	f000 f89f 	bl	8007686 <abort>
 8007548:	4b04      	ldr	r3, [pc, #16]	; (800755c <__assert_func+0x38>)
 800754a:	461c      	mov	r4, r3
 800754c:	e7f3      	b.n	8007536 <__assert_func+0x12>
 800754e:	bf00      	nop
 8007550:	2000000c 	.word	0x2000000c
 8007554:	08007a15 	.word	0x08007a15
 8007558:	08007a22 	.word	0x08007a22
 800755c:	08007a50 	.word	0x08007a50

08007560 <_close_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	2300      	movs	r3, #0
 8007564:	4d05      	ldr	r5, [pc, #20]	; (800757c <_close_r+0x1c>)
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	602b      	str	r3, [r5, #0]
 800756c:	f7f9 fdc8 	bl	8001100 <_close>
 8007570:	1c43      	adds	r3, r0, #1
 8007572:	d102      	bne.n	800757a <_close_r+0x1a>
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	b103      	cbz	r3, 800757a <_close_r+0x1a>
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	bd38      	pop	{r3, r4, r5, pc}
 800757c:	200008c8 	.word	0x200008c8

08007580 <fiprintf>:
 8007580:	b40e      	push	{r1, r2, r3}
 8007582:	b503      	push	{r0, r1, lr}
 8007584:	4601      	mov	r1, r0
 8007586:	ab03      	add	r3, sp, #12
 8007588:	4805      	ldr	r0, [pc, #20]	; (80075a0 <fiprintf+0x20>)
 800758a:	f853 2b04 	ldr.w	r2, [r3], #4
 800758e:	6800      	ldr	r0, [r0, #0]
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	f7ff fe31 	bl	80071f8 <_vfiprintf_r>
 8007596:	b002      	add	sp, #8
 8007598:	f85d eb04 	ldr.w	lr, [sp], #4
 800759c:	b003      	add	sp, #12
 800759e:	4770      	bx	lr
 80075a0:	2000000c 	.word	0x2000000c

080075a4 <_fstat_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	2300      	movs	r3, #0
 80075a8:	4d06      	ldr	r5, [pc, #24]	; (80075c4 <_fstat_r+0x20>)
 80075aa:	4604      	mov	r4, r0
 80075ac:	4608      	mov	r0, r1
 80075ae:	4611      	mov	r1, r2
 80075b0:	602b      	str	r3, [r5, #0]
 80075b2:	f7f9 fdb0 	bl	8001116 <_fstat>
 80075b6:	1c43      	adds	r3, r0, #1
 80075b8:	d102      	bne.n	80075c0 <_fstat_r+0x1c>
 80075ba:	682b      	ldr	r3, [r5, #0]
 80075bc:	b103      	cbz	r3, 80075c0 <_fstat_r+0x1c>
 80075be:	6023      	str	r3, [r4, #0]
 80075c0:	bd38      	pop	{r3, r4, r5, pc}
 80075c2:	bf00      	nop
 80075c4:	200008c8 	.word	0x200008c8

080075c8 <_isatty_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	2300      	movs	r3, #0
 80075cc:	4d05      	ldr	r5, [pc, #20]	; (80075e4 <_isatty_r+0x1c>)
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7f9 fdae 	bl	8001134 <_isatty>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_isatty_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_isatty_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	200008c8 	.word	0x200008c8

080075e8 <_lseek_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4604      	mov	r4, r0
 80075ec:	4608      	mov	r0, r1
 80075ee:	4611      	mov	r1, r2
 80075f0:	2200      	movs	r2, #0
 80075f2:	4d05      	ldr	r5, [pc, #20]	; (8007608 <_lseek_r+0x20>)
 80075f4:	602a      	str	r2, [r5, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f7f9 fda6 	bl	8001148 <_lseek>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_lseek_r+0x1e>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_lseek_r+0x1e>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	200008c8 	.word	0x200008c8

0800760c <__ascii_mbtowc>:
 800760c:	b082      	sub	sp, #8
 800760e:	b901      	cbnz	r1, 8007612 <__ascii_mbtowc+0x6>
 8007610:	a901      	add	r1, sp, #4
 8007612:	b142      	cbz	r2, 8007626 <__ascii_mbtowc+0x1a>
 8007614:	b14b      	cbz	r3, 800762a <__ascii_mbtowc+0x1e>
 8007616:	7813      	ldrb	r3, [r2, #0]
 8007618:	600b      	str	r3, [r1, #0]
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	1e10      	subs	r0, r2, #0
 800761e:	bf18      	it	ne
 8007620:	2001      	movne	r0, #1
 8007622:	b002      	add	sp, #8
 8007624:	4770      	bx	lr
 8007626:	4610      	mov	r0, r2
 8007628:	e7fb      	b.n	8007622 <__ascii_mbtowc+0x16>
 800762a:	f06f 0001 	mvn.w	r0, #1
 800762e:	e7f8      	b.n	8007622 <__ascii_mbtowc+0x16>

08007630 <__malloc_lock>:
 8007630:	4801      	ldr	r0, [pc, #4]	; (8007638 <__malloc_lock+0x8>)
 8007632:	f7ff b8f8 	b.w	8006826 <__retarget_lock_acquire_recursive>
 8007636:	bf00      	nop
 8007638:	200008c0 	.word	0x200008c0

0800763c <__malloc_unlock>:
 800763c:	4801      	ldr	r0, [pc, #4]	; (8007644 <__malloc_unlock+0x8>)
 800763e:	f7ff b8f3 	b.w	8006828 <__retarget_lock_release_recursive>
 8007642:	bf00      	nop
 8007644:	200008c0 	.word	0x200008c0

08007648 <_read_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4604      	mov	r4, r0
 800764c:	4608      	mov	r0, r1
 800764e:	4611      	mov	r1, r2
 8007650:	2200      	movs	r2, #0
 8007652:	4d05      	ldr	r5, [pc, #20]	; (8007668 <_read_r+0x20>)
 8007654:	602a      	str	r2, [r5, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	f7f9 fd19 	bl	800108e <_read>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_read_r+0x1e>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_read_r+0x1e>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	200008c8 	.word	0x200008c8

0800766c <__ascii_wctomb>:
 800766c:	4603      	mov	r3, r0
 800766e:	4608      	mov	r0, r1
 8007670:	b141      	cbz	r1, 8007684 <__ascii_wctomb+0x18>
 8007672:	2aff      	cmp	r2, #255	; 0xff
 8007674:	d904      	bls.n	8007680 <__ascii_wctomb+0x14>
 8007676:	228a      	movs	r2, #138	; 0x8a
 8007678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	4770      	bx	lr
 8007680:	2001      	movs	r0, #1
 8007682:	700a      	strb	r2, [r1, #0]
 8007684:	4770      	bx	lr

08007686 <abort>:
 8007686:	2006      	movs	r0, #6
 8007688:	b508      	push	{r3, lr}
 800768a:	f000 f82b 	bl	80076e4 <raise>
 800768e:	2001      	movs	r0, #1
 8007690:	f7f9 fcf3 	bl	800107a <_exit>

08007694 <_raise_r>:
 8007694:	291f      	cmp	r1, #31
 8007696:	b538      	push	{r3, r4, r5, lr}
 8007698:	4604      	mov	r4, r0
 800769a:	460d      	mov	r5, r1
 800769c:	d904      	bls.n	80076a8 <_raise_r+0x14>
 800769e:	2316      	movs	r3, #22
 80076a0:	6003      	str	r3, [r0, #0]
 80076a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076a6:	bd38      	pop	{r3, r4, r5, pc}
 80076a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80076aa:	b112      	cbz	r2, 80076b2 <_raise_r+0x1e>
 80076ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80076b0:	b94b      	cbnz	r3, 80076c6 <_raise_r+0x32>
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 f830 	bl	8007718 <_getpid_r>
 80076b8:	462a      	mov	r2, r5
 80076ba:	4601      	mov	r1, r0
 80076bc:	4620      	mov	r0, r4
 80076be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076c2:	f000 b817 	b.w	80076f4 <_kill_r>
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d00a      	beq.n	80076e0 <_raise_r+0x4c>
 80076ca:	1c59      	adds	r1, r3, #1
 80076cc:	d103      	bne.n	80076d6 <_raise_r+0x42>
 80076ce:	2316      	movs	r3, #22
 80076d0:	6003      	str	r3, [r0, #0]
 80076d2:	2001      	movs	r0, #1
 80076d4:	e7e7      	b.n	80076a6 <_raise_r+0x12>
 80076d6:	2400      	movs	r4, #0
 80076d8:	4628      	mov	r0, r5
 80076da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076de:	4798      	blx	r3
 80076e0:	2000      	movs	r0, #0
 80076e2:	e7e0      	b.n	80076a6 <_raise_r+0x12>

080076e4 <raise>:
 80076e4:	4b02      	ldr	r3, [pc, #8]	; (80076f0 <raise+0xc>)
 80076e6:	4601      	mov	r1, r0
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	f7ff bfd3 	b.w	8007694 <_raise_r>
 80076ee:	bf00      	nop
 80076f0:	2000000c 	.word	0x2000000c

080076f4 <_kill_r>:
 80076f4:	b538      	push	{r3, r4, r5, lr}
 80076f6:	2300      	movs	r3, #0
 80076f8:	4d06      	ldr	r5, [pc, #24]	; (8007714 <_kill_r+0x20>)
 80076fa:	4604      	mov	r4, r0
 80076fc:	4608      	mov	r0, r1
 80076fe:	4611      	mov	r1, r2
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	f7f9 fcaa 	bl	800105a <_kill>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	d102      	bne.n	8007710 <_kill_r+0x1c>
 800770a:	682b      	ldr	r3, [r5, #0]
 800770c:	b103      	cbz	r3, 8007710 <_kill_r+0x1c>
 800770e:	6023      	str	r3, [r4, #0]
 8007710:	bd38      	pop	{r3, r4, r5, pc}
 8007712:	bf00      	nop
 8007714:	200008c8 	.word	0x200008c8

08007718 <_getpid_r>:
 8007718:	f7f9 bc98 	b.w	800104c <_getpid>

0800771c <_init>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	bf00      	nop
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr

08007728 <_fini>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	bf00      	nop
 800772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772e:	bc08      	pop	{r3}
 8007730:	469e      	mov	lr, r3
 8007732:	4770      	bx	lr
